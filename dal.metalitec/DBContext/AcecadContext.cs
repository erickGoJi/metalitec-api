using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using biz.erpmet.Entities;
using biz.metalitec.Entities;
using biz.metalitec.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ProgramMounting = biz.metalitec.Entities.ProgramMounting;

namespace dal.metalitec.DBContext
{
    public partial class AcecadContext : DbContext
    {
        public AcecadContext()
        {
        }

        public AcecadContext(DbContextOptions<AcecadContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activitylog> Activitylogs { get; set; }
        public virtual DbSet<Addition> Additions { get; set; }
        public virtual DbSet<AdditionTemplate> AdditionTemplates { get; set; }
        public virtual DbSet<AdditionTransport> AdditionTransports { get; set; }
        public virtual DbSet<AdditionWeight> AdditionWeights { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationForPayment> ApplicationForPayments { get; set; }
        public virtual DbSet<ApplicationForPaymentAgreedItem> ApplicationForPaymentAgreedItems { get; set; }
        public virtual DbSet<ApplicationForPaymentCorrespondence> ApplicationForPaymentCorrespondences { get; set; }
        public virtual DbSet<ApplicationForPaymentItem> ApplicationForPaymentItems { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<BarcodeInterface> BarcodeInterfaces { get; set; }
        public virtual DbSet<BarcodeUpload> BarcodeUploads { get; set; }
        public virtual DbSet<Cadinterface> Cadinterfaces { get; set; }
        public virtual DbSet<ChangeLog> ChangeLogs { get; set; }
        public virtual DbSet<ChangeOrder> ChangeOrders { get; set; }
        public virtual DbSet<ChangeOrderAttachmentLink> ChangeOrderAttachmentLinks { get; set; }
        public virtual DbSet<ChangeOrderClientChangeOrder> ChangeOrderClientChangeOrders { get; set; }
        public virtual DbSet<ChangeOrderClientDocumentLink> ChangeOrderClientDocumentLinks { get; set; }
        public virtual DbSet<ChangeOrderImpact> ChangeOrderImpacts { get; set; }
        public virtual DbSet<ChangeOrderKeyRequirement> ChangeOrderKeyRequirements { get; set; }
        public virtual DbSet<ChangeOrderLink> ChangeOrderLinks { get; set; }
        public virtual DbSet<ChangeOrderNumber> ChangeOrderNumbers { get; set; }
        public virtual DbSet<ChangeOrderRevision> ChangeOrderRevisions { get; set; }
        public virtual DbSet<ChangeOrderStatus> ChangeOrderStatuses { get; set; }
        public virtual DbSet<ChangeOrderValuation> ChangeOrderValuations { get; set; }
        public virtual DbSet<CombinedMarkItem> CombinedMarkItems { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractBatch> ContractBatches { get; set; }
        public virtual DbSet<ContractBatchContract> ContractBatchContracts { get; set; }
        public virtual DbSet<ContractBudget> ContractBudgets { get; set; }
        public virtual DbSet<ContractBudgetIitl> ContractBudgetIitls { get; set; }
        public virtual DbSet<ContractBudgetLine> ContractBudgetLines { get; set; }
        public virtual DbSet<ContractBudgetTransaction> ContractBudgetTransactions { get; set; }
        public virtual DbSet<ContractBundle> ContractBundles { get; set; }
        public virtual DbSet<ContractContact> ContractContacts { get; set; }
        public virtual DbSet<ContractDetailedCadlisting> ContractDetailedCadlistings { get; set; }
        public virtual DbSet<ContractDetailedCadlistingBulkXml> ContractDetailedCadlistingBulkXmls { get; set; }
        public virtual DbSet<ContractDetailedCadlistingRevalidate> ContractDetailedCadlistingRevalidates { get; set; }
        public virtual DbSet<ContractDrawing> ContractDrawings { get; set; }
        public virtual DbSet<ContractInvoiceSchedule> ContractInvoiceSchedules { get; set; }
        public virtual DbSet<ContractItem> ContractItems { get; set; }
        public virtual DbSet<ContractItemCam> ContractItemCams { get; set; }
        public virtual DbSet<ContractListing> ContractListings { get; set; }
        public virtual DbSet<ContractLot> ContractLots { get; set; }
        public virtual DbSet<ContractLotRelease> ContractLotReleases { get; set; }
        public virtual DbSet<ContractLotUserDate> ContractLotUserDates { get; set; }
        public virtual DbSet<ContractLotUserDateProcess> ContractLotUserDateProcesses { get; set; }
        public virtual DbSet<ContractLotUserDateValue> ContractLotUserDateValues { get; set; }
        public virtual DbSet<ContractMark> ContractMarks { get; set; }
        public virtual DbSet<ContractMarkInstance> ContractMarkInstances { get; set; }
        public virtual DbSet<ContractMarkInstancePwocarchive> ContractMarkInstancePwocarchives { get; set; }
        public virtual DbSet<ContractMarkItem> ContractMarkItems { get; set; }
        public virtual DbSet<ContractMarkItemInstance> ContractMarkItemInstances { get; set; }
        public virtual DbSet<ContractMarkItemInstancePwocarchive> ContractMarkItemInstancePwocarchives { get; set; }
        public virtual DbSet<ContractMarkItemTransaction> ContractMarkItemTransactions { get; set; }
        public virtual DbSet<ContractMarkPhase> ContractMarkPhases { get; set; }
        public virtual DbSet<ContractMarkPhaseLot> ContractMarkPhaseLots { get; set; }
        public virtual DbSet<ContractMarkPhaseLotItem> ContractMarkPhaseLotItems { get; set; }
        public virtual DbSet<ContractPhase> ContractPhases { get; set; }
        public virtual DbSet<ContractPrelimCadlisting> ContractPrelimCadlistings { get; set; }
        public virtual DbSet<ContractPrelimMark> ContractPrelimMarks { get; set; }
        public virtual DbSet<ContractPrelimMarkSequence> ContractPrelimMarkSequences { get; set; }
        public virtual DbSet<ContractPrelimSequenceList> ContractPrelimSequenceLists { get; set; }
        public virtual DbSet<ContractPriority> ContractPriorities { get; set; }
        public virtual DbSet<ContractRevision> ContractRevisions { get; set; }
        public virtual DbSet<CostCentre> CostCentres { get; set; }
        public virtual DbSet<CostCode> CostCodes { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyConversion> CurrencyConversions { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentAdditionalDatum> DocumentAdditionalData { get; set; }
        public virtual DbSet<DocumentDistributionList> DocumentDistributionLists { get; set; }
        public virtual DbSet<DocumentDistributionListRecipient> DocumentDistributionListRecipients { get; set; }
        public virtual DbSet<DocumentInterface> DocumentInterfaces { get; set; }
        public virtual DbSet<DocumentInterfaceImportListing> DocumentInterfaceImportListings { get; set; }
        public virtual DbSet<DocumentPackage> DocumentPackages { get; set; }
        public virtual DbSet<DocumentPackageDocument> DocumentPackageDocuments { get; set; }
        public virtual DbSet<DocumentPackageRecipient> DocumentPackageRecipients { get; set; }
        public virtual DbSet<DocumentRevision> DocumentRevisions { get; set; }
        public virtual DbSet<DocumentRevisionCode> DocumentRevisionCodes { get; set; }
        public virtual DbSet<DocumentRevisionFile> DocumentRevisionFiles { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatuses { get; set; }
        public virtual DbSet<DocumentTransmittal> DocumentTransmittals { get; set; }
        public virtual DbSet<DocumentTransmittalDocument> DocumentTransmittalDocuments { get; set; }
        public virtual DbSet<DocumentTransmittalReason> DocumentTransmittalReasons { get; set; }
        public virtual DbSet<DocumentTransmittalRecipient> DocumentTransmittalRecipients { get; set; }
        public virtual DbSet<DocumentTransmittalResponse> DocumentTransmittalResponses { get; set; }
        public virtual DbSet<DocumentTransmittalRevision> DocumentTransmittalRevisions { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<Edifile> Edifiles { get; set; }
        public virtual DbSet<EdifileContract> EdifileContracts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeCalendar> EmployeeCalendars { get; set; }
        public virtual DbSet<EmployeeHourlyRate> EmployeeHourlyRates { get; set; }
        public virtual DbSet<EmployeeProcess> EmployeeProcesses { get; set; }
        public virtual DbSet<EmployeeTimesheet> EmployeeTimesheets { get; set; }
        public virtual DbSet<EmployeeTimesheetArchive> EmployeeTimesheetArchives { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<EnquiryExchangeRate> EnquiryExchangeRates { get; set; }
        public virtual DbSet<EnquiryMeetingNote> EnquiryMeetingNotes { get; set; }
        public virtual DbSet<EnquiryProjectPerson> EnquiryProjectPeople { get; set; }
        public virtual DbSet<Errorlog> Errorlogs { get; set; }
        public virtual DbSet<Estimate> Estimates { get; set; }
        public virtual DbSet<EstimateAssembly> EstimateAssemblies { get; set; }
        public virtual DbSet<EstimateAssemblyItem> EstimateAssemblyItems { get; set; }
        public virtual DbSet<EstimateAssemblyItemExtra> EstimateAssemblyItemExtras { get; set; }
        public virtual DbSet<EstimateAssemblyItemFitting> EstimateAssemblyItemFittings { get; set; }
        public virtual DbSet<EstimateAssemblyItemFittingProcess> EstimateAssemblyItemFittingProcesses { get; set; }
        public virtual DbSet<EstimateAssemblyItemUsageProcess> EstimateAssemblyItemUsageProcesses { get; set; }
        public virtual DbSet<EstimateCadlisting> EstimateCadlistings { get; set; }
        public virtual DbSet<EstimateEnquiry> EstimateEnquiries { get; set; }
        public virtual DbSet<EstimateExtra> EstimateExtras { get; set; }
        public virtual DbSet<EstimateItemExtraRate> EstimateItemExtraRates { get; set; }
        public virtual DbSet<EstimateItemExtraRateValue> EstimateItemExtraRateValues { get; set; }
        public virtual DbSet<EstimateItemFitting> EstimateItemFittings { get; set; }
        public virtual DbSet<EstimateItemFittingProcess> EstimateItemFittingProcesses { get; set; }
        public virtual DbSet<EstimateItemUsageProcess> EstimateItemUsageProcesses { get; set; }
        public virtual DbSet<EstimateSubSection> EstimateSubSections { get; set; }
        public virtual DbSet<EstimateSubsectionSet> EstimateSubsectionSets { get; set; }
        public virtual DbSet<EstimateSubsectionSetItem> EstimateSubsectionSetItems { get; set; }
        public virtual DbSet<Extra> Extras { get; set; }
        public virtual DbSet<ExtraCalculationType> ExtraCalculationTypes { get; set; }
        public virtual DbSet<ExtraGroup> ExtraGroups { get; set; }
        public virtual DbSet<ExtraGroupExtra> ExtraGroupExtras { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<FacilityCalendar> FacilityCalendars { get; set; }
        public virtual DbSet<FacilityProcessWeeklyCapacity> FacilityProcessWeeklyCapacities { get; set; }
        public virtual DbSet<FacilityTaskWeeklyCapacity> FacilityTaskWeeklyCapacities { get; set; }
        public virtual DbSet<Fitting> Fittings { get; set; }
        public virtual DbSet<FittingGroup> FittingGroups { get; set; }
        public virtual DbSet<FittingGroupItem> FittingGroupItems { get; set; }
        public virtual DbSet<FittingProcess> FittingProcesses { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<GradeCrossReference> GradeCrossReferences { get; set; }
        public virtual DbSet<HotfixLog> HotfixLogs { get; set; }
        public virtual DbSet<InventoryBarcodeListing> InventoryBarcodeListings { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemClassification> ItemClassifications { get; set; }
        public virtual DbSet<ItemCrossReference> ItemCrossReferences { get; set; }
        public virtual DbSet<ItemCustomer> ItemCustomers { get; set; }
        public virtual DbSet<ItemFinish> ItemFinishes { get; set; }
        public virtual DbSet<ItemFinishCoat> ItemFinishCoats { get; set; }
        public virtual DbSet<ItemFinishPreparation> ItemFinishPreparations { get; set; }
        public virtual DbSet<ItemInventory> ItemInventories { get; set; }
        public virtual DbSet<ItemInventoryArchive> ItemInventoryArchives { get; set; }
        public virtual DbSet<ItemInventoryExchangeLink> ItemInventoryExchangeLinks { get; set; }
        public virtual DbSet<ItemInventoryGroupProperty> ItemInventoryGroupProperties { get; set; }
        public virtual DbSet<ItemInventoryHistory> ItemInventoryHistories { get; set; }
        public virtual DbSet<ItemInventoryHistoryArchive> ItemInventoryHistoryArchives { get; set; }
        public virtual DbSet<ItemInventoryInstance> ItemInventoryInstances { get; set; }
        public virtual DbSet<ItemInventoryInstanceHistory> ItemInventoryInstanceHistories { get; set; }
        public virtual DbSet<ItemInventoryInstanceHistoryArchive> ItemInventoryInstanceHistoryArchives { get; set; }
        public virtual DbSet<ItemInventoryProperty> ItemInventoryProperties { get; set; }
        public virtual DbSet<ItemInventoryShape> ItemInventoryShapes { get; set; }
        public virtual DbSet<ItemInventoryTestCertMap> ItemInventoryTestCertMaps { get; set; }
        public virtual DbSet<ItemInventoryTrackingGuid> ItemInventoryTrackingGuids { get; set; }
        public virtual DbSet<ItemInventoryTrackingGuidLink> ItemInventoryTrackingGuidLinks { get; set; }
        public virtual DbSet<ItemInventoryTransaction> ItemInventoryTransactions { get; set; }
        public virtual DbSet<ItemInventoryTransactionArchiveLink> ItemInventoryTransactionArchiveLinks { get; set; }
        public virtual DbSet<ItemInventoryTransactionLine> ItemInventoryTransactionLines { get; set; }
        public virtual DbSet<ItemInventoryTransactionLineArchive> ItemInventoryTransactionLineArchives { get; set; }
        public virtual DbSet<ItemInventoryTransactionLineInstance> ItemInventoryTransactionLineInstances { get; set; }
        public virtual DbSet<ItemInventoryTransactionLineInstanceArchive> ItemInventoryTransactionLineInstanceArchives { get; set; }
        public virtual DbSet<ItemInventoryTransactionLineInstancePwocarchive> ItemInventoryTransactionLineInstancePwocarchives { get; set; }
        public virtual DbSet<ItemInventoryTransactionLink> ItemInventoryTransactionLinks { get; set; }
        public virtual DbSet<ItemInventoryTransactionLinkArchive> ItemInventoryTransactionLinkArchives { get; set; }
        public virtual DbSet<ItemLength> ItemLengths { get; set; }
        public virtual DbSet<ItemListing> ItemListings { get; set; }
        public virtual DbSet<ItemLocation> ItemLocations { get; set; }
        public virtual DbSet<ItemLocationRule> ItemLocationRules { get; set; }
        public virtual DbSet<ItemLocationRuleItem> ItemLocationRuleItems { get; set; }
        public virtual DbSet<ItemLocationRuleParameter> ItemLocationRuleParameters { get; set; }
        public virtual DbSet<ItemLocationRuleVm> ItemLocationRuleVms { get; set; }
        public virtual DbSet<ItemParameter> ItemParameters { get; set; }
        public virtual DbSet<ItemReservation> ItemReservations { get; set; }
        public virtual DbSet<ItemReservationContract> ItemReservationContracts { get; set; }
        public virtual DbSet<ItemReservationHistory> ItemReservationHistories { get; set; }
        public virtual DbSet<ItemShortcutCode> ItemShortcutCodes { get; set; }
        public virtual DbSet<ItemSiteInventory> ItemSiteInventories { get; set; }
        public virtual DbSet<ItemSiteInventoryHistory> ItemSiteInventoryHistories { get; set; }
        public virtual DbSet<ItemSiteInventoryHistoryArchive> ItemSiteInventoryHistoryArchives { get; set; }
        public virtual DbSet<ItemSiteInventoryInstance> ItemSiteInventoryInstances { get; set; }
        public virtual DbSet<ItemSiteInventoryInstanceHistory> ItemSiteInventoryInstanceHistories { get; set; }
        public virtual DbSet<ItemSiteInventoryInstanceHistoryArchive> ItemSiteInventoryInstanceHistoryArchives { get; set; }
        public virtual DbSet<ItemSupplier> ItemSuppliers { get; set; }
        public virtual DbSet<ItemSupplierLength> ItemSupplierLengths { get; set; }
        public virtual DbSet<ItemSupplierMinimumQuantity> ItemSupplierMinimumQuantities { get; set; }
        public virtual DbSet<ItemTracking> ItemTrackings { get; set; }
        public virtual DbSet<ItemTrackingNextNumber> ItemTrackingNextNumbers { get; set; }
        public virtual DbSet<ItemTransactionType> ItemTransactionTypes { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<ItemUsage> ItemUsages { get; set; }
        public virtual DbSet<ItemUsageFitting> ItemUsageFittings { get; set; }
        public virtual DbSet<ItemUsageFittingPercentage> ItemUsageFittingPercentages { get; set; }
        public virtual DbSet<ItemUsageItem> ItemUsageItems { get; set; }
        public virtual DbSet<ItemUsageProcess> ItemUsageProcesses { get; set; }
        public virtual DbSet<KeyRequirement> KeyRequirements { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LanguageString> LanguageStrings { get; set; }
        public virtual DbSet<LanguageStringTranslation> LanguageStringTranslations { get; set; }
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<LookupValue> LookupValues { get; set; }
        public virtual DbSet<LottingDateDependency> LottingDateDependencies { get; set; }
        public virtual DbSet<NestResultsEstimateItemFitting> NestResultsEstimateItemFittings { get; set; }
        public virtual DbSet<NestResultsItemListing> NestResultsItemListings { get; set; }
        public virtual DbSet<NestResultsStockListing> NestResultsStockListings { get; set; }
        public virtual DbSet<Nesting> Nestings { get; set; }
        public virtual DbSet<NestingResult> NestingResults { get; set; }
        public virtual DbSet<NestingResultAllocation> NestingResultAllocations { get; set; }
        public virtual DbSet<NestingResultAllocationArchive> NestingResultAllocationArchives { get; set; }
        public virtual DbSet<NestingResultArchive> NestingResultArchives { get; set; }
        public virtual DbSet<NestingResultArchiveLink> NestingResultArchiveLinks { get; set; }
        public virtual DbSet<NestingResultCuttingPlan> NestingResultCuttingPlans { get; set; }
        public virtual DbSet<NestingResultItemDesign> NestingResultItemDesigns { get; set; }
        public virtual DbSet<NestingResultItemListing> NestingResultItemListings { get; set; }
        public virtual DbSet<NestingResultItemListingArchive> NestingResultItemListingArchives { get; set; }
        public virtual DbSet<NestingResultSupply> NestingResultSupplies { get; set; }
        public virtual DbSet<NestingResultSupplyArchive> NestingResultSupplyArchives { get; set; }
        public virtual DbSet<NestingResultSupplyLength> NestingResultSupplyLengths { get; set; }
        public virtual DbSet<NestingResultSupplyLengthArchive> NestingResultSupplyLengthArchives { get; set; }
        public virtual DbSet<NestingResultSupplyLengthInstance> NestingResultSupplyLengthInstances { get; set; }
        public virtual DbSet<NestingResultSupplyLengthInstanceArchive> NestingResultSupplyLengthInstanceArchives { get; set; }
        public virtual DbSet<NestingResultWeldedBar> NestingResultWeldedBars { get; set; }
        public virtual DbSet<NestingResultWeldedBarArchive> NestingResultWeldedBarArchives { get; set; }
        public virtual DbSet<Nsitem> Nsitems { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }
        public virtual DbSet<PlanningCalendar> PlanningCalendars { get; set; }
        public virtual DbSet<PlanningCalendarBase> PlanningCalendarBases { get; set; }
        public virtual DbSet<PlanningDetail> PlanningDetails { get; set; }
        public virtual DbSet<PlanningException> PlanningExceptions { get; set; }
        public virtual DbSet<PlanningExceptionWorkingTime> PlanningExceptionWorkingTimes { get; set; }
        public virtual DbSet<PlanningLongRange> PlanningLongRanges { get; set; }
        public virtual DbSet<PlanningLongRangeLine> PlanningLongRangeLines { get; set; }
        public virtual DbSet<PlanningLongRangeLineEvent> PlanningLongRangeLineEvents { get; set; }
        public virtual DbSet<PlanningLongRangeLineLotLink> PlanningLongRangeLineLotLinks { get; set; }
        public virtual DbSet<PlanningTimePeriod> PlanningTimePeriods { get; set; }
        public virtual DbSet<PlanningWorkWeek> PlanningWorkWeeks { get; set; }
        public virtual DbSet<PlanningWorkWeekDay> PlanningWorkWeekDays { get; set; }
        public virtual DbSet<PlanningWorkWeekDayWorkingTime> PlanningWorkWeekDayWorkingTimes { get; set; }
        public virtual DbSet<PlanningWorkWeekTimePeriod> PlanningWorkWeekTimePeriods { get; set; }
        public virtual DbSet<PlanningWorkingTime> PlanningWorkingTimes { get; set; }
        public virtual DbSet<PostProcessor> PostProcessors { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProductionContainer> ProductionContainers { get; set; }
        public virtual DbSet<ProductionContainerItem> ProductionContainerItems { get; set; }
        public virtual DbSet<ProductionContainerItemArchive> ProductionContainerItemArchives { get; set; }
        public virtual DbSet<ProductionPackage> ProductionPackages { get; set; }
        public virtual DbSet<ProductionPackageItem> ProductionPackageItems { get; set; }
        public virtual DbSet<ProductionPackageItemArchive> ProductionPackageItemArchives { get; set; }
        public virtual DbSet<ProductionProcess> ProductionProcesses { get; set; }
        public virtual DbSet<ProductionProcessCamcrossReference> ProductionProcessCamcrossReferences { get; set; }
        public virtual DbSet<ProductionProcessRole> ProductionProcessRoles { get; set; }
        public virtual DbSet<ProductionProcessSequence> ProductionProcessSequences { get; set; }
        public virtual DbSet<ProductionProposedMovement> ProductionProposedMovements { get; set; }
        public virtual DbSet<ProductionProposedMovementItem> ProductionProposedMovementItems { get; set; }
        public virtual DbSet<ProductionProposedMovementItemArchive> ProductionProposedMovementItemArchives { get; set; }
        public virtual DbSet<ProductionRequiredTask> ProductionRequiredTasks { get; set; }
        public virtual DbSet<ProductionRequiredTaskExtractor> ProductionRequiredTaskExtractors { get; set; }
        public virtual DbSet<ProductionRequiredTaskExtractorType> ProductionRequiredTaskExtractorTypes { get; set; }
        public virtual DbSet<ProductionRequiredTaskInstance> ProductionRequiredTaskInstances { get; set; }
        public virtual DbSet<ProductionRequiredTaskInstanceProperty> ProductionRequiredTaskInstanceProperties { get; set; }
        public virtual DbSet<ProductionRequiredTaskProperty> ProductionRequiredTaskProperties { get; set; }
        public virtual DbSet<ProductionRequiredTaskStrategy> ProductionRequiredTaskStrategies { get; set; }
        public virtual DbSet<ProductionRequiredTaskStrategyProcess> ProductionRequiredTaskStrategyProcesses { get; set; }
        public virtual DbSet<ProductionRule> ProductionRules { get; set; }
        public virtual DbSet<ProductionRuleParameter> ProductionRuleParameters { get; set; }
        public virtual DbSet<ProductionRuleParameterRequiredTaskProperty> ProductionRuleParameterRequiredTaskProperties { get; set; }
        public virtual DbSet<ProductionRuleProcessor> ProductionRuleProcessors { get; set; }
        public virtual DbSet<ProductionStage> ProductionStages { get; set; }
        public virtual DbSet<ProductionTemplate> ProductionTemplates { get; set; }
        public virtual DbSet<ProductionTemplateProcess> ProductionTemplateProcesses { get; set; }
        public virtual DbSet<ProductionTemplateProcessTiming> ProductionTemplateProcessTimings { get; set; }
        public virtual DbSet<ProductionTemplateRule> ProductionTemplateRules { get; set; }
        public virtual DbSet<ProductionTemplateRuleItem> ProductionTemplateRuleItems { get; set; }
        public virtual DbSet<ProductionTemplateRuleParameter> ProductionTemplateRuleParameters { get; set; }
        public virtual DbSet<ProductionTemplateRuleVm> ProductionTemplateRuleVms { get; set; }
        public virtual DbSet<ProductionWorkOrder> ProductionWorkOrders { get; set; }
        public virtual DbSet<ProductionWorkOrderArchive> ProductionWorkOrderArchives { get; set; }
        public virtual DbSet<ProductionWorkOrderArchiveLink> ProductionWorkOrderArchiveLinks { get; set; }
        public virtual DbSet<ProductionWorkOrderContract> ProductionWorkOrderContracts { get; set; }
        public virtual DbSet<ProductionWorkOrderContractArchive> ProductionWorkOrderContractArchives { get; set; }
        public virtual DbSet<ProductionWorkOrderProcess> ProductionWorkOrderProcesses { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessArchive> ProductionWorkOrderProcessArchives { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessPriority> ProductionWorkOrderProcessPriorities { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessQuantity> ProductionWorkOrderProcessQuantities { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessQuantityArchive> ProductionWorkOrderProcessQuantityArchives { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessQuantityHistory> ProductionWorkOrderProcessQuantityHistories { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessQuantityHistoryArchive> ProductionWorkOrderProcessQuantityHistoryArchives { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessQuantityRequiredTaskInstance> ProductionWorkOrderProcessQuantityRequiredTaskInstances { get; set; }
        public virtual DbSet<ProductionWorkOrderProcessRequiredTaskInstance> ProductionWorkOrderProcessRequiredTaskInstances { get; set; }
        public virtual DbSet<ProductionWorkStation> ProductionWorkStations { get; set; }
        public virtual DbSet<ProductionWorkStationCalendar> ProductionWorkStationCalendars { get; set; }
        public virtual DbSet<ProductionWorkStationRule> ProductionWorkStationRules { get; set; }
        public virtual DbSet<ProductionWorkStationRuleItem> ProductionWorkStationRuleItems { get; set; }
        public virtual DbSet<ProductionWorkStationRuleParameter> ProductionWorkStationRuleParameters { get; set; }
        public virtual DbSet<ProductionWorkStationRuleVm> ProductionWorkStationRuleVms { get; set; }
        public virtual DbSet<ProductionWorkstationWip> ProductionWorkstationWips { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public virtual DbSet<PurchaseInvoiceCredit> PurchaseInvoiceCredits { get; set; }
        public virtual DbSet<PurchaseInvoiceCreditItem> PurchaseInvoiceCreditItems { get; set; }
        public virtual DbSet<PurchaseInvoiceItem> PurchaseInvoiceItems { get; set; }
        public virtual DbSet<PurchaseInvoiceItemContract> PurchaseInvoiceItemContracts { get; set; }
        public virtual DbSet<PurchaseInvoiceItemInstance> PurchaseInvoiceItemInstances { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderAuthorisation> PurchaseOrderAuthorisations { get; set; }
        public virtual DbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; }
        public virtual DbSet<PurchaseOrderItemExchange> PurchaseOrderItemExchanges { get; set; }
        public virtual DbSet<PurchaseOrderItemInstance> PurchaseOrderItemInstances { get; set; }
        public virtual DbSet<Qsanalysis> Qsanalyses { get; set; }
        public virtual DbSet<QsanalysisCategory> QsanalysisCategories { get; set; }
        public virtual DbSet<QsanalysisCategoryRule> QsanalysisCategoryRules { get; set; }
        public virtual DbSet<QsanalysisCategoryRuleItem> QsanalysisCategoryRuleItems { get; set; }
        public virtual DbSet<QsanalysisCategoryUnit> QsanalysisCategoryUnits { get; set; }
        public virtual DbSet<QsanalysisListing> QsanalysisListings { get; set; }
        public virtual DbSet<Qscategory> Qscategories { get; set; }
        public virtual DbSet<QscategoryRule> QscategoryRules { get; set; }
        public virtual DbSet<QscategoryRuleItem> QscategoryRuleItems { get; set; }
        public virtual DbSet<QscategorySet> QscategorySets { get; set; }
        public virtual DbSet<QscategorySetCategory> QscategorySetCategories { get; set; }
        public virtual DbSet<QscategoryUnit> QscategoryUnits { get; set; }
        public virtual DbSet<Qsunit> Qsunits { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportBatch> ReportBatches { get; set; }
        public virtual DbSet<ReportBatchGroup> ReportBatchGroups { get; set; }
        public virtual DbSet<ReportBatchLink> ReportBatchLinks { get; set; }
        public virtual DbSet<ReportBatchParameter> ReportBatchParameters { get; set; }
        public virtual DbSet<ReportGroup> ReportGroups { get; set; }
        public virtual DbSet<ReportParameter> ReportParameters { get; set; }
        public virtual DbSet<ReportView> ReportViews { get; set; }
        public virtual DbSet<ReportViewColumn> ReportViewColumns { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleObject> RoleObjects { get; set; }
        public virtual DbSet<RoleObjectAction> RoleObjectActions { get; set; }
        public virtual DbSet<RoleReport> RoleReports { get; set; }
        public virtual DbSet<RollReference> RollReferences { get; set; }
        public virtual DbSet<RollReferenceItem> RollReferenceItems { get; set; }
        public virtual DbSet<RollReferenceLine> RollReferenceLines { get; set; }
        public virtual DbSet<SalesInvoice> SalesInvoices { get; set; }
        public virtual DbSet<SalesInvoiceItem> SalesInvoiceItems { get; set; }
        public virtual DbSet<SalesInvoiceItemInstance> SalesInvoiceItemInstances { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrderItem> SalesOrderItems { get; set; }
        public virtual DbSet<SalesOrderItemInstance> SalesOrderItemInstances { get; set; }
        public virtual DbSet<SectionCat> SectionCats { get; set; }
        public virtual DbSet<SectionRollType> SectionRollTypes { get; set; }
        public virtual DbSet<SectionType> SectionTypes { get; set; }
        public virtual DbSet<SectionTypeGrade> SectionTypeGrades { get; set; }
        public virtual DbSet<Shape> Shapes { get; set; }
        public virtual DbSet<Shape1> Shapes1 { get; set; }
        public virtual DbSet<ShapeDimension> ShapeDimensions { get; set; }
        public virtual DbSet<SplitMarkItem> SplitMarkItems { get; set; }
        public virtual DbSet<StruMisSession> StruMisSessions { get; set; }
        public virtual DbSet<StrumItem> StrumItems { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierType> SupplierTypes { get; set; }
        public virtual DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public virtual DbSet<SystemAction> SystemActions { get; set; }
        public virtual DbSet<SystemActivitylog> SystemActivitylogs { get; set; }
        public virtual DbSet<SystemDataPort> SystemDataPorts { get; set; }
        public virtual DbSet<SystemFieldPrecision> SystemFieldPrecisions { get; set; }
        public virtual DbSet<SystemInstallationLog> SystemInstallationLogs { get; set; }
        public virtual DbSet<SystemModule> SystemModules { get; set; }
        public virtual DbSet<SystemModuleGroup> SystemModuleGroups { get; set; }
        public virtual DbSet<SystemModuleGroupModule> SystemModuleGroupModules { get; set; }
        public virtual DbSet<SystemModuleGroupObject> SystemModuleGroupObjects { get; set; }
        public virtual DbSet<SystemModuleObject> SystemModuleObjects { get; set; }
        public virtual DbSet<SystemNotificationMessage> SystemNotificationMessages { get; set; }
        public virtual DbSet<SystemObject> SystemObjects { get; set; }
        public virtual DbSet<SystemObjectAction> SystemObjectActions { get; set; }
        public virtual DbSet<SystemObjectAttachment> SystemObjectAttachments { get; set; }
        public virtual DbSet<SystemObjectHiddenField> SystemObjectHiddenFields { get; set; }
        public virtual DbSet<SystemObjectNote> SystemObjectNotes { get; set; }
        public virtual DbSet<SystemObjectReport> SystemObjectReports { get; set; }
        public virtual DbSet<SystemObjectUserField> SystemObjectUserFields { get; set; }
        public virtual DbSet<SystemObjectUserFieldDatum> SystemObjectUserFieldData { get; set; }
        public virtual DbSet<SystemObjectUserRestriction> SystemObjectUserRestrictions { get; set; }
        public virtual DbSet<SystemObjectUserRestrictionUser> SystemObjectUserRestrictionUsers { get; set; }
        public virtual DbSet<SystemOption> SystemOptions { get; set; }
        public virtual DbSet<SystemOptionGroup> SystemOptionGroups { get; set; }
        public virtual DbSet<SystemTask> SystemTasks { get; set; }
        public virtual DbSet<SystemTaskExecution> SystemTaskExecutions { get; set; }
        public virtual DbSet<SystemUpdate> SystemUpdates { get; set; }
        public virtual DbSet<Tally> Tallies { get; set; }
        public virtual DbSet<TaxCode> TaxCodes { get; set; }
        public virtual DbSet<TempFileUpload> TempFileUploads { get; set; }
        public virtual DbSet<TempNestingResultAllocation> TempNestingResultAllocations { get; set; }
        public virtual DbSet<TempNestingResultItemListing> TempNestingResultItemListings { get; set; }
        public virtual DbSet<TempNestingResultLength> TempNestingResultLengths { get; set; }
        public virtual DbSet<TempProductionWorkOrder> TempProductionWorkOrders { get; set; }
        public virtual DbSet<TempProductionWorkOrderTemplate> TempProductionWorkOrderTemplates { get; set; }
        public virtual DbSet<TempProductionWorkOrderTemplateProcess> TempProductionWorkOrderTemplateProcesses { get; set; }
        public virtual DbSet<TransactionImport> TransactionImports { get; set; }
        public virtual DbSet<TransactionInterface> TransactionInterfaces { get; set; }
        public virtual DbSet<TransactionInterfaceLog> TransactionInterfaceLogs { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<Updated> Updateds { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAuthorisation> UserAuthorisations { get; set; }
        public virtual DbSet<UserAuthorisationLimit> UserAuthorisationLimits { get; set; }
        public virtual DbSet<UserLoginHistory> UserLoginHistories { get; set; }
        public virtual DbSet<UserMyReport> UserMyReports { get; set; }
        public virtual DbSet<UserRecentlyUsed> UserRecentlyUseds { get; set; }
        public virtual DbSet<UserReport> UserReports { get; set; }
        public virtual DbSet<UserReportColumn> UserReportColumns { get; set; }
        public virtual DbSet<UserReportParameter> UserReportParameters { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<VwAdditionSearch> VwAdditionSearches { get; set; }
        public virtual DbSet<VwAdditiontemplateSearch> VwAdditiontemplateSearches { get; set; }
        public virtual DbSet<VwApplicationforpaymentSearch> VwApplicationforpaymentSearches { get; set; }
        public virtual DbSet<VwBarcodeinterfaceSearch> VwBarcodeinterfaceSearches { get; set; }
        public virtual DbSet<VwCadinterfaceSearch> VwCadinterfaceSearches { get; set; }
        public virtual DbSet<VwCategorySetSearch> VwCategorySetSearches { get; set; }
        public virtual DbSet<VwContactSearch> VwContactSearches { get; set; }
        public virtual DbSet<VwContractBudgetItemInventoryTransactionLineByContract> VwContractBudgetItemInventoryTransactionLineByContracts { get; set; }
        public virtual DbSet<VwContractDetailedMarkAndParent> VwContractDetailedMarkAndParents { get; set; }
        public virtual DbSet<VwContractDetailedlistingGetMark> VwContractDetailedlistingGetMarks { get; set; }
        public virtual DbSet<VwContractDetailedlistingGetMarkitem> VwContractDetailedlistingGetMarkitems { get; set; }
        public virtual DbSet<VwContractDetailedlistingMarksOnHold> VwContractDetailedlistingMarksOnHolds { get; set; }
        public virtual DbSet<VwContractDetailedlistingSearch> VwContractDetailedlistingSearches { get; set; }
        public virtual DbSet<VwContractMarkSequenceOverview> VwContractMarkSequenceOverviews { get; set; }
        public virtual DbSet<VwContractPrelimlistingSearch> VwContractPrelimlistingSearches { get; set; }
        public virtual DbSet<VwContractPriority> VwContractPriorities { get; set; }
        public virtual DbSet<VwContractSearch> VwContractSearches { get; set; }
        public virtual DbSet<VwContractbudgetSearch> VwContractbudgetSearches { get; set; }
        public virtual DbSet<VwCostcentreSearch> VwCostcentreSearches { get; set; }
        public virtual DbSet<VwCostcodeSearch> VwCostcodeSearches { get; set; }
        public virtual DbSet<VwCurrencySearch> VwCurrencySearches { get; set; }
        public virtual DbSet<VwCurrencyconversionList> VwCurrencyconversionLists { get; set; }
        public virtual DbSet<VwCurrencyconversionSearch> VwCurrencyconversionSearches { get; set; }
        public virtual DbSet<VwCurrentItem> VwCurrentItems { get; set; }
        public virtual DbSet<VwCustomerListingSearch> VwCustomerListingSearches { get; set; }
        public virtual DbSet<VwCustomerSearch> VwCustomerSearches { get; set; }
        public virtual DbSet<VwDocumentDistributionListSearch> VwDocumentDistributionListSearches { get; set; }
        public virtual DbSet<VwDocumentInterfaceSearch> VwDocumentInterfaceSearches { get; set; }
        public virtual DbSet<VwDocumentLatestRevisonsUsingSequence> VwDocumentLatestRevisonsUsingSequences { get; set; }
        public virtual DbSet<VwDocumentPackageSearch> VwDocumentPackageSearches { get; set; }
        public virtual DbSet<VwDocumentPendingList> VwDocumentPendingLists { get; set; }
        public virtual DbSet<VwDocumentPendingListDisabled> VwDocumentPendingListDisableds { get; set; }
        public virtual DbSet<VwDocumentRevisionCodeSearch> VwDocumentRevisionCodeSearches { get; set; }
        public virtual DbSet<VwDocumentRevisionSearch> VwDocumentRevisionSearches { get; set; }
        public virtual DbSet<VwDocumentRfiSearch> VwDocumentRfiSearches { get; set; }
        public virtual DbSet<VwDocumentSearch> VwDocumentSearches { get; set; }
        public virtual DbSet<VwDocumentStatusSearch> VwDocumentStatusSearches { get; set; }
        public virtual DbSet<VwDocumentTestcertGroupMill> VwDocumentTestcertGroupMills { get; set; }
        public virtual DbSet<VwDocumentTestcertGroupNomill> VwDocumentTestcertGroupNomills { get; set; }
        public virtual DbSet<VwDocumentTestcertInstance> VwDocumentTestcertInstances { get; set; }
        public virtual DbSet<VwDocumentTransmittalReasonSearch> VwDocumentTransmittalReasonSearches { get; set; }
        public virtual DbSet<VwDocumentTransmittalSearch> VwDocumentTransmittalSearches { get; set; }
        public virtual DbSet<VwDocumentTypeSearch> VwDocumentTypeSearches { get; set; }
        public virtual DbSet<VwDocumentmanagementPendingDocument> VwDocumentmanagementPendingDocuments { get; set; }
        public virtual DbSet<VwEmployeeSearch> VwEmployeeSearches { get; set; }
        public virtual DbSet<VwEnquirySearch> VwEnquirySearches { get; set; }
        public virtual DbSet<VwEstimateExtraGetbyid> VwEstimateExtraGetbyids { get; set; }
        public virtual DbSet<VwEstimateFittingGetbyid> VwEstimateFittingGetbyids { get; set; }
        public virtual DbSet<VwEstimateItemListingGetbyid> VwEstimateItemListingGetbyids { get; set; }
        public virtual DbSet<VwEstimateItemListingLiteGetbyid> VwEstimateItemListingLiteGetbyids { get; set; }
        public virtual DbSet<VwEstimateSearch> VwEstimateSearches { get; set; }
        public virtual DbSet<VwEstimateSearchLite> VwEstimateSearchLites { get; set; }
        public virtual DbSet<VwEstimateSubsectionGetbyid> VwEstimateSubsectionGetbyids { get; set; }
        public virtual DbSet<VwEstimateassemblySearch> VwEstimateassemblySearches { get; set; }
        public virtual DbSet<VwEstimateassemblyitemExtraGetbyid> VwEstimateassemblyitemExtraGetbyids { get; set; }
        public virtual DbSet<VwEstimateassemblyitemFittingGetbyid> VwEstimateassemblyitemFittingGetbyids { get; set; }
        public virtual DbSet<VwEstimatesubsectionsetSearch> VwEstimatesubsectionsetSearches { get; set; }
        public virtual DbSet<VwExtraSearch> VwExtraSearches { get; set; }
        public virtual DbSet<VwExtragroupSearch> VwExtragroupSearches { get; set; }
        public virtual DbSet<VwFacilitySearch> VwFacilitySearches { get; set; }
        public virtual DbSet<VwFittingSearch> VwFittingSearches { get; set; }
        public virtual DbSet<VwFittinggroupSearch> VwFittinggroupSearches { get; set; }
        public virtual DbSet<VwGetProcesses1MarkItemWorkOrder> VwGetProcesses1MarkItemWorkOrders { get; set; }
        public virtual DbSet<VwGradeSearch> VwGradeSearches { get; set; }
        public virtual DbSet<VwItem> VwItems { get; set; }
        public virtual DbSet<VwItemInventoryContractItem> VwItemInventoryContractItems { get; set; }
        public virtual DbSet<VwItemInventoryTransactionLine> VwItemInventoryTransactionLines { get; set; }
        public virtual DbSet<VwItemSearch> VwItemSearches { get; set; }
        public virtual DbSet<VwItemclassificationSearch> VwItemclassificationSearches { get; set; }
        public virtual DbSet<VwItemfinishSearch> VwItemfinishSearches { get; set; }
        public virtual DbSet<VwIteminventoryreceivefromworkorderSearch> VwIteminventoryreceivefromworkorderSearches { get; set; }
        public virtual DbSet<VwIteminventorytransactionsSearch> VwIteminventorytransactionsSearches { get; set; }
        public virtual DbSet<VwItemlocationSearch> VwItemlocationSearches { get; set; }
        public virtual DbSet<VwItempriceunitSearch> VwItempriceunitSearches { get; set; }
        public virtual DbSet<VwItemreservationDetail> VwItemreservationDetails { get; set; }
        public virtual DbSet<VwItemreservationStatus> VwItemreservationStatuses { get; set; }
        public virtual DbSet<VwItemreservationStatusIi> VwItemreservationStatusIis { get; set; }
        public virtual DbSet<VwItemreservationStatusIitl> VwItemreservationStatusIitls { get; set; }
        public virtual DbSet<VwItemreservationStatusIsi> VwItemreservationStatusIsis { get; set; }
        public virtual DbSet<VwItemreservationStatusPoi> VwItemreservationStatusPois { get; set; }
        public virtual DbSet<VwItemreservationcontract> VwItemreservationcontracts { get; set; }
        public virtual DbSet<VwItemusageSearch> VwItemusageSearches { get; set; }
        public virtual DbSet<VwItemusageSearchGrouped> VwItemusageSearchGroupeds { get; set; }
        public virtual DbSet<VwLanguageSearch> VwLanguageSearches { get; set; }
        public virtual DbSet<VwLanguageString> VwLanguageStrings { get; set; }
        public virtual DbSet<VwLookup> VwLookups { get; set; }
        public virtual DbSet<VwNestingresultContractlisting> VwNestingresultContractlistings { get; set; }
        public virtual DbSet<VwNestingresultContractlistingArchive> VwNestingresultContractlistingArchives { get; set; }
        public virtual DbSet<VwNestingresultallocationContract> VwNestingresultallocationContracts { get; set; }
        public virtual DbSet<VwProcessSearch> VwProcessSearches { get; set; }
        public virtual DbSet<VwProductionAssemblySearch> VwProductionAssemblySearches { get; set; }
        public virtual DbSet<VwProductionLottingGetLottedShopmark> VwProductionLottingGetLottedShopmarks { get; set; }
        public virtual DbSet<VwProductionLottingGetLottedSitemark> VwProductionLottingGetLottedSitemarks { get; set; }
        public virtual DbSet<VwProductionLottingGetLottedStandalonemark> VwProductionLottingGetLottedStandalonemarks { get; set; }
        public virtual DbSet<VwProductionLottingGetUnlottedShopmark> VwProductionLottingGetUnlottedShopmarks { get; set; }
        public virtual DbSet<VwProductionLottingGetUnlottedSitemark> VwProductionLottingGetUnlottedSitemarks { get; set; }
        public virtual DbSet<VwProductionLottingGetUnlottedStandalonemark> VwProductionLottingGetUnlottedStandalonemarks { get; set; }
        public virtual DbSet<VwProductionLottingMaterialAvailable> VwProductionLottingMaterialAvailables { get; set; }
        public virtual DbSet<VwProductionProposedMovementSearch> VwProductionProposedMovementSearches { get; set; }
        public virtual DbSet<VwProductionWorkOrderSearch> VwProductionWorkOrderSearches { get; set; }
        public virtual DbSet<VwProductionWorkorderprocess> VwProductionWorkorderprocesses { get; set; }
        public virtual DbSet<VwProductionprocessSearch> VwProductionprocessSearches { get; set; }
        public virtual DbSet<VwProductionrequiredtaskSearch> VwProductionrequiredtaskSearches { get; set; }
        public virtual DbSet<VwProductionrequiredtaskextractorSearch> VwProductionrequiredtaskextractorSearches { get; set; }
        public virtual DbSet<VwProductionruleSearch> VwProductionruleSearches { get; set; }
        public virtual DbSet<VwProductionruleprocessorSearch> VwProductionruleprocessorSearches { get; set; }
        public virtual DbSet<VwProductionstageSearch> VwProductionstageSearches { get; set; }
        public virtual DbSet<VwProductiontemplateSearch> VwProductiontemplateSearches { get; set; }
        public virtual DbSet<VwProductionworkstationSearch> VwProductionworkstationSearches { get; set; }
        public virtual DbSet<VwProjectSearch> VwProjectSearches { get; set; }
        public virtual DbSet<VwPurchaseOrderReceiptSearch> VwPurchaseOrderReceiptSearches { get; set; }
        public virtual DbSet<VwPurchaseOrderReturnSearch> VwPurchaseOrderReturnSearches { get; set; }
        public virtual DbSet<VwPurchaseinvoiceSearch> VwPurchaseinvoiceSearches { get; set; }
        public virtual DbSet<VwPurchaseorderSearch> VwPurchaseorderSearches { get; set; }
        public virtual DbSet<VwQsAnalysisSearch> VwQsAnalysisSearches { get; set; }
        public virtual DbSet<VwQsCategorySearch> VwQsCategorySearches { get; set; }
        public virtual DbSet<VwRegionSearch> VwRegionSearches { get; set; }
        public virtual DbSet<VwRoleSearch> VwRoleSearches { get; set; }
        public virtual DbSet<VwRptIteminventoryInout> VwRptIteminventoryInouts { get; set; }
        public virtual DbSet<VwSalesinvoiceSearch> VwSalesinvoiceSearches { get; set; }
        public virtual DbSet<VwSalesorderSearch> VwSalesorderSearches { get; set; }
        public virtual DbSet<VwSalesorderdeliverySearch> VwSalesorderdeliverySearches { get; set; }
        public virtual DbSet<VwSectiontypeSearch> VwSectiontypeSearches { get; set; }
        public virtual DbSet<VwSupplierSearch> VwSupplierSearches { get; set; }
        public virtual DbSet<VwSystemdataportSearch> VwSystemdataportSearches { get; set; }
        public virtual DbSet<VwSystemtaskSearch> VwSystemtaskSearches { get; set; }
        public virtual DbSet<VwTaxcodeSearch> VwTaxcodeSearches { get; set; }
        public virtual DbSet<VwTransactioninterfaceEmployeetimesheet> VwTransactioninterfaceEmployeetimesheets { get; set; }
        public virtual DbSet<VwTransactioninterfaceInventorytransaction> VwTransactioninterfaceInventorytransactions { get; set; }
        public virtual DbSet<VwTransactioninterfacePurchaseinvoice> VwTransactioninterfacePurchaseinvoices { get; set; }
        public virtual DbSet<VwTransactioninterfacePurchaseorder> VwTransactioninterfacePurchaseorders { get; set; }
        public virtual DbSet<VwTransactioninterfaceSalesinvoice> VwTransactioninterfaceSalesinvoices { get; set; }
        public virtual DbSet<VwTransactioninterfaceSearch> VwTransactioninterfaceSearches { get; set; }
        public virtual DbSet<VwTransactioninterfacelogSearch> VwTransactioninterfacelogSearches { get; set; }
        public virtual DbSet<VwUserSearch> VwUserSearches { get; set; }
        public virtual DbSet<VwUserreportAllocatestock> VwUserreportAllocatestocks { get; set; }
        public virtual DbSet<VwUserreportAllocatestockitem> VwUserreportAllocatestockitems { get; set; }
        public virtual DbSet<VwUserreportChangeclassification> VwUserreportChangeclassifications { get; set; }
        public virtual DbSet<VwUserreportChangeclassificationitem> VwUserreportChangeclassificationitems { get; set; }
        public virtual DbSet<VwUserreportContact> VwUserreportContacts { get; set; }
        public virtual DbSet<VwUserreportContract> VwUserreportContracts { get; set; }
        public virtual DbSet<VwUserreportContractbatch> VwUserreportContractbatches { get; set; }
        public virtual DbSet<VwUserreportContractmark> VwUserreportContractmarks { get; set; }
        public virtual DbSet<VwUserreportContractmarkitem> VwUserreportContractmarkitems { get; set; }
        public virtual DbSet<VwUserreportContractmilestone> VwUserreportContractmilestones { get; set; }
        public virtual DbSet<VwUserreportContractprelimmark> VwUserreportContractprelimmarks { get; set; }
        public virtual DbSet<VwUserreportContractrevision> VwUserreportContractrevisions { get; set; }
        public virtual DbSet<VwUserreportCustomer> VwUserreportCustomers { get; set; }
        public virtual DbSet<VwUserreportCustomerContact> VwUserreportCustomerContacts { get; set; }
        public virtual DbSet<VwUserreportCustomeraddress> VwUserreportCustomeraddresses { get; set; }
        public virtual DbSet<VwUserreportDocument> VwUserreportDocuments { get; set; }
        public virtual DbSet<VwUserreportDocumentRfi> VwUserreportDocumentRfis { get; set; }
        public virtual DbSet<VwUserreportDocumentRfiDocument> VwUserreportDocumentRfiDocuments { get; set; }
        public virtual DbSet<VwUserreportDocumentRfiRecipient> VwUserreportDocumentRfiRecipients { get; set; }
        public virtual DbSet<VwUserreportDocumentRfiResponse> VwUserreportDocumentRfiResponses { get; set; }
        public virtual DbSet<VwUserreportDocumentTransmittalResponse> VwUserreportDocumentTransmittalResponses { get; set; }
        public virtual DbSet<VwUserreportDocumentdistributionlist> VwUserreportDocumentdistributionlists { get; set; }
        public virtual DbSet<VwUserreportDocumentpackage> VwUserreportDocumentpackages { get; set; }
        public virtual DbSet<VwUserreportDocumentpackagedocument> VwUserreportDocumentpackagedocuments { get; set; }
        public virtual DbSet<VwUserreportDocumentpackagerecipient> VwUserreportDocumentpackagerecipients { get; set; }
        public virtual DbSet<VwUserreportDocumentrevision> VwUserreportDocumentrevisions { get; set; }
        public virtual DbSet<VwUserreportDocumenttransamittaldocument> VwUserreportDocumenttransamittaldocuments { get; set; }
        public virtual DbSet<VwUserreportDocumenttransmittal> VwUserreportDocumenttransmittals { get; set; }
        public virtual DbSet<VwUserreportDocumenttransmittalrecipient> VwUserreportDocumenttransmittalrecipients { get; set; }
        public virtual DbSet<VwUserreportEdiFabricator> VwUserreportEdiFabricators { get; set; }
        public virtual DbSet<VwUserreportEdiSupplier> VwUserreportEdiSuppliers { get; set; }
        public virtual DbSet<VwUserreportEmployee> VwUserreportEmployees { get; set; }
        public virtual DbSet<VwUserreportEmployeeproductionworkorderhistory> VwUserreportEmployeeproductionworkorderhistories { get; set; }
        public virtual DbSet<VwUserreportEmployeetimesheet> VwUserreportEmployeetimesheets { get; set; }
        public virtual DbSet<VwUserreportEnquiry> VwUserreportEnquiries { get; set; }
        public virtual DbSet<VwUserreportEstimate> VwUserreportEstimates { get; set; }
        public virtual DbSet<VwUserreportEstimateextra> VwUserreportEstimateextras { get; set; }
        public virtual DbSet<VwUserreportEstimateitemfittingprocess> VwUserreportEstimateitemfittingprocesses { get; set; }
        public virtual DbSet<VwUserreportEstimateitemlisting> VwUserreportEstimateitemlistings { get; set; }
        public virtual DbSet<VwUserreportEstimateitemlistingextra> VwUserreportEstimateitemlistingextras { get; set; }
        public virtual DbSet<VwUserreportEstimateitemusageprocess> VwUserreportEstimateitemusageprocesses { get; set; }
        public virtual DbSet<VwUserreportEstimatesubsection> VwUserreportEstimatesubsections { get; set; }
        public virtual DbSet<VwUserreportEstimatesubsectionextra> VwUserreportEstimatesubsectionextras { get; set; }
        public virtual DbSet<VwUserreportEstimatesubsectionset> VwUserreportEstimatesubsectionsets { get; set; }
        public virtual DbSet<VwUserreportExtra> VwUserreportExtras { get; set; }
        public virtual DbSet<VwUserreportExtragroup> VwUserreportExtragroups { get; set; }
        public virtual DbSet<VwUserreportFitting> VwUserreportFittings { get; set; }
        public virtual DbSet<VwUserreportFittinggroup> VwUserreportFittinggroups { get; set; }
        public virtual DbSet<VwUserreportFittingprocess> VwUserreportFittingprocesses { get; set; }
        public virtual DbSet<VwUserreportInventoryadjustment> VwUserreportInventoryadjustments { get; set; }
        public virtual DbSet<VwUserreportInventoryadjustmentitem> VwUserreportInventoryadjustmentitems { get; set; }
        public virtual DbSet<VwUserreportIssuetosubcontractor> VwUserreportIssuetosubcontractors { get; set; }
        public virtual DbSet<VwUserreportIssuetosubcontractoritem> VwUserreportIssuetosubcontractoritems { get; set; }
        public virtual DbSet<VwUserreportIssuetoworkorder> VwUserreportIssuetoworkorders { get; set; }
        public virtual DbSet<VwUserreportIssuetoworkorderitem> VwUserreportIssuetoworkorderitems { get; set; }
        public virtual DbSet<VwUserreportItem> VwUserreportItems { get; set; }
        public virtual DbSet<VwUserreportItemcustomer> VwUserreportItemcustomers { get; set; }
        public virtual DbSet<VwUserreportIteminventory> VwUserreportIteminventories { get; set; }
        public virtual DbSet<VwUserreportIteminventorytransaction> VwUserreportIteminventorytransactions { get; set; }
        public virtual DbSet<VwUserreportIteminventorytransactionline> VwUserreportIteminventorytransactionlines { get; set; }
        public virtual DbSet<VwUserreportItemsupplier> VwUserreportItemsuppliers { get; set; }
        public virtual DbSet<VwUserreportItemusage> VwUserreportItemusages { get; set; }
        public virtual DbSet<VwUserreportItemusagefitting> VwUserreportItemusagefittings { get; set; }
        public virtual DbSet<VwUserreportItemusagefittingpercentage> VwUserreportItemusagefittingpercentages { get; set; }
        public virtual DbSet<VwUserreportItemusageprocess> VwUserreportItemusageprocesses { get; set; }
        public virtual DbSet<VwUserreportLocationtransfer> VwUserreportLocationtransfers { get; set; }
        public virtual DbSet<VwUserreportLocationtransferitem> VwUserreportLocationtransferitems { get; set; }
        public virtual DbSet<VwUserreportNestingallocation> VwUserreportNestingallocations { get; set; }
        public virtual DbSet<VwUserreportNestingallocationitem> VwUserreportNestingallocationitems { get; set; }
        public virtual DbSet<VwUserreportProductionassembly> VwUserreportProductionassemblies { get; set; }
        public virtual DbSet<VwUserreportProductionassemblyitem> VwUserreportProductionassemblyitems { get; set; }
        public virtual DbSet<VwUserreportProductioncutting> VwUserreportProductioncuttings { get; set; }
        public virtual DbSet<VwUserreportProductioncuttingitem> VwUserreportProductioncuttingitems { get; set; }
        public virtual DbSet<VwUserreportProductionprocess> VwUserreportProductionprocesses { get; set; }
        public virtual DbSet<VwUserreportProductionprocesscamcrossreference> VwUserreportProductionprocesscamcrossreferences { get; set; }
        public virtual DbSet<VwUserreportProductionprocessrole> VwUserreportProductionprocessroles { get; set; }
        public virtual DbSet<VwUserreportProductionproposedmovement> VwUserreportProductionproposedmovements { get; set; }
        public virtual DbSet<VwUserreportProductionproposedmovementitem> VwUserreportProductionproposedmovementitems { get; set; }
        public virtual DbSet<VwUserreportProductiontemplate> VwUserreportProductiontemplates { get; set; }
        public virtual DbSet<VwUserreportProductiontemplaterule> VwUserreportProductiontemplaterules { get; set; }
        public virtual DbSet<VwUserreportProductionworkorder> VwUserreportProductionworkorders { get; set; }
        public virtual DbSet<VwUserreportProductionworkorderhistory> VwUserreportProductionworkorderhistories { get; set; }
        public virtual DbSet<VwUserreportProductionworkorderprocess> VwUserreportProductionworkorderprocesses { get; set; }
        public virtual DbSet<VwUserreportProductionworkstation> VwUserreportProductionworkstations { get; set; }
        public virtual DbSet<VwUserreportProductionworkstationrule> VwUserreportProductionworkstationrules { get; set; }
        public virtual DbSet<VwUserreportPurchaseinvoice> VwUserreportPurchaseinvoices { get; set; }
        public virtual DbSet<VwUserreportPurchaseinvoiceitem> VwUserreportPurchaseinvoiceitems { get; set; }
        public virtual DbSet<VwUserreportPurchaseorder> VwUserreportPurchaseorders { get; set; }
        public virtual DbSet<VwUserreportPurchaseorderitem> VwUserreportPurchaseorderitems { get; set; }
        public virtual DbSet<VwUserreportPurchaseorderreceipt> VwUserreportPurchaseorderreceipts { get; set; }
        public virtual DbSet<VwUserreportPurchaseorderreceiptitem> VwUserreportPurchaseorderreceiptitems { get; set; }
        public virtual DbSet<VwUserreportPurchaseorderreturn> VwUserreportPurchaseorderreturns { get; set; }
        public virtual DbSet<VwUserreportPurchaseorderreturnitem> VwUserreportPurchaseorderreturnitems { get; set; }
        public virtual DbSet<VwUserreportQsanalysis> VwUserreportQsanalyses { get; set; }
        public virtual DbSet<VwUserreportQsanalysislisting> VwUserreportQsanalysislistings { get; set; }
        public virtual DbSet<VwUserreportQscategory> VwUserreportQscategories { get; set; }
        public virtual DbSet<VwUserreportQscategoryrule> VwUserreportQscategoryrules { get; set; }
        public virtual DbSet<VwUserreportQscategorysetcategory> VwUserreportQscategorysetcategories { get; set; }
        public virtual DbSet<VwUserreportQscategoryunit> VwUserreportQscategoryunits { get; set; }
        public virtual DbSet<VwUserreportReceivefromworkorder> VwUserreportReceivefromworkorders { get; set; }
        public virtual DbSet<VwUserreportReceivefromworkorderitem> VwUserreportReceivefromworkorderitems { get; set; }
        public virtual DbSet<VwUserreportRole> VwUserreportRoles { get; set; }
        public virtual DbSet<VwUserreportRollreference> VwUserreportRollreferences { get; set; }
        public virtual DbSet<VwUserreportSalesinvoice> VwUserreportSalesinvoices { get; set; }
        public virtual DbSet<VwUserreportSalesinvoiceitem> VwUserreportSalesinvoiceitems { get; set; }
        public virtual DbSet<VwUserreportSalesorder> VwUserreportSalesorders { get; set; }
        public virtual DbSet<VwUserreportSalesorderdelivery> VwUserreportSalesorderdeliveries { get; set; }
        public virtual DbSet<VwUserreportSalesorderdeliveryitem> VwUserreportSalesorderdeliveryitems { get; set; }
        public virtual DbSet<VwUserreportSalesorderitem> VwUserreportSalesorderitems { get; set; }
        public virtual DbSet<VwUserreportSearch> VwUserreportSearches { get; set; }
        public virtual DbSet<VwUserreportSitetransfer> VwUserreportSitetransfers { get; set; }
        public virtual DbSet<VwUserreportSitetransferitem> VwUserreportSitetransferitems { get; set; }
        public virtual DbSet<VwUserreportSupplier> VwUserreportSuppliers { get; set; }
        public virtual DbSet<VwUserreportSupplierContact> VwUserreportSupplierContacts { get; set; }
        public virtual DbSet<VwUserreportSupplieraddress> VwUserreportSupplieraddresses { get; set; }
        public virtual DbSet<VwUserreportSystemtaskexecution> VwUserreportSystemtaskexecutions { get; set; }
        public virtual DbSet<VwUserreportTransactioninterfacelog> VwUserreportTransactioninterfacelogs { get; set; }
        public virtual DbSet<VwUserreportUser> VwUserreportUsers { get; set; }
        public virtual DbSet<VwUserreportWorkshoptransfer> VwUserreportWorkshoptransfers { get; set; }
        public virtual DbSet<VwUserreportWorkshoptransferitem> VwUserreportWorkshoptransferitems { get; set; }
        public virtual DbSet<VwVmproductionworkstationCando> VwVmproductionworkstationCandos { get; set; }
        public virtual DbSet<WebSession> WebSessions { get; set; }
        public virtual DbSet<WorkstationProcess> WorkstationProcesses { get; set; }
        public virtual DbSet<AdvanceBudgetTotal> AdvanceBudgetTotals { get; set; }
        
        public virtual DbSet<ProgramMounting> ProgramMountings { get; set; }
        public virtual DbSet<AssemblyReleasedOnSite> AssemblyReleasedOnSites { get; set; }

            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=52.138.86.190,62150;Initial Catalog=METALITEC;Integrated Security=false;User Id=sa;Password=Strumis_6;MultipleActiveResultSets=True;", x => x.UseNetTopologySuite());
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // modelBuilder.HasDefaultSchema("dbo");
            base.OnModelCreating(modelBuilder);
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Activitylog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Activitylog");

                entity.HasIndex(e => e.Date, "IX_Activitylog_date")
                    .HasFillFactor(90);

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .HasColumnName("action");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Granted).HasColumnName("granted");

                entity.Property(e => e.Object)
                    .HasMaxLength(50)
                    .HasColumnName("object");

                entity.Property(e => e.ProcedureName)
                    .HasMaxLength(200)
                    .HasColumnName("Procedure_name");

                entity.Property(e => e.Username).HasMaxLength(100);
            });

            modelBuilder.Entity<Addition>(entity =>
            {
                entity.ToTable("Addition");

                entity.HasIndex(e => e.AdditionTemplateId, "IX_Addition_FK_Addition_AdditionTemplate");

                entity.HasIndex(e => e.AddressId, "IX_Addition_FK_Additions_Address");

                entity.HasIndex(e => e.CostCodeId, "IX_Addition_FK_Additions_CostCode");

                entity.HasIndex(e => e.CurrencyId, "IX_Addition_FK_Additions_Currency");

                entity.HasIndex(e => e.PaymentTermsId, "IX_Addition_FK_Additions_PaymentTerms");

                entity.HasIndex(e => e.SupplierId, "IX_Addition_FK_Additions_Supplier");

                entity.HasIndex(e => e.TaxCodeId, "IX_Addition_FK_Additions_TaxCode");

                entity.HasIndex(e => e.UnitId, "IX_Addition_FK_Additions_Unit");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_Addition_KF_Addition_ItemInventoryTrackingGuidID");

                entity.Property(e => e.AdditionId).HasColumnName("AdditionID");

                entity.Property(e => e.AdditionTemplateId)
                    .HasColumnName("AdditionTemplateID")
                    .HasComment("The template used to create the Addition");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");

                entity.Property(e => e.Instance).HasColumnName("instance");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ParentTypeId)
                    .HasColumnName("ParentTypeID")
                    .HasComment("~~(53=Purchase Order Receipt, 122=Purchase Order Item, 152=Facility Transfer)");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.HasOne(d => d.AdditionTemplate)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.AdditionTemplateId)
                    .HasConstraintName("FK_Addition_AdditionTemplate");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Additions_Address");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Additions_CostCode");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Additions_Currency");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .HasConstraintName("KF_Addition_ItemInventoryTrackingGuidID");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_Additions_PaymentTerms");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Additions_Supplier");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_Additions_TaxCode");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Additions)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Additions_Unit");
            });

            modelBuilder.Entity<AdditionTemplate>(entity =>
            {
                entity.ToTable("AdditionTemplate");

                entity.HasIndex(e => e.AddressId, "IX_AdditionTemplate_FK_AdditionTemplate_Address");

                entity.HasIndex(e => e.CostCodeId, "IX_AdditionTemplate_FK_AdditionTemplate_CostCode");

                entity.HasIndex(e => e.CurrencyId, "IX_AdditionTemplate_FK_AdditionTemplate_Currency");

                entity.HasIndex(e => e.FacilityId, "IX_AdditionTemplate_FK_AdditionTemplate_Facility");

                entity.HasIndex(e => e.PaymentTermsId, "IX_AdditionTemplate_FK_AdditionTemplate_PaymentTerms");

                entity.HasIndex(e => e.SupplierId, "IX_AdditionTemplate_FK_AdditionTemplate_Supplier");

                entity.HasIndex(e => e.TaxCodeId, "IX_AdditionTemplate_FK_AdditionTemplate_TaxCode");

                entity.HasIndex(e => e.UnitId, "IX_AdditionTemplate_FK_AdditionTemplate_Unit");

                entity.Property(e => e.AdditionTemplateId).HasColumnName("AdditionTemplateID");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Specify a name for the addition.");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("Specify a supplier for the addition.");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasComment("Specify a unit for the addition.");

                entity.Property(e => e.UnitPrice).HasComment("Specify a unit price for the addition.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_AdditionTemplate_Address");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.CostCodeId)
                    .HasConstraintName("FK_AdditionTemplate_CostCode");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_AdditionTemplate_Currency");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdditionTemplate_Facility");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_AdditionTemplate_PaymentTerms");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_AdditionTemplate_Supplier");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_AdditionTemplate_TaxCode");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.AdditionTemplates)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_AdditionTemplate_Unit");
            });

            modelBuilder.Entity<AdditionTransport>(entity =>
            {
                entity.ToTable("AdditionTransport");

                entity.HasIndex(e => e.FacilityId, "IX_AdditionTransport_FK_AdditionTransport_Facility");

                entity.Property(e => e.AdditionTransportId)
                    .HasColumnName("AdditionTransportID")
                    .HasComment("Unique transport addition ID number");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MillLocationId)
                    .HasColumnName("MillLocationID")
                    .HasDefaultValueSql("(1)")
                    .HasComment("Mill Location");

                entity.Property(e => e.ToWeight).HasComment("Weight to which the addition takes effect");

                entity.Property(e => e.Value).HasComment("The value of the addition");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.AdditionTransports)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdditionTransport_Facility");
            });

            modelBuilder.Entity<AdditionWeight>(entity =>
            {
                entity.ToTable("AdditionWeight");

                entity.HasIndex(e => e.FacilityId, "IX_AdditionWeight_FK_AdditionWeight_Facility");

                entity.HasIndex(e => e.SectionTypeId, "IX_AdditionWeight_FK_AdditionWeight_SectionType");

                entity.Property(e => e.AdditionWeightId)
                    .HasColumnName("AdditionWeightID")
                    .HasComment("Unique weight addition ID number");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SectionTypeId)
                    .HasColumnName("SectionTypeID")
                    .HasComment("The section type the addition applies to");

                entity.Property(e => e.ToWeight).HasComment("Weight to which the addition takes effect");

                entity.Property(e => e.Value).HasComment("The value of the addition");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.AdditionWeights)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdditionWeight_Facility");

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.AdditionWeights)
                    .HasForeignKey(d => d.SectionTypeId)
                    .HasConstraintName("FK_AdditionWeight_SectionType");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.Property(e => e.AddressId)
                    .HasColumnName("AddressID")
                    .HasComment("The unique Address ID number generated automatically.");

                entity.Property(e => e.AddressSourceTypeId)
                    .HasColumnName("AddressSourceTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~Address Type, 1=Contact, 2=Customer, 3=Supplier, 4=Location, 5=Enquiry, 6=Contract, 7=User, 8=Employee, 9=OffSite, 10=Facility,11=Delivery Note, 12=EnquiryProjectPeople");

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.Default)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Line1)
                    .HasMaxLength(255)
                    .HasComment("~Address Line 1");

                entity.Property(e => e.Line2)
                    .HasMaxLength(255)
                    .HasComment("Address Line 2");

                entity.Property(e => e.Line3)
                    .HasMaxLength(255)
                    .HasComment("Address Line 3");

                entity.Property(e => e.Line4)
                    .HasMaxLength(255)
                    .HasComment("Address Line 4");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasComment("Name of Address");

                entity.Property(e => e.Postcode)
                    .HasMaxLength(50)
                    .HasComment("Zip or Postcode");

                entity.Property(e => e.SourceKey).HasComment("Key to identify if the address is in the contact, customer, supplier and Proposed Movement tables.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.ToTable("Application");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ApplicationForPayment>(entity =>
            {
                entity.ToTable("ApplicationForPayment");

                entity.HasIndex(e => e.ContractId, "IX_ApplicationForPayment_FK_ApplicationForPayment_Contract");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.ApplicationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Application");

                entity.Property(e => e.ApplicationDueDate)
                    .HasColumnType("datetime")
                    .HasComment("Date Application due for Submission");

                entity.Property(e => e.ApplicationNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasComment("Currency");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ApplicationForPayments)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationForPayment_Contract");
            });

            modelBuilder.Entity<ApplicationForPaymentAgreedItem>(entity =>
            {
                entity.ToTable("ApplicationForPaymentAgreedItem");

                entity.HasIndex(e => e.ApplicationForPaymentItemId, "IX_ApplicationForPaymentAgreedItem_FK_ApplicationForPaymentAgreedItem_ApplicationForPaymentItem");

                entity.Property(e => e.ApplicationForPaymentAgreedItemId).HasColumnName("ApplicationForPaymentAgreedItemID");

                entity.Property(e => e.ApplicationForPaymentItemId).HasColumnName("ApplicationForPaymentItemID");

                entity.Property(e => e.AppliedForValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.MaterialsStoredValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionValue).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ApplicationForPaymentItem)
                    .WithMany(p => p.ApplicationForPaymentAgreedItems)
                    .HasForeignKey(d => d.ApplicationForPaymentItemId)
                    .HasConstraintName("FK_ApplicationForPaymentAgreedItem_ApplicationForPaymentItem");
            });

            modelBuilder.Entity<ApplicationForPaymentCorrespondence>(entity =>
            {
                entity.ToTable("ApplicationForPaymentCorrespondence");

                entity.HasIndex(e => e.ApplicationForPaymentId, "IX_ApplicationForPaymentCorrespondence_FK_ApplicationForPaymentCorrespondence_ApplicationForPayment");

                entity.HasIndex(e => e.AttachmentId, "IX_ApplicationForPaymentCorrespondence_FK_ApplicationForPaymentCorrespondence_Attachment");

                entity.HasIndex(e => e.DocumentId, "IX_ApplicationForPaymentCorrespondence_FK_ApplicationForPaymentCorrespondence_Document");

                entity.HasIndex(e => e.DocumentTransmittalId, "IX_ApplicationForPaymentCorrespondence_FK_ApplicationForPaymentCorrespondence_DocumentTransmittal");

                entity.Property(e => e.ApplicationForPaymentCorrespondenceId).HasColumnName("ApplicationForPaymentCorrespondenceID");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.AttachmentId).HasColumnName("AttachmentID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.HasOne(d => d.ApplicationForPayment)
                    .WithMany(p => p.ApplicationForPaymentCorrespondences)
                    .HasForeignKey(d => d.ApplicationForPaymentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ApplicationForPaymentCorrespondence_ApplicationForPayment");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.ApplicationForPaymentCorrespondences)
                    .HasForeignKey(d => d.AttachmentId)
                    .HasConstraintName("FK_ApplicationForPaymentCorrespondence_Attachment");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ApplicationForPaymentCorrespondences)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_ApplicationForPaymentCorrespondence_Document");

                entity.HasOne(d => d.DocumentTransmittal)
                    .WithMany(p => p.ApplicationForPaymentCorrespondences)
                    .HasForeignKey(d => d.DocumentTransmittalId)
                    .HasConstraintName("FK_ApplicationForPaymentCorrespondence_DocumentTransmittal");
            });

            modelBuilder.Entity<ApplicationForPaymentItem>(entity =>
            {
                entity.ToTable("ApplicationForPaymentItem");

                entity.HasIndex(e => e.ApplicationForPaymentId, "IX_ApplicationForPaymentItem_FK_ApplicationForPaymentItem_ApplicationForPayment");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ApplicationForPaymentItem_FK_ApplicationForPayment_ChangeOrder");

                entity.HasIndex(e => e.ContractInvoiceScheduleId, "IX_ApplicationForPaymentItem_FK_ApplicationForPayment_ContractInvoiceSchedule");

                entity.Property(e => e.ApplicationForPaymentItemId).HasColumnName("ApplicationForPaymentItemID");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.AppliedForValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.MaterialsStoredValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionValue).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ApplicationForPayment)
                    .WithMany(p => p.ApplicationForPaymentItems)
                    .HasForeignKey(d => d.ApplicationForPaymentId)
                    .HasConstraintName("FK_ApplicationForPaymentItem_ApplicationForPayment");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ApplicationForPaymentItems)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .HasConstraintName("FK_ApplicationForPaymentItem_ChangeOrder");

                entity.HasOne(d => d.ContractInvoiceSchedule)
                    .WithMany(p => p.ApplicationForPaymentItems)
                    .HasForeignKey(d => d.ContractInvoiceScheduleId)
                    .HasConstraintName("FK_ApplicationForPaymentItem_ContractInvoiceSchedule");
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasKey(e => e.Name);

                entity.ToTable("_Areas");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Area1).HasColumnName("Area");
            });

            modelBuilder.Entity<AuditLog>(entity =>
            {
                entity.HasKey(e => e.AuditId)
                    .HasName("PK__AuditLog__A17F23B82FABE227");

                entity.ToTable("AuditLog");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(100)
                    .HasColumnName("Action_Name");

                entity.Property(e => e.AuditFileOffset).HasColumnName("audit_file_offset");

                entity.Property(e => e.DatabaseName)
                    .HasMaxLength(255)
                    .HasColumnName("database_name");

                entity.Property(e => e.DatabasePrincipalName)
                    .HasMaxLength(128)
                    .HasColumnName("database_principal_name");

                entity.Property(e => e.EventTime).HasColumnName("event_time");

                entity.Property(e => e.FileName).HasColumnName("file_name");

                entity.Property(e => e.IsAuditInsert).HasComputedColumnSql("(case when [server_principal_name]='Strumis_admin' AND ([Action_Name]='UPDATE' OR [Action_Name]='INSERT') AND ([object_name]='SystemActivitylog' OR [object_name]='SystemTask' OR [object_name]='AuditLog') AND [statement]='-- Encrypted text' then (1) else (0) end)", false);

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(128)
                    .HasColumnName("object_name");

                entity.Property(e => e.ServerPrincipalName)
                    .HasMaxLength(128)
                    .HasColumnName("server_principal_name");

                entity.Property(e => e.Statement).HasColumnName("statement");
            });

            modelBuilder.Entity<BarcodeInterface>(entity =>
            {
                entity.ToTable("BarcodeInterface");

                entity.Property(e => e.BarcodeInterfaceId).HasColumnName("BarcodeInterfaceID");

                entity.Property(e => e.ArchiveFilePath)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'C:\\')")
                    .HasComment("The path that the imported file is to be archived to");

                entity.Property(e => e.BarcodeSeperator)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'-')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultFilePath)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'C:\\')")
                    .HasComment("The path of the file you wish to import");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of the Barcode Interface");

                entity.Property(e => e.FileExtention)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'*.*')")
                    .HasComment("The extension of the file you wish to import");

                entity.Property(e => e.InterfaceTypeId)
                    .HasColumnName("InterfaceTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~~1=Production Type, 2=Mark Type, 3=Inventory Type");

                entity.Property(e => e.MappingArea).HasMaxLength(100);

                entity.Property(e => e.MappingBarcode).HasMaxLength(100);

                entity.Property(e => e.MappingContract).HasMaxLength(100);

                entity.Property(e => e.MappingDateTime).HasMaxLength(100);

                entity.Property(e => e.MappingEmployee).HasMaxLength(100);

                entity.Property(e => e.MappingItemLocation).HasMaxLength(100);

                entity.Property(e => e.MappingLength).HasMaxLength(100);

                entity.Property(e => e.MappingProcess).HasMaxLength(100);

                entity.Property(e => e.MappingWidth).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the Barcode Interface");

                entity.Property(e => e.Script)
                    .IsRequired()
                    .HasDefaultValueSql("(N'(''Insert Code here'')')");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<BarcodeUpload>(entity =>
            {
                entity.Property(e => e.BarcodeUploadId).HasColumnName("BarcodeUploadID");

                entity.Property(e => e.BarcodeInterfaceId).HasColumnName("BarcodeInterfaceID");

                entity.Property(e => e.CommandType).HasComment("~P - Process, W - Work Order");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.CurrentProcess).HasMaxLength(100);

                entity.Property(e => e.CurrentProcessId).HasColumnName("CurrentProcessID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Lot).HasMaxLength(50);

                entity.Property(e => e.Mark).HasMaxLength(50);

                entity.Property(e => e.MarkItem).HasMaxLength(50);

                entity.Property(e => e.Move)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(255);

                entity.Property(e => e.Phase).HasMaxLength(50);

                entity.Property(e => e.ProductionProcess).HasMaxLength(100);

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionGuid)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SourceBarCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SourceContract)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SourceDateTime)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SourceEmployee)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Stage).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("~0 - transferred but not applied, 1 success, fail");

                entity.Property(e => e.StopTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Cadinterface>(entity =>
            {
                entity.ToTable("CADInterface");

                entity.Property(e => e.CadinterfaceId)
                    .HasColumnName("CADInterfaceID")
                    .HasComment("Unique CAD Interface ID Number");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is this CAD Interface Active?");

                entity.Property(e => e.ApplyUsage).HasComment("Apply Labour Matrix");

                entity.Property(e => e.ArchiveFilePath)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'C:\\')")
                    .HasComment("The path that the imported file is to be archived to");

                entity.Property(e => e.CadInterfaceTypeId)
                    .HasColumnName("CadInterfaceTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Type of CAD Interface");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CustomFields).HasColumnType("xml");

                entity.Property(e => e.DefaultFilePath)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'C:\\')")
                    .HasComment("The path of the file you wish to import");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of the CAD Interface");

                entity.Property(e => e.FileExtention)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'*.*')")
                    .HasComment("The extension of the file you wish to import");

                entity.Property(e => e.FittingsMode)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Fittings mode setting");

                entity.Property(e => e.FlatCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'FLAT')")
                    .HasComment("Specify the flat codes to search. Separate with commas to specify multiple codes (i.e. FLT,FLAT)");

                entity.Property(e => e.FlatConversionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'PLT')");

                entity.Property(e => e.MappingAmark)
                    .HasMaxLength(100)
                    .HasColumnName("MappingAMark");

                entity.Property(e => e.MappingArea).HasMaxLength(100);

                entity.Property(e => e.MappingAssemblyId)
                    .HasMaxLength(100)
                    .HasColumnName("MappingAssemblyID");

                entity.Property(e => e.MappingAssemblyMarkGuid)
                    .HasMaxLength(100)
                    .HasColumnName("MappingAssemblyMarkGUID");

                entity.Property(e => e.MappingBottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.MappingBottomFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.MappingBottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.MappingBottomFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.MappingCambering).HasMaxLength(100);

                entity.Property(e => e.MappingContract).HasMaxLength(100);

                entity.Property(e => e.MappingCutType).HasMaxLength(100);

                entity.Property(e => e.MappingDepth).HasMaxLength(100);

                entity.Property(e => e.MappingDetails).HasMaxLength(100);

                entity.Property(e => e.MappingDueDate).HasMaxLength(100);

                entity.Property(e => e.MappingEndBottomFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.MappingEndTopFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.MappingEndWebAngle).HasMaxLength(100);

                entity.Property(e => e.MappingEstimateSubSection)
                    .HasMaxLength(100)
                    .HasComment("The Subsection column within the file to be imported");

                entity.Property(e => e.MappingExecutionClass).HasMaxLength(100);

                entity.Property(e => e.MappingGirderBfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("MappingGirderBFThickness");

                entity.Property(e => e.MappingGirderBfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("MappingGirderBFWidth");

                entity.Property(e => e.MappingGirderDepth).HasMaxLength(100);

                entity.Property(e => e.MappingGirderShape).HasMaxLength(100);

                entity.Property(e => e.MappingGirderTfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("MappingGirderTFThickness");

                entity.Property(e => e.MappingGirderTfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("MappingGirderTFWidth");

                entity.Property(e => e.MappingGirderType).HasMaxLength(100);

                entity.Property(e => e.MappingGirderWebOffset).HasMaxLength(100);

                entity.Property(e => e.MappingGirderWebThickness).HasMaxLength(100);

                entity.Property(e => e.MappingGrade).HasMaxLength(100);

                entity.Property(e => e.MappingGrossLength).HasMaxLength(100);

                entity.Property(e => e.MappingIsShaft).HasMaxLength(100);

                entity.Property(e => e.MappingItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.MappingItemMark).HasMaxLength(100);

                entity.Property(e => e.MappingLength)
                    .HasMaxLength(100)
                    .HasComment("The Bar Length column within the file to be imported");

                entity.Property(e => e.MappingLot).HasMaxLength(100);

                entity.Property(e => e.MappingMainMember).HasMaxLength(100);

                entity.Property(e => e.MappingMark).HasMaxLength(100);

                entity.Property(e => e.MappingMarkGuid)
                    .HasMaxLength(100)
                    .HasColumnName("MappingMarkGUID");

                entity.Property(e => e.MappingMarkItemGuid)
                    .HasMaxLength(100)
                    .HasColumnName("MappingMarkItemGUID");

                entity.Property(e => e.MappingModelType).HasMaxLength(100);

                entity.Property(e => e.MappingPaintFinish).HasMaxLength(100);

                entity.Property(e => e.MappingPhase).HasMaxLength(100);

                entity.Property(e => e.MappingPrelimMark).HasMaxLength(100);

                entity.Property(e => e.MappingQuantity).HasMaxLength(100);

                entity.Property(e => e.MappingRadius).HasMaxLength(100);

                entity.Property(e => e.MappingReference).HasMaxLength(100);

                entity.Property(e => e.MappingRevision).HasMaxLength(100);

                entity.Property(e => e.MappingSectionCode).HasMaxLength(100);

                entity.Property(e => e.MappingSectionSize).HasMaxLength(100);

                entity.Property(e => e.MappingSectionType).HasMaxLength(100);

                entity.Property(e => e.MappingSiteMember).HasMaxLength(100);

                entity.Property(e => e.MappingSiteMemberId)
                    .HasMaxLength(100)
                    .HasColumnName("MappingSiteMemberID");

                entity.Property(e => e.MappingStartBottomFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.MappingStartTopFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.MappingStartWebAngle).HasMaxLength(100);

                entity.Property(e => e.MappingTopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.MappingTopFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.MappingTopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.MappingTopFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.MappingUsage).HasMaxLength(100);

                entity.Property(e => e.MappingUser1).HasMaxLength(100);

                entity.Property(e => e.MappingWebGrade).HasMaxLength(100);

                entity.Property(e => e.MappingWebHeight).HasMaxLength(100);

                entity.Property(e => e.MappingWebThickness).HasMaxLength(100);

                entity.Property(e => e.MappingWeight).HasMaxLength(100);

                entity.Property(e => e.MappingWidth)
                    .HasMaxLength(100)
                    .HasComment("The Plate Width column within the file to be imported");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the CAD Interface");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.PlateCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'PLT')")
                    .HasComment("Specify the plate codes to search. Separate with commas to specify multiple codes (i.e. PLT,BL,PL,PLATE)");

                entity.Property(e => e.PlateConversionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'FLAT')");

                entity.Property(e => e.PlateLogic).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReviseQuantityChanges)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Script)
                    .IsRequired()
                    .HasDefaultValueSql("(N'(''Insert Code here'')')");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.UseCadarea).HasColumnName("UseCADArea");

                entity.Property(e => e.UseCadweight).HasColumnName("UseCADWeight");

                entity.Property(e => e.UseNamedColumns).HasDefaultValueSql("((0))");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ChangeLog>(entity =>
            {
                entity.ToTable("ChangeLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventType).HasMaxLength(100);

                entity.Property(e => e.ObjectName).HasMaxLength(200);

                entity.Property(e => e.ObjectSchema).HasMaxLength(200);

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<ChangeOrder>(entity =>
            {
                entity.ToTable("ChangeOrder");

                entity.HasIndex(e => e.ContractId, "IX_ChangeOrder_FK_Contract");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.ApprovedByClientOn).HasColumnType("datetime");

                entity.Property(e => e.AuthorisedByClientOn).HasColumnType("datetime");

                entity.Property(e => e.ChangeOrderCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ChangeOrderStatusId)
                    .HasColumnName("ChangeOrderStatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChangeOrderTypeId).HasColumnName("ChangeOrderTypeID");

                entity.Property(e => e.ClientNotifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DeclinedOn).HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.ParentChangeOrderId).HasColumnName("ParentChangeOrderID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.PricingCompleteOn).HasColumnType("datetime");

                entity.Property(e => e.PrimaryContactId).HasColumnName("PrimaryContactID");

                entity.Property(e => e.ReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.SubmittedToClientOn).HasColumnType("datetime");

                entity.Property(e => e.SubmittedToEstimatingOn).HasColumnType("datetime");

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ChangeOrders)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeOrder_Contract");
            });

            modelBuilder.Entity<ChangeOrderAttachmentLink>(entity =>
            {
                entity.ToTable("ChangeOrderAttachmentLink");

                entity.HasIndex(e => e.AttachmentId, "IX_ChangeOrderAttachmentLink_FK_ChangeOrderLabelLink_AttachmentID");

                entity.Property(e => e.ChangeOrderAttachmentLinkId).HasColumnName("ChangeOrderAttachmentLinkID");

                entity.Property(e => e.AttachmentId).HasColumnName("AttachmentID");

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.ChangeOrderAttachmentLinks)
                    .HasForeignKey(d => d.AttachmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderLabelLink_AttachmentID");
            });

            modelBuilder.Entity<ChangeOrderClientChangeOrder>(entity =>
            {
                entity.ToTable("ChangeOrderClientChangeOrder");

                entity.HasIndex(e => e.ContractId, "IX_ChangeOrderClientChangeOrder_FK_Contract_ContractID");

                entity.Property(e => e.ChangeOrderClientChangeOrderId).HasColumnName("ChangeOrderClientChangeOrderID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ChangeOrderClientChangeOrders)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Contract_ContractID");
            });

            modelBuilder.Entity<ChangeOrderClientDocumentLink>(entity =>
            {
                entity.ToTable("ChangeOrderClientDocumentLink");

                entity.HasIndex(e => e.ChangeOrderClientChangeOrderId, "IX_ChangeOrderClientDocumentLink_FK_ChangeOrderClientDocumentLink_ChangeOrderClientChangeOrderID");

                entity.HasIndex(e => e.DocumentId, "IX_ChangeOrderClientDocumentLink_FK_ChangeOrderClientDocumentLink_DocumentID");

                entity.Property(e => e.ChangeOrderClientChangeOrderId).HasColumnName("ChangeOrderClientChangeOrderID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.HasOne(d => d.ChangeOrderClientChangeOrder)
                    .WithMany(p => p.ChangeOrderClientDocumentLinks)
                    .HasForeignKey(d => d.ChangeOrderClientChangeOrderId)
                    .HasConstraintName("FK_ChangeOrderClientDocumentLink_ChangeOrderClientChangeOrderID");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ChangeOrderClientDocumentLinks)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_ChangeOrderClientDocumentLink_DocumentID");
            });

            modelBuilder.Entity<ChangeOrderImpact>(entity =>
            {
                entity.ToTable("ChangeOrderImpact");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ChangeOrderImpact_FK_ChangeOrderImpact_ChangeOrderID");

                entity.Property(e => e.ChangeOrderImpactId).HasColumnName("ChangeOrderImpactID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ChangeOrderImpacts)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .HasConstraintName("FK_ChangeOrderImpact_ChangeOrderID");
            });

            modelBuilder.Entity<ChangeOrderKeyRequirement>(entity =>
            {
                entity.HasKey(e => e.ChangeOrderKeyRequirementsId)
                    .HasName("PK_ChangeOrderKeyRequirements_ChangeOrderKeyRequirementsId");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ChangeOrderKeyRequirements_FK_ChangeOrderKeyRequirements_ChangeOrderID");

                entity.Property(e => e.AdminBidBondId).HasColumnName("AdminBidBondID");

                entity.Property(e => e.AdminCertifiedPayrollId).HasColumnName("AdminCertifiedPayrollID");

                entity.Property(e => e.AdminLdpenaltyId).HasColumnName("AdminLDPenaltyID");

                entity.Property(e => e.AdminOcipccipid).HasColumnName("AdminOCIPCCIPID");

                entity.Property(e => e.AdminOtherTaxesId).HasColumnName("AdminOtherTaxesID");

                entity.Property(e => e.AdminPaymentTermsId).HasColumnName("AdminPaymentTermsID");

                entity.Property(e => e.AdminPerfBondId).HasColumnName("AdminPerfBondID");

                entity.Property(e => e.AdminRetentionTermsId).HasColumnName("AdminRetentionTermsID");

                entity.Property(e => e.AdminSalesTaxId).HasColumnName("AdminSalesTaxID");

                entity.Property(e => e.AdminWarrantyPeriodId).HasColumnName("AdminWarrantyPeriodID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.FabErectCertId).HasColumnName("FabErectCertID");

                entity.Property(e => e.FabLocalParticipationId).HasColumnName("FabLocalParticipationID");

                entity.Property(e => e.FabMarketRetentionId).HasColumnName("FabMarketRetentionID");

                entity.Property(e => e.FabNdtinspId).HasColumnName("FabNDTInspID");

                entity.Property(e => e.FabPaintCertId).HasColumnName("FabPaintCertID");

                entity.Property(e => e.FabSbeparticipationId).HasColumnName("FabSBEParticipationID");

                entity.Property(e => e.FabShopCertId).HasColumnName("FabShopCertID");

                entity.Property(e => e.MaterialBuyAmericaId).HasColumnName("MaterialBuyAmericaID");

                entity.Property(e => e.MaterialBuyAmericanId).HasColumnName("MaterialBuyAmericanID");

                entity.Property(e => e.MaterialDomesticId).HasColumnName("MaterialDomesticID");

                entity.Property(e => e.MaterialLeedId).HasColumnName("MaterialLeedID");

                entity.Property(e => e.MaterialUniqueMaterialId).HasColumnName("MaterialUniqueMaterialID");

                entity.Property(e => e.NdaagreementPath).HasColumnName("NDAAgreementPath");

                entity.Property(e => e.ScopeBimid).HasColumnName("ScopeBIMID");

                entity.Property(e => e.ScopeDesignId).HasColumnName("ScopeDesignID");

                entity.Property(e => e.ScopeDetailId).HasColumnName("ScopeDetailID");

                entity.Property(e => e.ScopeErectionId).HasColumnName("ScopeErectionID");

                entity.Property(e => e.ScopeFabId).HasColumnName("ScopeFabID");

                entity.Property(e => e.ScopeFreightId).HasColumnName("ScopeFreightID");

                entity.Property(e => e.ScopeOther1Id).HasColumnName("ScopeOther1ID");

                entity.Property(e => e.ScopeOther2Id).HasColumnName("ScopeOther2ID");

                entity.Property(e => e.ScopeOther3Id).HasColumnName("ScopeOther3ID");

                entity.Property(e => e.ScopeOther4Id).HasColumnName("ScopeOther4ID");

                entity.Property(e => e.ScopePaintId).HasColumnName("ScopePaintID");

                entity.Property(e => e.ScopePrepId).HasColumnName("ScopePrepID");

                entity.Property(e => e.Sga).HasColumnName("SGA");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ChangeOrderKeyRequirements)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderKeyRequirements_ChangeOrderID");
            });

            modelBuilder.Entity<ChangeOrderLink>(entity =>
            {
                entity.ToTable("ChangeOrderLink");

                entity.HasIndex(e => e.ChangeOrderClientChangeOrderId, "IX_ChangeOrderLink_FK_ChangeOrderClientChangeOrder_ChangeOrderClientChangeOrderID");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ChangeOrderLink_FK_ChangeOrderLink_ChangeOrderID");

                entity.Property(e => e.ChangeOrderLinkId).HasColumnName("ChangeOrderLinkID");

                entity.Property(e => e.ChangeOrderClientChangeOrderId).HasColumnName("ChangeOrderClientChangeOrderID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.HasOne(d => d.ChangeOrderClientChangeOrder)
                    .WithMany(p => p.ChangeOrderLinks)
                    .HasForeignKey(d => d.ChangeOrderClientChangeOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderClientChangeOrder_ChangeOrderClientChangeOrderID");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ChangeOrderLinks)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderLink_ChangeOrderID");
            });

            modelBuilder.Entity<ChangeOrderNumber>(entity =>
            {
                entity.ToTable("ChangeOrderNumber");

                entity.Property(e => e.ChangeOrderNumberId).HasColumnName("ChangeOrderNumberID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");
            });

            modelBuilder.Entity<ChangeOrderRevision>(entity =>
            {
                entity.ToTable("ChangeOrderRevision");

                entity.HasIndex(e => e.RevisedBy, "IX_ChangeOrderRevision_FK_ChangeOrderRevision_RevisedBy");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ChangeOrderRevision_FK_ChangeOrder_ChangeOrderID");

                entity.Property(e => e.ChangeOrderRevisionId).HasColumnName("ChangeOrderRevisionID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.Details).IsRequired();

                entity.Property(e => e.DocumentRevisionCodeId).HasColumnName("DocumentRevisionCodeID");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ChangeOrderRevisions)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .HasConstraintName("FK_ChangeOrder_ChangeOrderID");

                entity.HasOne(d => d.RevisedByNavigation)
                    .WithMany(p => p.ChangeOrderRevisions)
                    .HasForeignKey(d => d.RevisedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChangeOrd__Revis__09E5A1DB");
            });

            modelBuilder.Entity<ChangeOrderStatus>(entity =>
            {
                entity.ToTable("ChangeOrderStatus");

                entity.Property(e => e.ChangeOrderStatusId).HasColumnName("ChangeOrderStatusID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IsApproved).HasComment("Change Orders with this Status are to be considered \"Approved\".");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ChangeOrderValuation>(entity =>
            {
                entity.ToTable("ChangeOrderValuation");

                entity.HasIndex(e => e.ChangeOrderId, "IX_ChangeOrderValuation_FK_ChangeOrderValuation_ChangeOrderID");

                entity.HasIndex(e => e.CostCodeId, "IX_ChangeOrderValuation_FK_ChangeOrderValuation_CostCodeID");

                entity.HasIndex(e => e.EstimateId, "IX_ChangeOrderValuation_FK_ChangeOrderValuation_EstimateID");

                entity.Property(e => e.ChangeOrderValuationId).HasColumnName("ChangeOrderValuationID");

                entity.Property(e => e.Area).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.Value).HasDefaultValueSql("((0))");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.ChangeOrderValuations)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderValuation_ChangeOrderID");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.ChangeOrderValuations)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChangeOrderValuation_CostCodeID");

                entity.HasOne(d => d.Estimate)
                    .WithMany(p => p.ChangeOrderValuations)
                    .HasForeignKey(d => d.EstimateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ChangeOrderValuation_EstimateID");
            });

            modelBuilder.Entity<CombinedMarkItem>(entity =>
            {
                entity.ToTable("CombinedMarkItem");

                entity.HasIndex(e => e.ContractMarkItemId, "IX_CombinedMarkItem_FK_CombinedMarkItem_ContractMarkItem");

                entity.HasOne(d => d.ContractMarkItem)
                    .WithMany(p => p.CombinedMarkItems)
                    .HasForeignKey(d => d.ContractMarkItemId)
                    .HasConstraintName("FK_CombinedMarkItem_ContractMarkItem");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("Contact");

                entity.HasIndex(e => new { e.PrimaryContact, e.AddressId }, "IX_Contact_PrimaryContact");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("Unique Contact ID automatically generated by system.");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasComment("Company Phone Number");

                entity.Property(e => e.Copies)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Default Number of copies that this Contact receives");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultAcknowledgement)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Will this Contact Require Acknowledgement on Transmittals?");

                entity.Property(e => e.DefaultResponseDays)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Default Number of Days it takes for this Contact to Respond");

                entity.Property(e => e.DocumentTransmittalReasonId)
                    .HasColumnName("DocumentTransmittalReasonID")
                    .HasComment("Default Reason why this Contact is given Documents");

                entity.Property(e => e.Email1)
                    .HasMaxLength(100)
                    .HasComment("Primary Email Contact Address");

                entity.Property(e => e.Email2)
                    .HasMaxLength(100)
                    .HasComment("Alternative Email Contact Address");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .HasComment("Fax Number");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasComment("Contact First Name");

                entity.Property(e => e.HomeNumber)
                    .HasMaxLength(50)
                    .HasComment("Home Phone Number");

                entity.Property(e => e.IsDocumentManagementContact)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is this a Document Management Contact?");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .HasComment("Contact Job Title");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasComment("Login Name for Contact");

                entity.Property(e => e.MaxEmailSize).HasDefaultValueSql("((0))");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .HasComment("Mobile Phone Number");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasComment("Full Name of Contact");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Notes");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .HasComment("Optional Field for storing default zip password for Locking Transmittal Zip Files");

                entity.Property(e => e.PriorityId)
                    .HasColumnName("PriorityID")
                    .HasDefaultValueSql("((3))")
                    .HasComment("~Default Email Priority (1=Highest, 2=High, 3=Normal, 4=Low, 5=Lowest)");

                entity.Property(e => e.Signature)
                    .IsUnicode(false)
                    .HasComment("The Default Signature used by this contact on Emails (Optional)");

                entity.Property(e => e.Surname)
                    .HasMaxLength(50)
                    .HasComment("Contact Surname");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .HasComment("Contact Title (eg. Mr/Mrs Sir/Dr)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.ToTable("Contract");

                entity.HasIndex(e => e.CustomerId, "IX_Contract_FK_Contract_Customer");

                entity.HasIndex(e => e.FacilityId, "IX_Contract_FK_Contract_Facility");

                entity.HasIndex(e => e.LocationId, "IX_Contract_FK_Contract_ItemLocation");

                entity.HasIndex(e => e.OffSiteItemLocationId, "IX_Contract_FK_Contract_OffsiteItemLocation");

                entity.HasIndex(e => e.ProjectId, "IX_Contract_FK_Contract_Project");

                entity.HasIndex(e => e.DefaultQsanalysisId, "IX_Contract_FK_Contract_QSAnalysis");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("The unique contract ID number generated automatically.");

                entity.Property(e => e.AddOffcutValue).HasComment("~Adds the value of offcut pieces to the contract and return the item as 0 value ");

                entity.Property(e => e.AddScrapValue).HasComment("~Adds the value of scrap to the contract and removes the scap at a value of 0");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.Area).HasComment("Total Area for this Contract");

                entity.Property(e => e.BimreviewAssemblyMarkAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("BIMReviewAssemblyMarkAttributeName");

                entity.Property(e => e.BimreviewGuidattributeName)
                    .HasMaxLength(50)
                    .HasColumnName("BIMReviewGUIDAttributeName");

                entity.Property(e => e.BimreviewMarkAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("BIMReviewMarkAttributeName");

                entity.Property(e => e.BimreviewMarkItemAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("BIMReviewMarkItemAttributeName");

                entity.Property(e => e.CadPath).HasMaxLength(500);

                entity.Property(e => e.CamPath).HasMaxLength(500);

                entity.Property(e => e.CamSplitterPath).HasComment("Specify the path for the NC files to be stored once they have been created from the CAM Splitter");

                entity.Property(e => e.CompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContractCategoryId).HasColumnName("ContractCategoryID");

                entity.Property(e => e.ContractInvoicedValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractOriginalInvoicedValue).HasDefaultValueSql("((1))");

                entity.Property(e => e.ContractOriginalValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("ContractTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Currency");

                entity.Property(e => e.CustomerContractTypeId).HasColumnName("CustomerContractTypeID");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasComment("Unique Customer ID for customer associated with this contract.");

                entity.Property(e => e.CustomerReference).HasMaxLength(50);

                entity.Property(e => e.DefaultGradeId)
                    .HasColumnName("DefaultGradeID")
                    .HasComment("Unique ID for Default grade");

                entity.Property(e => e.DefaultPaintFinish).HasMaxLength(50);

                entity.Property(e => e.DefaultQsanalysisId)
                    .HasColumnName("DefaultQSAnalysisID")
                    .HasComment("The default QS Analysis of the Contract");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasComment("Give the contract a description.");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.Property(e => e.EstimatorId).HasColumnName("EstimatorID");

                entity.Property(e => e.ExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Exchange Rate");

                entity.Property(e => e.ExecutionClassId)
                    .HasColumnName("ExecutionClassID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Guidsource)
                    .HasColumnName("GUIDSource")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specfiy if the detailed listing mark / mark item unique instance GUID is imported from the CAD source");

                entity.Property(e => e.IndividualMarkItemTracking)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IndividualMarkTracking)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.LotSource)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 = Manual, 2 = Cad");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the contract.");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the contract.");

                entity.Property(e => e.OffSiteItemLocationId).HasColumnName("OffSiteItemLocationID");

                entity.Property(e => e.OffcutAllocationToContract)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify whether the offcuts will by default be allocated to free inventory or to the contract");

                entity.Property(e => e.PhaseSource)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 = Manual, 2 = Cad");

                entity.Property(e => e.Priority)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The priority of the Contract");

                entity.Property(e => e.ProductionDispatchDate).HasColumnType("datetime");

                entity.Property(e => e.ProductionStartDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("ProjectID")
                    .HasComment("Unique Project ID this Contract is associated with.");

                entity.Property(e => e.RetentionDueDate).HasColumnType("datetime");

                entity.Property(e => e.SalesmanId).HasColumnName("SalesmanID");

                entity.Property(e => e.SiteDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StruCaddescriptionAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("StruCADDescriptionAttributeName");

                entity.Property(e => e.StruCadlotAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("StruCADLotAttributeName");

                entity.Property(e => e.StruCadpaintFinishAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("StruCADPaintFinishAttributeName");

                entity.Property(e => e.StruCadphaseAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("StruCADPhaseAttributeName");

                entity.Property(e => e.StruCadprelimAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("StruCADPrelimAttributeName");

                entity.Property(e => e.StruWalkerPath).HasMaxLength(500);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasComment("Total Weight for this Contract");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_Customer");

                entity.HasOne(d => d.DefaultQsanalysis)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.DefaultQsanalysisId)
                    .HasConstraintName("FK_Contract_QSAnalysis");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_Facility");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.ContractLocations)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_Contract_ItemLocation");

                entity.HasOne(d => d.OffSiteItemLocation)
                    .WithMany(p => p.ContractOffSiteItemLocations)
                    .HasForeignKey(d => d.OffSiteItemLocationId)
                    .HasConstraintName("FK_Contract_OffsiteItemLocation");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Contract_Project");
            });

            modelBuilder.Entity<ContractBatch>(entity =>
            {
                entity.ToTable("ContractBatch");

                entity.HasIndex(e => e.ContractId, "IX_ContractBatch_ContractID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractBatches)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ContractBatch_Contract");
            });

            modelBuilder.Entity<ContractBatchContract>(entity =>
            {
                entity.ToTable("ContractBatchContract");

                entity.HasIndex(e => e.ContractId, "IX_ContractBatchContract_FK_ContractBatchContract_Contract");

                entity.HasIndex(e => e.ContractBatchId, "IX_ContractBatchContract_FK_ContractBatchContract_ContractBatch");

                entity.Property(e => e.ContractBatchContractId)
                    .HasColumnName("ContractBatchContractID")
                    .HasComment("Unique Contract Batch Contract ID automatically generated by system.");

                entity.Property(e => e.ContractBatchId)
                    .HasColumnName("ContractBatchID")
                    .HasComment("Contract Batch ID this entry is linked to.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("Contract ID this entry refers to.");

                entity.HasOne(d => d.ContractBatch)
                    .WithMany(p => p.ContractBatchContracts)
                    .HasForeignKey(d => d.ContractBatchId)
                    .HasConstraintName("FK_ContractBatchContract_ContractBatch");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractBatchContracts)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractBatchContract_Contract");
            });

            modelBuilder.Entity<ContractBudget>(entity =>
            {
                entity.ToTable("ContractBudget");

                entity.HasIndex(e => e.ContractId, "IX_ContractBudget_FK_ContractBudget_Contract");

                entity.Property(e => e.ContractBudgetId).HasColumnName("ContractBudgetID");

                entity.Property(e => e.BudgetPeriodTypeId)
                    .HasColumnName("BudgetPeriodTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsMasterBudget)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is this budget the master budget?");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the Budget");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of the budget.");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractBudgets)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractBudget_Contract");
            });

            modelBuilder.Entity<ContractBudgetIitl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractBudgetIITL");

                entity.HasIndex(e => e.Ident, "IX_ContractBudgetIITL_Ident")
                    .IsClustered();

                entity.Property(e => e.Area).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Ident).ValueGeneratedOnAdd();

                entity.Property(e => e.InsertedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.KeyContractId).HasColumnName("KeyContractID");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ContractBudgetLine>(entity =>
            {
                entity.ToTable("ContractBudgetLine");

                entity.HasIndex(e => new { e.ContractBudgetId, e.CostCodeId }, "IX_ContractBudgetLine_ContractBudgetID");

                entity.Property(e => e.ContractBudgetLineId).HasColumnName("ContractBudgetLineID");

                entity.Property(e => e.ContractBudgetId).HasColumnName("ContractBudgetID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.DateBand).HasDefaultValueSql("((1))");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimatedArea).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimatedHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimatedValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimatedWeight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ContractBudget)
                    .WithMany(p => p.ContractBudgetLines)
                    .HasForeignKey(d => d.ContractBudgetId)
                    .HasConstraintName("FK_ContractBudgetLine_ContractBudget");
            });

            modelBuilder.Entity<ContractBudgetTransaction>(entity =>
            {
                entity.HasIndex(e => e.ContractBudgetId, "IX_ContractBudgetTransactions_FK_ContractBudgetTransactions_ContractBudget");

                entity.Property(e => e.ContractBudgetTransactionId).HasColumnName("ContractBudgetTransactionID");

                entity.Property(e => e.Area).HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetTransactionId).HasColumnName("BudgetTransactionID");

                entity.Property(e => e.BudgetTransactionTypeId)
                    .HasColumnName("BudgetTransactionTypeID")
                    .HasComment("~1 = PurchaseOrderLine, 2 = InventoryLine, 3 = ManualPosting, 4 = EmployeeTimesheetLine, 5 = SalesOrderLine");

                entity.Property(e => e.ContractBudgetId).HasColumnName("ContractBudgetID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.ExchangeRate).HasDefaultValueSql("((1))");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PostingReason).HasMaxLength(100);

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Value).HasDefaultValueSql("((0))");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ContractBudget)
                    .WithMany(p => p.ContractBudgetTransactions)
                    .HasForeignKey(d => d.ContractBudgetId)
                    .HasConstraintName("FK_ContractBudgetTransactions_ContractBudget");
            });

            modelBuilder.Entity<ContractBundle>(entity =>
            {
                entity.ToTable("ContractBundle");

                entity.HasIndex(e => e.ContractId, "IX_ContractBundle_FK_ContractBundle_Contract");

                entity.Property(e => e.ContractBundleId).HasColumnName("ContractBundleID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractBundles)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractBundle_Contract");
            });

            modelBuilder.Entity<ContractContact>(entity =>
            {
                entity.ToTable("ContractContact");

                entity.HasIndex(e => e.ContactId, "IX_ContractContact_FK_ContractContact_Contact");

                entity.HasIndex(e => e.ContractId, "IX_ContractContact_FK_ContractContact_Contract");

                entity.Property(e => e.ContractContactId).HasColumnName("ContractContactID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Internal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ContractContacts)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractContact_Contact");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractContacts)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractContact_Contract");
            });

            modelBuilder.Entity<ContractDetailedCadlisting>(entity =>
            {
                entity.ToTable("ContractDetailedCADListing");

                entity.HasIndex(e => new { e.ContractListingId, e.SourceAmark, e.SessionGuid }, "IX_ContractDetailedCADListing_CADListingID");

                entity.HasIndex(e => new { e.ContractListingId, e.ChksessionGuid, e.ParentMarkId }, "IX_ContractDetailedCADListing_CLChk");

                entity.HasIndex(e => new { e.ContractListingId, e.SourceSiteMember, e.SessionGuid }, "IX_ContractDetailedCADListing_ContractListingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractListingId, e.Ignore }, "IX_ContractDetailedCADListing_ContractListingID_Ignore");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid }, "IX_ContractDetailedCADListing_ContractListingID_Sessionguid")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractListingId, e.Ignore, e.ItemId, e.SessionGuid }, "IX_ContractDetailedCADListing_ContractListingValidate")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractListingId, e.Ignore, e.InvalidMark, e.RevisionStatus, e.ChksessionGuid, e.AllowRevision }, "IX_ContractDetailedCADListing_Cover");

                entity.HasIndex(e => new { e.ChksessionGuid, e.ContractListingId, e.RevisionStatus }, "IX_ContractDetailedCADListing_Cover2");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid, e.SourceExecutionClass }, "IX_ContractDetailedCADListing_ExecutionClass");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid }, "IX_ContractDetailedCADListing_Includes");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid }, "IX_ContractDetailedCADListing_Large");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid, e.SourceAssemblyMarkGuid }, "IX_ContractDetailedCADListing_MarkGUID");

                entity.HasIndex(e => e.SessionGuid, "IX_ContractDetailedCADListing_SessionGUID");

                entity.HasIndex(e => new { e.ChksessionGuid, e.ContractListingId }, "IX_ContractDetailedCADListing_SessionGuidCHKSUM");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid, e.SourceMarkGuid }, "IX_ContractDetailedCADListing_SourceMarkGUID");

                entity.HasIndex(e => new { e.ContractListingId, e.SessionGuid, e.SourceMarkItemGuid }, "IX_ContractDetailedCADListing_SourceMarkItemGUID");

                entity.HasIndex(e => e.AllowRevision, "IX_ContractdetailedCADListing_AllowRev");

                entity.Property(e => e.ContractDetailedCadlistingId).HasColumnName("ContractDetailedCADListingID");

                entity.Property(e => e.AllowRevision).HasDefaultValueSql("((1))");

                entity.Property(e => e.CadinterfaceId).HasColumnName("CADInterfaceID");

                entity.Property(e => e.ChksessionGuid)
                    .HasColumnName("CHKSessionGuid")
                    .HasComputedColumnSql("(checksum(hashbytes('SHA1',upper([SessionGuid]))))", true);

                entity.Property(e => e.ChksourceSectionSize)
                    .HasColumnName("CHKSourceSectionSize")
                    .HasComputedColumnSql("(checksum(hashbytes('SHA1',[SourceSectionSize])))", true);

                entity.Property(e => e.CmiSwap).HasColumnName("_CMI_Swap");

                entity.Property(e => e.CmiiSwap).HasColumnName("_CMII_Swap");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.CustomFields).HasColumnType("xml");

                entity.Property(e => e.Importdate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsOfTypeCodeFlat)
                    .HasMaxLength(50)
                    .HasColumnName("Is_of_type_code_Flat");

                entity.Property(e => e.IsOfTypeCodePlate)
                    .HasMaxLength(50)
                    .HasColumnName("Is_of_type_code_Plate");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MarkItemStatus).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.NameChange).HasColumnName("_NameChange");

                entity.Property(e => e.ParentMarkId).HasColumnName("ParentMarkID");

                entity.Property(e => e.PlateItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.ReceiveIntoInventoryId).HasColumnName("ReceiveIntoInventoryID");

                entity.Property(e => e.RemoveMarkItemId).HasColumnName("RemoveMarkItemID");

                entity.Property(e => e.RevisionDetails).HasMaxLength(400);

                entity.Property(e => e.RevisionHold).HasColumnName("_revision_hold");

                entity.Property(e => e.SessionGuid).HasMaxLength(255);

                entity.Property(e => e.SourceAmark)
                    .HasMaxLength(100)
                    .HasColumnName("SourceAMark");

                entity.Property(e => e.SourceArea).HasMaxLength(100);

                entity.Property(e => e.SourceAssemblyId).HasColumnName("SourceAssemblyID");

                entity.Property(e => e.SourceAssemblyMarkGuid)
                    .HasMaxLength(100)
                    .HasColumnName("SourceAssemblyMarkGUID");

                entity.Property(e => e.SourceBottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.SourceCambering).HasMaxLength(100);

                entity.Property(e => e.SourceCutType).HasMaxLength(100);

                entity.Property(e => e.SourceDetails).HasMaxLength(100);

                entity.Property(e => e.SourceEndBottomFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.SourceEndTopFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.SourceEndWebAngle).HasMaxLength(100);

                entity.Property(e => e.SourceExecutionClass).HasMaxLength(100);

                entity.Property(e => e.SourceGirderBfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFThickness");

                entity.Property(e => e.SourceGirderBfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFWidth");

                entity.Property(e => e.SourceGirderDepth).HasMaxLength(100);

                entity.Property(e => e.SourceGirderShape).HasMaxLength(100);

                entity.Property(e => e.SourceGirderTfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFThickness");

                entity.Property(e => e.SourceGirderTfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFWidth");

                entity.Property(e => e.SourceGirderType).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebOffset).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebThickness).HasMaxLength(100);

                entity.Property(e => e.SourceGrade).HasMaxLength(100);

                entity.Property(e => e.SourceGrossLength).HasMaxLength(100);

                entity.Property(e => e.SourceIsShaft).HasMaxLength(100);

                entity.Property(e => e.SourceItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.SourceItemMark).HasMaxLength(100);

                entity.Property(e => e.SourceLot).HasMaxLength(100);

                entity.Property(e => e.SourceMainMember).HasMaxLength(100);

                entity.Property(e => e.SourceMark).HasMaxLength(100);

                entity.Property(e => e.SourceMarkGuid)
                    .HasMaxLength(100)
                    .HasColumnName("SourceMarkGUID");

                entity.Property(e => e.SourceMarkItemGuid)
                    .HasMaxLength(100)
                    .HasColumnName("SourceMarkItemGUID");

                entity.Property(e => e.SourceModelType).HasMaxLength(100);

                entity.Property(e => e.SourcePaintFinish).HasMaxLength(100);

                entity.Property(e => e.SourcePhase).HasMaxLength(100);

                entity.Property(e => e.SourcePrelimMark).HasMaxLength(100);

                entity.Property(e => e.SourceRadius).HasMaxLength(100);

                entity.Property(e => e.SourceReference).HasMaxLength(100);

                entity.Property(e => e.SourceRevision).HasMaxLength(100);

                entity.Property(e => e.SourceSectionSize).HasMaxLength(100);

                entity.Property(e => e.SourceSectionType).HasMaxLength(100);

                entity.Property(e => e.SourceSiteMember).HasMaxLength(100);

                entity.Property(e => e.SourceSiteMemberId).HasColumnName("SourceSiteMemberID");

                entity.Property(e => e.SourceStartBottomFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.SourceStartTopFlangeAngle).HasMaxLength(100);

                entity.Property(e => e.SourceStartWebAngle).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.SourceWebGrade).HasMaxLength(100);

                entity.Property(e => e.SourceWebHeight).HasMaxLength(100);

                entity.Property(e => e.SourceWebThickness).HasMaxLength(100);

                entity.Property(e => e.SourceWeight).HasMaxLength(100);

                entity.Property(e => e.TmpCmiId).HasColumnName("_tmp_CMI_Id");

                entity.Property(e => e.TmpCmiiId).HasColumnName("_tmp_CMII_Id");
            });

            modelBuilder.Entity<ContractDetailedCadlistingBulkXml>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractDetailedCADListingBulkXML");

                entity.HasIndex(e => e.SessionGuidChk, "IX_Session")
                    .IsClustered()
                    .HasFillFactor(100);

                entity.Property(e => e.Column1)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column10)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column100)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column101)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column102)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column103)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column104)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column105)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column106)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column107)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column108)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column109)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column11)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column110)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column111)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column112)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column113)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column114)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column115)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column116)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column117)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column118)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column119)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column12)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column120)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column121)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column122)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column123)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column124)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column125)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column126)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column127)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column128)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column129)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column13)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column130)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column131)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column132)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column133)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column134)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column135)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column136)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column137)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column138)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column139)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column14)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column140)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column141)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column142)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column143)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column144)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column145)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column146)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column147)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column148)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column149)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column15)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column150)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column151)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column152)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column153)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column154)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column155)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column156)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column157)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column158)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column159)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column16)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column160)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column161)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column162)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column163)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column164)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column165)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column166)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column167)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column168)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column169)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column17)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column170)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column171)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column172)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column173)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column174)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column175)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column176)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column177)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column178)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column179)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column18)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column180)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column181)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column182)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column183)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column184)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column185)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column186)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column187)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column188)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column189)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column19)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column190)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column191)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column192)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column193)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column194)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column195)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column196)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column197)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column198)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column199)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column2)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column20)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column200)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column201)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column202)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column203)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column204)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column205)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column206)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column207)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column208)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column209)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column21)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column210)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column211)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column212)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column213)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column214)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column215)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column216)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column217)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column218)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column219)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column22)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column220)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column221)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column222)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column223)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column224)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column225)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column226)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column227)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column228)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column229)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column23)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column230)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column231)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column232)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column233)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column234)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column235)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column236)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column237)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column238)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column239)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column24)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column240)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column241)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column242)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column243)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column244)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column245)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column246)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column247)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column248)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column249)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column25)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column250)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column251)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column252)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column253)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column254)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column255)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column256)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column257)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column258)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column259)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column26)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column260)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column261)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column262)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column263)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column264)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column265)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column266)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column267)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column268)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column269)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column27)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column270)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column271)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column272)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column273)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column274)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column275)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column276)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column277)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column278)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column279)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column28)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column280)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column281)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column282)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column283)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column284)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column285)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column286)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column287)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column288)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column289)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column29)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column290)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column291)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column292)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column293)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column294)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column295)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column296)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column297)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column298)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column299)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column3)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column30)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column31)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column32)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column33)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column34)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column35)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column36)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column37)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column38)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column39)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column4)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column40)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column41)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column42)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column43)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column44)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column45)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column46)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column47)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column48)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column49)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column5)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column50)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column51)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column52)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column53)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column54)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column55)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column56)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column57)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column58)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column59)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column6)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column60)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column61)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column62)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column63)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column64)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column65)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column66)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column67)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column68)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column69)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column7)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column70)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column71)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column72)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column73)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column74)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column75)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column76)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column77)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column78)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column79)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column8)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column80)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column81)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column82)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column83)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column84)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column85)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column86)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column87)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column88)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column89)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column9)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column90)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column91)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column92)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column93)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column94)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column95)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column96)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column97)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column98)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Column99)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SessionGuid).HasMaxLength(100);

                entity.Property(e => e.SessionGuidChk).HasComputedColumnSql("(checksum(hashbytes('SHA1',upper([SessionGuid]))))", true);
            });

            modelBuilder.Entity<ContractDetailedCadlistingRevalidate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractDetailedCADListingRevalidate");

                entity.HasIndex(e => e.SessionGuidChk, "IX_ContractDetailedCADListingRevalidate")
                    .IsClustered();

                entity.Property(e => e.ContractDetailedCadlistingId).HasColumnName("ContractDetailedCADListingID");

                entity.Property(e => e.IdBasedOff).HasColumnName("ID_BasedOff");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.SessionGuid).HasMaxLength(100);

                entity.Property(e => e.SessionGuidChk).HasComputedColumnSql("(checksum(hashbytes('Sha1',upper([SessionGuid]))))", true);

                entity.Property(e => e.SourceAmark)
                    .HasMaxLength(100)
                    .HasColumnName("SourceAMark");

                entity.Property(e => e.SourceCambering).HasMaxLength(100);

                entity.Property(e => e.SourceGrade).HasMaxLength(100);

                entity.Property(e => e.SourceItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.SourceItemMark).HasMaxLength(100);

                entity.Property(e => e.SourceLot).HasMaxLength(100);

                entity.Property(e => e.SourceMainMember).HasMaxLength(100);

                entity.Property(e => e.SourceMark).HasMaxLength(100);

                entity.Property(e => e.SourcePaintFinish).HasMaxLength(100);

                entity.Property(e => e.SourcePhase).HasMaxLength(100);

                entity.Property(e => e.SourceRadius).HasMaxLength(100);

                entity.Property(e => e.SourceSectionSize).HasMaxLength(100);
            });

            modelBuilder.Entity<ContractDrawing>(entity =>
            {
                entity.ToTable("ContractDrawing");

                entity.HasIndex(e => e.ContractDrawingId, "IX_ContractDrawing_ContractDrawingID");

                entity.HasIndex(e => e.ContractListingId, "IX_ContractDrawing_ContractListingID");

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.CheckedBy).HasMaxLength(100);

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DrawingDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssuedBy).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RevisedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Revision).HasMaxLength(50);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractDrawings)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_ContractDrawing_ContractListing");
            });

            modelBuilder.Entity<ContractInvoiceSchedule>(entity =>
            {
                entity.ToTable("ContractInvoiceSchedule");

                entity.HasIndex(e => e.ContractId, "IX_ContractInvoiceSchedule_ContractID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExpectedInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.ItemNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractInvoiceSchedules)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractInvoiceSchedule_Contract");
            });

            modelBuilder.Entity<ContractItem>(entity =>
            {
                entity.ToTable("ContractItem");

                entity.HasIndex(e => new { e.ContractListingId, e.ItemId, e.Name }, "IX_ContractItem_COMPLEX")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractItemId, e.CutTypeId }, "IX_ContractItem_ContractItemID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ItemId, "IX_ContractItem_ItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Name, "IX_ContractItem_Name");

                entity.HasIndex(e => new { e.ContractListingId, e.Name, e.RnU }, "IX_ContractItem_Unique")
                    .IsUnique();

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.BottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.BottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.CamFile).HasMaxLength(500);

                entity.Property(e => e.ContractItemType).HasComment("~~(0=Standard Mark Item, 1=Cam Split Item, 2=Combined Mark Item)");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CutTypeId)
                    .HasColumnName("CutTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExactDimensions)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MarkItemTypeId)
                    .HasColumnName("MarkItemTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Shaft, Fitting, Other");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.RevisedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RnU)
                    .HasColumnName("RN_U")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.TopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.User1).HasMaxLength(255);

                entity.Property(e => e.User2).HasMaxLength(255);

                entity.Property(e => e.User3).HasMaxLength(255);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WebGrade).HasMaxLength(100);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ContractItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractItem_Item");
            });

            modelBuilder.Entity<ContractItemCam>(entity =>
            {
                entity.ToTable("ContractItemCAM");

                entity.HasIndex(e => new { e.WorkstationId, e.ContractItemId, e.WorkOrderCam, e.MasterCam }, "IX_ContractItemCAM_CompoundIndex1");

                entity.HasIndex(e => new { e.ContractItemId, e.MasterCam, e.NestedCam, e.WorkOrderCam, e.ProductionProcessId, e.WorkstationId, e.ContractMarkItemInstanceId }, "IX_ContractItemCAM_ContractItemID")
                    .IsUnique();

                entity.HasIndex(e => e.WorkstationId, "IX_ContractItemCAM_WorkstationID");

                entity.Property(e => e.ContractItemCamid).HasColumnName("ContractItemCAMID");

                entity.Property(e => e.Camformat).HasColumnName("CAMFormat");

                entity.Property(e => e.Camxml)
                    .IsRequired()
                    .HasColumnType("xml")
                    .HasColumnName("CAMXML");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.FileCreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileLastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.MasterCam)
                    .IsRequired()
                    .HasColumnName("MasterCAM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NestedCam).HasColumnName("NestedCAM");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.SessionGuid)
                    .HasMaxLength(255)
                    .HasColumnName("SessionGUID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrderCam).HasColumnName("WorkOrderCAM");

                entity.Property(e => e.WorkstationId).HasColumnName("WorkstationID");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ContractItemCams)
                    .HasForeignKey(d => d.ContractItemId)
                    .HasConstraintName("FK_ContractItemCAM_ContractItem");
            });

            modelBuilder.Entity<ContractListing>(entity =>
            {
                entity.ToTable("ContractListing");

                entity.HasIndex(e => e.ContractId, "IX_ContractListing_ContractID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ImportModelType).HasMaxLength(100);

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssueNo).HasMaxLength(50);

                entity.Property(e => e.ListingTypeId)
                    .HasColumnName("ListingTypeID")
                    .HasComment("~1 - Prelim , 2 - Detail, 3 - EDI, 4 - Manual Customer Listing");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the contract.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractListings)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractListing_Contract1");
            });

            modelBuilder.Entity<ContractLot>(entity =>
            {
                entity.HasKey(e => e.LotId)
                    .HasName("PK_ContractLott");

                entity.ToTable("ContractLot");

                entity.HasIndex(e => e.ContractListingId, "IX_ContractLot_ContractListingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LotId, e.Name, e.Color }, "IX_ContractLot_Name")
                    .HasFillFactor(90);

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DispatchDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionClassId).HasColumnName("ExecutionClassID");

                entity.Property(e => e.FabricationDate).HasColumnType("datetime");

                entity.Property(e => e.FabricationTeam).HasMaxLength(50);

                entity.Property(e => e.MarkItemsRequiredByDate).HasColumnType("datetime");

                entity.Property(e => e.MarksRequiredByDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OnSiteDate).HasColumnType("datetime");

                entity.Property(e => e.PaintDate).HasColumnType("datetime");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractLots)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_ContractLot_ContractListing");
            });

            modelBuilder.Entity<ContractLotRelease>(entity =>
            {
                entity.ToTable("ContractLotRelease");

                entity.Property(e => e.ContractLotReleaseId).HasColumnName("ContractLotReleaseID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractLotReleases)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ContractLotRelease_Contract");
            });

            modelBuilder.Entity<ContractLotUserDate>(entity =>
            {
                entity.ToTable("ContractLotUserDate");

                entity.Property(e => e.ContractLotUserDateId).HasColumnName("ContractLotUserDateID");

                entity.Property(e => e.DateTypeId)
                    .HasColumnName("DateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractLotUserDateProcess>(entity =>
            {
                entity.ToTable("ContractLotUserDateProcess");

                entity.HasIndex(e => e.ContractLotUserDateId, "IX_ContractLotUserDateProcess_FK_ContractLotUserDateProcess_ContractLotUserDate");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ContractLotUserDateProcess_FK_ContractLotUserDateProcess_ProductionProcess");

                entity.Property(e => e.ContractLotUserDateProcessId).HasColumnName("ContractLotUserDateProcessID");

                entity.Property(e => e.ContractLotUserDateId).HasColumnName("ContractLotUserDateID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.HasOne(d => d.ContractLotUserDate)
                    .WithMany(p => p.ContractLotUserDateProcesses)
                    .HasForeignKey(d => d.ContractLotUserDateId)
                    .HasConstraintName("FK_ContractLotUserDateProcess_ContractLotUserDate");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ContractLotUserDateProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ContractLotUserDateProcess_ProductionProcess");
            });

            modelBuilder.Entity<ContractLotUserDateValue>(entity =>
            {
                entity.ToTable("ContractLotUserDateValue");

                entity.HasIndex(e => e.LotId, "IX_ContractLotUserDateValue_FK_ContractLotUserDateValue_ContractLot");

                entity.HasIndex(e => e.ContractLotUserDateId, "IX_ContractLotUserDateValue_FK_ContractLotUserDateValue_ContractLotUserDate");

                entity.Property(e => e.ContractLotUserDateValueId).HasColumnName("ContractLotUserDateValueID");

                entity.Property(e => e.ContractLotUserDateId).HasColumnName("ContractLotUserDateID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ContractLotUserDate)
                    .WithMany(p => p.ContractLotUserDateValues)
                    .HasForeignKey(d => d.ContractLotUserDateId)
                    .HasConstraintName("FK_ContractLotUserDateValue_ContractLotUserDate");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.ContractLotUserDateValues)
                    .HasForeignKey(d => d.LotId)
                    .HasConstraintName("FK_ContractLotUserDateValue_ContractLot");
            });

            modelBuilder.Entity<ContractMark>(entity =>
            {
                entity.HasKey(e => e.MarkId);

                entity.ToTable("ContractMark");

                entity.HasIndex(e => new { e.IsAssemblyMark, e.MarkId }, "IX_ContractMark_CADImport");

                entity.HasIndex(e => e.ContractDrawingId, "IX_ContractMark_ContractDrawingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IsAssemblyMark, "IX_ContractMark_IsAssemblyMark");

                entity.HasIndex(e => e.MarkId, "IX_ContractMark_MarkId");

                entity.HasIndex(e => e.Name, "IX_ContractMark_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ParentMarkId, "IX_ContractMark_ParentMarkID")
                    .HasFillFactor(90);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.CadFile).HasMaxLength(500);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.CoverageFactor).HasDefaultValueSql("((2))");

                entity.Property(e => e.CreateProductionWorkOrder)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.ExecutionClassId).HasColumnName("ExecutionClassID");

                entity.Property(e => e.FirstItemId)
                    .HasColumnName("FirstItemID")
                    .HasComment("Store the first itemID that was used on the mark");

                entity.Property(e => e.IsPhaseGroup)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.MainMemberMarkItemId).HasColumnName("MainMemberMarkItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.ParentMarkId).HasColumnName("ParentMarkID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReceivableItemId).HasColumnName("ReceivableItemID");

                entity.Property(e => e.RevisedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitArea).HasComputedColumnSql("([Area]/case isnull([Quantity],(1)) when (0) then (1) else isnull([Quantity],(1)) end)", true);

                entity.Property(e => e.UnitWeight).HasComputedColumnSql("([Weight]/case isnull([Quantity],(1)) when (0) then (1) else isnull([Quantity],(1)) end)", true);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContractDrawing)
                    .WithMany(p => p.ContractMarks)
                    .HasForeignKey(d => d.ContractDrawingId)
                    .HasConstraintName("FK_ContractMark_ContractDrawing1");
            });

            modelBuilder.Entity<ContractMarkInstance>(entity =>
            {
                entity.ToTable("ContractMarkInstance");

                entity.HasIndex(e => new { e.ContractListingId, e.Guid }, "IX_ContractMarkInstance")
                    .IsUnique();

                entity.HasIndex(e => new { e.ContractMarkId, e.ContractMarkInstanceId, e.IsDeleted, e.IsManualInsert }, "IX_ContractMarkInstance_ContractMarkIDRevision");

                entity.HasIndex(e => new { e.ContractMarkPhaseLotId, e.ContractMarkPhaseId }, "IX_ContractMarkInstance_ContractMarkPhaseLotID");

                entity.HasIndex(e => new { e.ContractListingId, e.IsDeleted }, "IX_ContractMarkInstance_Deleted");

                entity.HasIndex(e => e.ParentMarkInstanceId, "IX_ContractMarkInstance_Parent");

                entity.HasIndex(e => new { e.ContractMarkId, e.AssemblyMarkLotId, e.ProductionWorkOrderContractId, e.IsDeleted }, "IX_ContractMarkInstance_ProductionWorkOrderContract");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ContractMarkInstance_ProductionWorkOrderContract_2");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.AssemblyMarkLotId).HasColumnName("AssemblyMarkLotID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.ParentMarkInstanceId).HasColumnName("ParentMarkInstanceID");

                entity.Property(e => e.PreviousContractMarkInstanceId).HasColumnName("PreviousContractMarkInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractMarkInstances)
                    .HasForeignKey(d => d.ContractListingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkInstance_ContractListing");

                entity.HasOne(d => d.ContractMark)
                    .WithMany(p => p.ContractMarkInstances)
                    .HasForeignKey(d => d.ContractMarkId)
                    .HasConstraintName("FK_ContractMarkInstance_ContractMark");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ContractMarkInstances)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ContractMarkInstance_ProductionWorkOrderContract");
            });

            modelBuilder.Entity<ContractMarkInstancePwocarchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractMarkInstancePWOCArchive");

                entity.HasIndex(e => e.ContractMarkInstanceId, "IX_ContractMarkInstancePWOCArchive")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");
            });

            modelBuilder.Entity<ContractMarkItem>(entity =>
            {
                entity.HasKey(e => e.MarkItemId)
                    .HasName("PK_ContractItemListing");

                entity.ToTable("ContractMarkItem");

                entity.HasIndex(e => new { e.MarkItemId, e.ContractItemId }, "IX_ContractMarkItem_ContractItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractItemId, e.MarkItemId, e.MarkId, e.Quantity, e.IgnoreForProcurement }, "IX_ContractMarkItem_Lookup");

                entity.HasIndex(e => new { e.MarkId, e.MarkItemId, e.ContractItemId, e.CreateProductionWorkOrder }, "IX_ContractMarkItem_Lotting");

                entity.HasIndex(e => new { e.MarkItemId, e.MarkId, e.CreateProductionWorkOrder }, "IX_ContractMarkItem_MarkItemID");

                entity.HasIndex(e => new { e.MarkItemId, e.OnHold, e.IgnoreForProcurement }, "IX_ContractMarkItem_OnholdIgnoreForProcurement");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.Area).HasDefaultValueSql("((1))");

                entity.Property(e => e.BackFlush)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.CreateProductionWorkOrder)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(100);

                entity.Property(e => e.PrelimMark).HasMaxLength(100);

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.RevisedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitArea).HasComputedColumnSql("([Area]/case isnull([Quantity],(1)) when (0) then (1) else isnull([Quantity],(1)) end)", true);

                entity.Property(e => e.UnitWeight).HasComputedColumnSql("([Weight]/case isnull([Quantity],(1)) when (0) then (1) else isnull([Quantity],(1)) end)", true);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ContractMarkItems)
                    .HasForeignKey(d => d.ContractItemId)
                    .HasConstraintName("FK_ContractMarkItem_ContractItem");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ContractMarkItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ContractMarkItem_ContractMark");
            });

            modelBuilder.Entity<ContractMarkItemInstance>(entity =>
            {
                entity.ToTable("ContractMarkItemInstance");

                entity.HasIndex(e => new { e.ContractListingId, e.Guid, e.IsDeleted }, "IX_ContractMarkItemInstance")
                    .IsUnique();

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_ContractMarkItemInstance_CMPLI");

                entity.HasIndex(e => new { e.ContractListingId, e.IsDeleted }, "IX_ContractMarkItemInstance_ContractListingID_IsDeleted");

                entity.HasIndex(e => e.ContractMarkInstanceId, "IX_ContractMarkItemInstance_ContractMarkInstance");

                entity.HasIndex(e => new { e.ContractMarkItemId, e.ContractMarkItemInstanceId, e.ContractMarkPhaseLotItemId, e.IsDeleted, e.ProductionWorkOrderContractId }, "IX_ContractMarkItemInstance_ContractMarkItemID");

                entity.HasIndex(e => new { e.ContractMarkItemId, e.ContractMarkPhaseLotItemId }, "IX_ContractMarkItemInstance_ContractMarkItemID_ContractMarkPhaseLotItemID");

                entity.HasIndex(e => new { e.Guid, e.ContractListingId }, "IX_ContractMarkItemInstance_GUID_ContractListingID");

                entity.HasIndex(e => e.IsDeleted, "IX_ContractMarkItemInstance_InstanceCheck");

                entity.HasIndex(e => new { e.ProductionWorkOrderContractId, e.IsDeleted }, "IX_ContractMarkItemInstance_ProductionWorkOrderContract");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.PreviousContractMarkItemInstanceId).HasColumnName("PreviousContractMarkItemInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractMarkItemInstances)
                    .HasForeignKey(d => d.ContractListingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkItemInstance_ContractListing");

                entity.HasOne(d => d.ContractMarkItem)
                    .WithMany(p => p.ContractMarkItemInstances)
                    .HasForeignKey(d => d.ContractMarkItemId)
                    .HasConstraintName("FK_ContractMarkItemInstance_ContractMarkItem");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ContractMarkItemInstances)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ContractMarkItemInstance_ProductionWorkOrderContract");
            });

            modelBuilder.Entity<ContractMarkItemInstancePwocarchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractMarkItemInstancePWOCArchive");

                entity.HasIndex(e => e.ContractMarkItemInstanceId, "IX_ContractMarkItemInstancePWOCArchive")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");
            });

            modelBuilder.Entity<ContractMarkItemTransaction>(entity =>
            {
                entity.HasKey(e => e.MarkItemTransactionId);

                entity.ToTable("ContractMarkItemTransaction");

                entity.HasIndex(e => new { e.MarkItemId, e.TransactionId, e.PhaseId }, "IX_ContractMarkItemTransaction")
                    .HasFillFactor(90);

                entity.Property(e => e.MarkItemTransactionId).HasColumnName("MarkItemTransactionID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.TransactionId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<ContractMarkPhase>(entity =>
            {
                entity.ToTable("ContractMarkPhase");

                entity.HasIndex(e => e.PhaseId, "IX_ContractMarkPhase_FK_ContractMarkPhase_ContractPhase");

                entity.HasIndex(e => e.MarkId, "IX_ContractMarkPhase_MarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.MarkId, e.PhaseId }, "IX_ContractMarkPhase_MarkID_PhaseID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ContractMarkPhases)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ContractMarkPhase_ContractMark");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.ContractMarkPhases)
                    .HasForeignKey(d => d.PhaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhase_ContractPhase");
            });

            modelBuilder.Entity<ContractMarkPhaseLot>(entity =>
            {
                entity.ToTable("ContractMarkPhaseLot");

                entity.HasIndex(e => new { e.StatusId, e.LotId, e.ContractMarkPhaseId, e.TransactionId }, "IX_ContractMarkPhaseLot_Complex")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractMarkPhaseId, e.StatusId, e.LotId, e.TransactionId }, "IX_ContractMarkPhaseLot_Complex2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractMarkPhaseLotId, e.ContractMarkPhaseId }, "IX_ContractMarkPhaseLot_ContractMarkPhaseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractBundleId, "IX_ContractMarkPhaseLot_FK_ContractMarkPhaseLot_ContractBundle");

                entity.HasIndex(e => e.ContractLotReleaseId, "IX_ContractMarkPhaseLot_FK_ContractMarkPhaseLot_ContractLotRelease");

                entity.HasIndex(e => e.LotId, "IX_ContractMarkPhaseLot_FK_ContractMarkPhaseLot_ContractSequenceLot");

                entity.HasIndex(e => new { e.ContractMarkPhaseLotId, e.LotId }, "IX_ContractMarkPhaseLot_LotID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusId, e.TransactionId }, "IX_ContractMarkPhaseLot_StatusID_TransactionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransactionId, "IX_ContractMarkPhaseLot_TransactionID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractBundleId).HasColumnName("ContractBundleID");

                entity.Property(e => e.ContractLotReleaseId).HasColumnName("ContractLotReleaseID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.ReleasedBy).HasMaxLength(50);

                entity.Property(e => e.ReleasedOn).HasColumnType("datetime");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");

                entity.HasOne(d => d.ContractBundle)
                    .WithMany(p => p.ContractMarkPhaseLots)
                    .HasForeignKey(d => d.ContractBundleId)
                    .HasConstraintName("FK_ContractMarkPhaseLot_ContractBundle");

                entity.HasOne(d => d.ContractLotRelease)
                    .WithMany(p => p.ContractMarkPhaseLots)
                    .HasForeignKey(d => d.ContractLotReleaseId)
                    .HasConstraintName("FK_ContractMarkPhaseLot_ContractLotRelease");

                entity.HasOne(d => d.ContractMarkPhase)
                    .WithMany(p => p.ContractMarkPhaseLots)
                    .HasForeignKey(d => d.ContractMarkPhaseId)
                    .HasConstraintName("FK_ContractMarkPhaseLot_ContractMarkPhase");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.ContractMarkPhaseLots)
                    .HasForeignKey(d => d.LotId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhaseLot_ContractSequenceLot");
            });

            modelBuilder.Entity<ContractMarkPhaseLotItem>(entity =>
            {
                entity.ToTable("ContractMarkPhaseLotItem");

                entity.HasIndex(e => e.ContractId, "IX_ContractMarkPhaseLotItem_ContractID");

                entity.HasIndex(e => e.ContractItemId, "IX_ContractMarkPhaseLotItem_ContractItem")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ContractMarkPhaseLotItem_ContractMarkPhaseLotID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractMarkPhaseLotItemId, e.ContractMarkPhaseLotId }, "IX_ContractMarkPhaseLotItem_ContractMarkPhaseLotItemID");

                entity.HasIndex(e => e.ContractBundleId, "IX_ContractMarkPhaseLotItem_FK_ContractMarkPhaseLotItem_ContractBundle");

                entity.HasIndex(e => e.EdifileId, "IX_ContractMarkPhaseLotItem_FK_ContractMarkPhaseLotItem_EDIFile");

                entity.HasIndex(e => e.LotId, "IX_ContractMarkPhaseLotItem_LotID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkId, "IX_ContractMarkPhaseLotItem_MarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkItemId, "IX_ContractMarkPhaseLotItem_MarkItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkItemTransactionId, "IX_ContractMarkPhaseLotItem_MarkItemTransactionID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.ContractBundleId).HasColumnName("ContractBundleID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.EdiitemUrn)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("EDIItemURN")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("This is a unique identifier for the mark item in the EDI file, used by SteelXML standard for linking nested bars to mark items.");

                entity.Property(e => e.ExportedBy).HasMaxLength(100);

                entity.Property(e => e.ExportedOn).HasColumnType("datetime");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.MarkItemTransactionId)
                    .HasColumnName("MarkItemTransactionID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.QuantityAllocated).HasComment("Quantity of items in Inventory");

                entity.Property(e => e.QuantityOrdered).HasComment("Quantity of items on PurchaseOrder");

                entity.Property(e => e.QuantityOutstanding).HasComputedColumnSql("(([Quantity]-[QuantityOrdered])-[QuantityAllocated])", true);

                entity.HasOne(d => d.ContractBundle)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.ContractBundleId)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_ContractBundle");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.ContractItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_ContractItem");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_ContractMarkPhaseLot");

                entity.HasOne(d => d.Edifile)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.EdifileId)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_EDIFile");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.MarkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ContractMarkPhaseLotItems)
                    .HasForeignKey(d => d.MarkItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractMarkPhaseLotItem_ContractMarkItem");
            });

            modelBuilder.Entity<ContractPhase>(entity =>
            {
                entity.HasKey(e => e.PhaseId);

                entity.ToTable("ContractPhase");

                entity.HasIndex(e => new { e.ContractId, e.Name }, "IX_ContractPhase_ContractID")
                    .HasFillFactor(90);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.CompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.ErectionDate).HasColumnType("datetime");

                entity.Property(e => e.FabricationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractPhases)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractPhase_Contract");
            });

            modelBuilder.Entity<ContractPrelimCadlisting>(entity =>
            {
                entity.ToTable("ContractPrelimCADListing");

                entity.Property(e => e.ContractPrelimCadlistingId).HasColumnName("ContractPrelimCADListingID");

                entity.Property(e => e.AllowRevision).HasDefaultValueSql("((1))");

                entity.Property(e => e.CadinterfaceId).HasColumnName("CADInterfaceID");

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CustomFields).HasColumnType("xml");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MarkStatus).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.PlateItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.RevisionDetails).HasMaxLength(400);

                entity.Property(e => e.SessionGuid).HasMaxLength(255);

                entity.Property(e => e.SourceArea).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.SourceBottomFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.SourceCambering).HasMaxLength(100);

                entity.Property(e => e.SourceDepth).HasMaxLength(100);

                entity.Property(e => e.SourceDetails).HasMaxLength(100);

                entity.Property(e => e.SourceDrawing).HasMaxLength(100);

                entity.Property(e => e.SourceDueDate).HasMaxLength(100);

                entity.Property(e => e.SourceGirderBfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFThickness");

                entity.Property(e => e.SourceGirderBfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFWidth");

                entity.Property(e => e.SourceGirderDepth).HasMaxLength(100);

                entity.Property(e => e.SourceGirderShape).HasMaxLength(100);

                entity.Property(e => e.SourceGirderTfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFThickness");

                entity.Property(e => e.SourceGirderTfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFWidth");

                entity.Property(e => e.SourceGirderType).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebOffset).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebThickness).HasMaxLength(100);

                entity.Property(e => e.SourceGrade).HasMaxLength(100);

                entity.Property(e => e.SourceGrossLength).HasMaxLength(100);

                entity.Property(e => e.SourceItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.SourceLot).HasMaxLength(100);

                entity.Property(e => e.SourceMark)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'1')");

                entity.Property(e => e.SourcePaintFinish).HasMaxLength(100);

                entity.Property(e => e.SourcePhase).HasMaxLength(100);

                entity.Property(e => e.SourceQuantity)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceRadius).HasMaxLength(100);

                entity.Property(e => e.SourceReference).HasMaxLength(100);

                entity.Property(e => e.SourceSectionCode).HasMaxLength(100);

                entity.Property(e => e.SourceSectionSize).HasMaxLength(100);

                entity.Property(e => e.SourceSectionType).HasMaxLength(100);

                entity.Property(e => e.SourceThickness).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeThickness).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.SourceTopFlangeWidth).HasMaxLength(100);

                entity.Property(e => e.SourceWebGrade).HasMaxLength(100);

                entity.Property(e => e.SourceWebHeight).HasMaxLength(100);

                entity.Property(e => e.SourceWebThickness).HasMaxLength(100);

                entity.Property(e => e.SourceWeight).HasMaxLength(100);

                entity.Property(e => e.TempLength).HasMaxLength(100);
            });

            modelBuilder.Entity<ContractPrelimMark>(entity =>
            {
                entity.ToTable("ContractPrelimMark");

                entity.HasIndex(e => e.ContractListingId, "IX_ContractPrelimMark_ContractListingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractPrelimMarkId, "IX_ContractPrelimMark_ContractPrelimMarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemId, "IX_ContractPrelimMark_FK_ContractPrelimMark_Item");

                entity.Property(e => e.ContractPrelimMarkId).HasColumnName("ContractPrelimMarkID");

                entity.Property(e => e.Angle1).HasMaxLength(10);

                entity.Property(e => e.Angle2).HasMaxLength(10);

                entity.Property(e => e.BottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.BottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CutType).HasMaxLength(10);

                entity.Property(e => e.Details).HasMaxLength(100);

                entity.Property(e => e.Drawing).HasMaxLength(100);

                entity.Property(e => e.Finish).HasMaxLength(100);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.RevisedBy).HasMaxLength(255);

                entity.Property(e => e.Skew1).HasMaxLength(10);

                entity.Property(e => e.Skew2).HasMaxLength(10);

                entity.Property(e => e.TopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.TopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.User1).HasMaxLength(255);

                entity.Property(e => e.User2).HasMaxLength(255);

                entity.Property(e => e.User3).HasMaxLength(255);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WebGrade).HasMaxLength(100);

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractPrelimMarks)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_ContractPrelimMark_ContractListing");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ContractPrelimMarks)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractPrelimMark_Item");
            });

            modelBuilder.Entity<ContractPrelimMarkSequence>(entity =>
            {
                entity.HasKey(e => e.SequenceId);

                entity.ToTable("ContractPrelimMarkSequence");

                entity.HasIndex(e => new { e.EdifileId, e.ContractPrelimMarkId }, "IX_ContractPrelimMarkSequence_EDIFileID_ContractPrelimMarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractPrelimMarkId, "IX_ContractPrelimMarkSequence_FK_ContractPrelimMarkSequence_ContractPrelimMark");

                entity.HasIndex(e => e.ListId, "IX_ContractPrelimMarkSequence_FK_ContractPrelimMarkSequence_ContractPrelimSequenceList");

                entity.HasIndex(e => new { e.PhaseId, e.SequenceId }, "IX_ContractPrelimMarkSequence_PhaseID");

                entity.HasIndex(e => new { e.SequenceId, e.ContractPrelimMarkId }, "IX_ContractPrelimMarkSequence_SequenceID_ContractPrelimMarkID");

                entity.Property(e => e.SequenceId).HasColumnName("SequenceID");

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractPrelimMarkId).HasColumnName("ContractPrelimMarkID");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.ListId).HasColumnName("ListID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.QuantityOutstanding).HasComputedColumnSql("(([Quantity]-[QuantityOrdered])-[QuantityAllocated])", true);

                entity.Property(e => e.ReleasedBy).HasMaxLength(50);

                entity.Property(e => e.ReleasedOn).HasColumnType("datetime");

                entity.Property(e => e.SplitFromSequenceId).HasColumnName("SplitFromSequenceID");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContractPrelimMark)
                    .WithMany(p => p.ContractPrelimMarkSequences)
                    .HasForeignKey(d => d.ContractPrelimMarkId)
                    .HasConstraintName("FK_ContractPrelimMarkSequence_ContractPrelimMark");

                entity.HasOne(d => d.Edifile)
                    .WithMany(p => p.ContractPrelimMarkSequences)
                    .HasForeignKey(d => d.EdifileId)
                    .HasConstraintName("FK_ContractPrelimMarkSequence_EDIFile");

                entity.HasOne(d => d.List)
                    .WithMany(p => p.ContractPrelimMarkSequences)
                    .HasForeignKey(d => d.ListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractPrelimMarkSequence_ContractPrelimSequenceList");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.ContractPrelimMarkSequences)
                    .HasForeignKey(d => d.PhaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractPrelimMarkSequence_ContractPhase");
            });

            modelBuilder.Entity<ContractPrelimSequenceList>(entity =>
            {
                entity.HasKey(e => e.ListId)
                    .HasName("PK_ContractPrelimList");

                entity.ToTable("ContractPrelimSequenceList");

                entity.HasIndex(e => e.ContractListingId, "IX_ContractPrelimSequenceList_FK_ContractPrelimList_ContractListing");

                entity.Property(e => e.ListId).HasColumnName("ListID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RequiredDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractPrelimSequenceLists)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_ContractPrelimList_ContractListing");
            });

            modelBuilder.Entity<ContractPriority>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.ContractId, e.Priority });

                entity.ToTable("ContractPriority");

                entity.HasIndex(e => e.ContractId, "IX_ContractPriority_FK_ContractPriority_Contract");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractPriorities)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractPriority_Contract");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ContractPriorities)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ContractPriority_Facility");
            });

            modelBuilder.Entity<ContractRevision>(entity =>
            {
                entity.ToTable("ContractRevision");

                entity.HasIndex(e => e.ContractListingId, "IX_ContractRevision_FK_ContractRevision_ContractListing");

                entity.HasIndex(e => e.MarkItemId, "IX_ContractRevision_MarkItemID");

                entity.Property(e => e.ContractRevisionId).HasColumnName("ContractRevisionID");

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.ParentMarkId).HasColumnName("ParentMarkID");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.ContractRevisions)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_ContractRevision_ContractListing");
            });

            modelBuilder.Entity<CostCentre>(entity =>
            {
                entity.ToTable("CostCentre");

                entity.Property(e => e.CostCentreId)
                    .HasColumnName("CostCentreID")
                    .HasComment("The unique cost centre ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasComment("Give the cost centre a description.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the cost centre.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CostCode>(entity =>
            {
                entity.ToTable("CostCode");

                entity.HasIndex(e => e.CostCentreId, "IX_CostCode_FK_CostCode_CostCentre");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasComment("The unique cost code ID number generated automatically.");

                entity.Property(e => e.BudgetGroupId)
                    .HasColumnName("BudgetGroupID")
                    .HasComment("The budget availability option for this cost code.");

                entity.Property(e => e.CostCentreId)
                    .HasColumnName("CostCentreID")
                    .HasComment("Specify which cost centre the cost code belongs to.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasComment("Give the cost code a description for future reference.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the cost code.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CostCentre)
                    .WithMany(p => p.CostCodes)
                    .HasForeignKey(d => d.CostCentreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostCode_CostCentre");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasComment("The unique currency ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("Give the currency a description.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasComment("Enter the currency name.");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CurrencyConversion>(entity =>
            {
                entity.ToTable("CurrencyConversion");

                entity.HasIndex(e => e.FromCurrencyId, "IX_CurrencyConversion_FK_CurrencyConversion_Currency");

                entity.HasIndex(e => new { e.ToCurrencyId, e.Date }, "IX_NCI_CurrencyConversion_ToCurrencyDate");

                entity.Property(e => e.CurrencyConversionId)
                    .HasColumnName("CurrencyConversionID")
                    .HasComment("Unique ID for the currency conversion");

                entity.Property(e => e.ConversionFactor)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The exchange rate ");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the exchange rate");

                entity.Property(e => e.FromCurrencyId)
                    .HasColumnName("FromCurrencyID")
                    .HasComment("The source currency when converting to the base currency");

                entity.Property(e => e.ToCurrencyId).HasColumnName("ToCurrencyID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.FromCurrency)
                    .WithMany(p => p.CurrencyConversionFromCurrencies)
                    .HasForeignKey(d => d.FromCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyConversion_Currency");

                entity.HasOne(d => d.ToCurrency)
                    .WithMany(p => p.CurrencyConversionToCurrencies)
                    .HasForeignKey(d => d.ToCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyConversion_ToCurrency");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasIndex(e => e.CurrencyId, "IX_Customer_FK_Customer_Currency");

                entity.HasIndex(e => e.EdiinterfaceOut, "IX_Customer_FK_Customer_EDIInterfaceOut");

                entity.HasIndex(e => e.PaymentTermsId, "IX_Customer_FK_Customer_PaymentTerms");

                entity.HasIndex(e => e.TaxCodeId, "IX_Customer_FK_Customer_TaxCode");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasComment("The unique customer ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CustomerTypeId)
                    .HasColumnName("CustomerTypeID")
                    .HasComment("Define the customer type.");

                entity.Property(e => e.Ediemail)
                    .HasMaxLength(50)
                    .HasColumnName("EDIEMail");

                entity.Property(e => e.EdifileFormat).HasColumnName("EDIFileFormat");

                entity.Property(e => e.EdiinterfaceOut).HasColumnName("EDIInterfaceOut");

                entity.Property(e => e.Edireference)
                    .HasMaxLength(4)
                    .HasColumnName("EDIReference");

                entity.Property(e => e.EdisubjectHeaderSuffix)
                    .HasMaxLength(255)
                    .HasColumnName("EDISubjectHeaderSuffix");

                entity.Property(e => e.ExternalReference).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("Enter customers name.");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Customer_Currency");

                entity.HasOne(d => d.EdiinterfaceOutNavigation)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.EdiinterfaceOut)
                    .HasConstraintName("FK_Customer_EDIInterfaceOut");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_Customer_PaymentTerms");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_Customer_TaxCode");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.HasIndex(e => e.ContractId, "IX_Document_ContractID");

                entity.HasIndex(e => new { e.DocumentId, e.ContractId, e.DocumentKindId }, "IX_Document_Search");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("DocumentID")
                    .HasComment("The unique document ID number generated automatically.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("Unique Contract ID this Document is associated with.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("The title of the document.");

                entity.Property(e => e.DocumentKindId)
                    .HasColumnName("DocumentKindID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sets the Document Kind");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("The identifier for this document.");

                entity.Property(e => e.Tempkey).HasColumnName("tempkey");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Document_Contract");
            });

            modelBuilder.Entity<DocumentAdditionalDatum>(entity =>
            {
                entity.HasKey(e => e.DocumentAdditionalDataId);

                entity.HasIndex(e => new { e.DocumentId, e.SupplierId, e.ItemId }, "IX_DAD_DocumentID")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.ItemId, "IX_DAD_ItemID")
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.SupplierId, e.ItemId }, "IX_DAD_JoinKeyGroup")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.SupplierId, e.ItemId }, "IX_DAD_JoinKeyInstance")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SupplierId, "IX_DAD_SupplierID")
                    .HasFillFactor(80);

                entity.Property(e => e.DocumentAdditionalDataId).HasColumnName("DocumentAdditionalDataID");

                entity.Property(e => e.CastReference).IsRequired();

                entity.Property(e => e.Cemark).HasColumnName("CEMark");

                entity.Property(e => e.DocumentAdditionalDataType).HasComment("1 - Test Certificate ");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<DocumentDistributionList>(entity =>
            {
                entity.ToTable("DocumentDistributionList");

                entity.Property(e => e.DocumentDistributionListId)
                    .HasColumnName("DocumentDistributionListID")
                    .HasComment("The unique Distribution List type ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the distribution list a description for future reference.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the Distribution List.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentDistributionListRecipient>(entity =>
            {
                entity.ToTable("DocumentDistributionListRecipient");

                entity.HasIndex(e => e.ContactId, "IX_DocumentDistributionListRecipient_FK_DocumentDistributionListRecipient_Contact");

                entity.HasIndex(e => e.DocumentDistributionListId, "IX_DocumentDistributionListRecipient_FK_DocumentDistributionListRecipient_DocumentDistributionList");

                entity.Property(e => e.DocumentDistributionListRecipientId).HasColumnName("DocumentDistributionListRecipientID");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("~Foreign Key to Recipient");

                entity.Property(e => e.DocumentDistributionListId)
                    .HasColumnName("DocumentDistributionListID")
                    .HasComment("~Foreign Key to Distribution List");

                entity.Property(e => e.TeamLeader)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this a team leader?");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.DocumentDistributionListRecipients)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentDistributionListRecipient_Contact");

                entity.HasOne(d => d.DocumentDistributionList)
                    .WithMany(p => p.DocumentDistributionListRecipients)
                    .HasForeignKey(d => d.DocumentDistributionListId)
                    .HasConstraintName("FK_DocumentDistributionListRecipient_DocumentDistributionList");
            });

            modelBuilder.Entity<DocumentInterface>(entity =>
            {
                entity.ToTable("DocumentInterface");

                entity.Property(e => e.DocumentInterfaceId)
                    .HasColumnName("DocumentInterfaceID")
                    .HasComment("Unique Identifier of Document Interface");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefaultFilePath).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of Document Interface");

                entity.Property(e => e.DocumentKindId).HasColumnName("DocumentKindID");

                entity.Property(e => e.DrawingDate).HasMaxLength(50);

                entity.Property(e => e.DrawingDescription).HasMaxLength(50);

                entity.Property(e => e.DrawingFormat).HasMaxLength(50);

                entity.Property(e => e.DrawingIssue).HasMaxLength(50);

                entity.Property(e => e.DrawingLength).HasMaxLength(50);

                entity.Property(e => e.DrawingMark).HasMaxLength(50);

                entity.Property(e => e.DrawingModified).HasMaxLength(50);

                entity.Property(e => e.DrawingNested).HasMaxLength(50);

                entity.Property(e => e.DrawingPrintFlag).HasMaxLength(50);

                entity.Property(e => e.DrawingQuantity).HasMaxLength(50);

                entity.Property(e => e.DrawingRevision).HasMaxLength(50);

                entity.Property(e => e.DrawingScale).HasMaxLength(50);

                entity.Property(e => e.DrawingStamp).HasMaxLength(50);

                entity.Property(e => e.DrawingType).HasMaxLength(50);

                entity.Property(e => e.DrawingViewerStatus).HasMaxLength(50);

                entity.Property(e => e.FileExtention).HasMaxLength(50);

                entity.Property(e => e.MappingAlternativeName).HasMaxLength(100);

                entity.Property(e => e.MappingDependantFileName).HasMaxLength(100);

                entity.Property(e => e.MappingDescription).HasMaxLength(100);

                entity.Property(e => e.MappingDocumentKindId)
                    .HasMaxLength(100)
                    .HasColumnName("MappingDocumentKindID");

                entity.Property(e => e.MappingDocumentStatus).HasMaxLength(100);

                entity.Property(e => e.MappingDocumentType).HasMaxLength(100);

                entity.Property(e => e.MappingFileCreatedOn).HasMaxLength(100);

                entity.Property(e => e.MappingFileName).HasMaxLength(100);

                entity.Property(e => e.MappingFileSize).HasMaxLength(100);

                entity.Property(e => e.MappingFileUpdatedOn).HasMaxLength(100);

                entity.Property(e => e.MappingMarkItemGuid)
                    .HasMaxLength(100)
                    .HasColumnName("MappingMarkItemGUID");

                entity.Property(e => e.MappingName).HasMaxLength(100);

                entity.Property(e => e.MappingOwner).HasMaxLength(100);

                entity.Property(e => e.MappingRevision).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of Document Interface");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.Script).IsRequired();

                entity.Property(e => e.SpecificFile)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this reading from a Specific file or a Directory?");

                entity.Property(e => e.StorageLocationPath).HasMaxLength(255);

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DocumentInterfaceImportListing>(entity =>
            {
                entity.ToTable("DocumentInterfaceImportListing");

                entity.HasIndex(e => e.ChangeOrderId, "IX_DocumentInterfaceImportListing_FK_DocumentInterfaceImportListing_ChangeOrderID");

                entity.Property(e => e.DocumentInterfaceImportListingId).HasColumnName("DocumentInterfaceImportListingID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("The owner of the document");

                entity.Property(e => e.ContractId)
                    .HasMaxLength(100)
                    .HasColumnName("ContractID");

                entity.Property(e => e.CurrentRevision).HasMaxLength(100);

                entity.Property(e => e.DependantFileName).HasMaxLength(1000);

                entity.Property(e => e.DocumentKindId).HasColumnName("DocumentKindID");

                entity.Property(e => e.DocumentRevisionCodeId).HasColumnName("DocumentRevisionCodeID");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.DocumentStatusId).HasColumnName("DocumentStatusID");

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.DrawingDate).HasMaxLength(100);

                entity.Property(e => e.DrawingDescription).HasMaxLength(100);

                entity.Property(e => e.DrawingFormat).HasMaxLength(100);

                entity.Property(e => e.DrawingIssue).HasMaxLength(100);

                entity.Property(e => e.DrawingLength).HasMaxLength(100);

                entity.Property(e => e.DrawingMark).HasMaxLength(100);

                entity.Property(e => e.DrawingModified).HasMaxLength(100);

                entity.Property(e => e.DrawingNested).HasMaxLength(100);

                entity.Property(e => e.DrawingPrintFlag).HasMaxLength(100);

                entity.Property(e => e.DrawingQuantity).HasMaxLength(100);

                entity.Property(e => e.DrawingRevision).HasMaxLength(100);

                entity.Property(e => e.DrawingScale).HasMaxLength(100);

                entity.Property(e => e.DrawingStamp).HasMaxLength(100);

                entity.Property(e => e.DrawingType).HasMaxLength(100);

                entity.Property(e => e.DrawingViewerStatus).HasMaxLength(100);

                entity.Property(e => e.Ignore).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.Property(e => e.Phase).HasMaxLength(255);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.SessionGuid)
                    .HasMaxLength(255)
                    .HasColumnName("SessionGUID")
                    .HasComment("Identify to the current user");

                entity.Property(e => e.SourceAlternativeName).HasMaxLength(1000);

                entity.Property(e => e.SourceContact).HasMaxLength(400);

                entity.Property(e => e.SourceDescription).HasMaxLength(100);

                entity.Property(e => e.SourceDocumentStatus).HasMaxLength(100);

                entity.Property(e => e.SourceDocumentType).HasMaxLength(100);

                entity.Property(e => e.SourceFileCreatedOn).HasMaxLength(100);

                entity.Property(e => e.SourceFileName).HasMaxLength(1000);

                entity.Property(e => e.SourceFilePath).HasMaxLength(1000);

                entity.Property(e => e.SourceFileSize).HasMaxLength(100);

                entity.Property(e => e.SourceLastModified).HasMaxLength(100);

                entity.Property(e => e.SourceMarkItemGuid)
                    .HasMaxLength(100)
                    .HasColumnName("SourceMarkItemGUID");

                entity.Property(e => e.SourceName).HasMaxLength(1000);

                entity.Property(e => e.SourceRevision).HasMaxLength(100);

                entity.Property(e => e.SourceRevisionOriginal).HasMaxLength(100);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageLocationPath).HasMaxLength(255);

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.DocumentInterfaceImportListings)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DocumentInterfaceImportListing_ChangeOrderID");
            });

            modelBuilder.Entity<DocumentPackage>(entity =>
            {
                entity.ToTable("DocumentPackage");

                entity.HasIndex(e => e.DocumentTransmittalReasonId, "IX_DocumentPackage_FK_DocumentPackage_DocumentTransmittalReason");

                entity.Property(e => e.DocumentPackageId)
                    .HasColumnName("DocumentPackageID")
                    .HasComment("The unique Document Package ID number generated automatically.");

                entity.Property(e => e.Copies)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The number of copies of the Documents");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the document package a description for future reference.");

                entity.Property(e => e.DocumentTransmittalReasonId)
                    .HasColumnName("DocumentTransmittalReasonID")
                    .HasComment("Lookup the Document Transmittal Reasons");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the Document Package.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.DocumentTransmittalReason)
                    .WithMany(p => p.DocumentPackages)
                    .HasForeignKey(d => d.DocumentTransmittalReasonId)
                    .HasConstraintName("FK_DocumentPackage_DocumentTransmittalReason");
            });

            modelBuilder.Entity<DocumentPackageDocument>(entity =>
            {
                entity.ToTable("DocumentPackageDocument");

                entity.HasIndex(e => e.DocumentId, "IX_DocumentPackageDocument_FK_DocumentPackageDocument_Document");

                entity.HasIndex(e => e.DocumentPackageId, "IX_DocumentPackageDocument_FK_DocumentPackageDocument_DocumentPackage");

                entity.Property(e => e.DocumentPackageDocumentId).HasColumnName("DocumentPackageDocumentID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentPackageId)
                    .HasColumnName("DocumentPackageID")
                    .HasComment("~Foreign Key to Document Package");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentPackageDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentPackageDocument_Document");

                entity.HasOne(d => d.DocumentPackage)
                    .WithMany(p => p.DocumentPackageDocuments)
                    .HasForeignKey(d => d.DocumentPackageId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DocumentPackageDocument_DocumentPackage");
            });

            modelBuilder.Entity<DocumentPackageRecipient>(entity =>
            {
                entity.ToTable("DocumentPackageRecipient");

                entity.HasIndex(e => e.ContactId, "IX_DocumentPackageRecipient_FK_DocumentPackageRecipient_Contact");

                entity.HasIndex(e => e.DocumentPackageId, "IX_DocumentPackageRecipient_FK_DocumentPackageRecipient_DocumentPackage");

                entity.Property(e => e.DocumentPackageRecipientId).HasColumnName("DocumentPackageRecipientID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.TeamLeader).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.DocumentPackageRecipients)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentPackageRecipient_Contact");

                entity.HasOne(d => d.DocumentPackage)
                    .WithMany(p => p.DocumentPackageRecipients)
                    .HasForeignKey(d => d.DocumentPackageId)
                    .HasConstraintName("FK_DocumentPackageRecipient_DocumentPackage");
            });

            modelBuilder.Entity<DocumentRevision>(entity =>
            {
                entity.ToTable("DocumentRevision");

                entity.HasIndex(e => new { e.DocumentId, e.PhaseId, e.DocumentRevisionId }, "IX_DocumentRevision_Covering");

                entity.HasIndex(e => new { e.DocumentId, e.DocumentRevisionId, e.PhaseId, e.Latest }, "IX_DocumentRevision_Covering_Latest")
                    .HasFilter("([Latest]=(1))");

                entity.HasIndex(e => e.DocumentId, "IX_DocumentRevision_DocumentID");

                entity.HasIndex(e => e.ChangeOrderId, "IX_DocumentRevision_FK_DocumentRevision_ChangeOrderID");

                entity.HasIndex(e => e.ContactId, "IX_DocumentRevision_FK_DocumentRevision_Contact");

                entity.HasIndex(e => e.PhaseId, "IX_DocumentRevision_FK_DocumentRevision_ContractPhase");

                entity.HasIndex(e => e.DocumentRevisionCodeId, "IX_DocumentRevision_FK_DocumentRevision_DocumentRevisionCode");

                entity.HasIndex(e => e.DocumentStatusId, "IX_DocumentRevision_FK_DocumentRevision_DocumentStatus");

                entity.HasIndex(e => e.DocumentTypeId, "IX_DocumentRevision_FK_DocumentRevision_DocumentType");

                entity.HasIndex(e => e.Latest, "IX_DocumentRevision_Latest");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.AlternativeName).HasMaxLength(500);

                entity.Property(e => e.ApprovalCodeId)
                    .HasColumnName("ApprovalCodeID")
                    .HasComment("The Approval Code of the Document Status");

                entity.Property(e => e.Approved)
                    .HasColumnType("datetime")
                    .HasComment("Document Has been Approved on this Date.");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.Completed)
                    .HasColumnType("datetime")
                    .HasComment("Has this document been completed?");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("Who owns the document");

                entity.Property(e => e.CreatedBy).HasMaxLength(500);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DependantFileName).HasMaxLength(1000);

                entity.Property(e => e.DisciplineId).HasColumnName("DisciplineID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentRevisionCodeId).HasColumnName("DocumentRevisionCodeID");

                entity.Property(e => e.DocumentStatusId).HasColumnName("DocumentStatusID");

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.DrawingDate).HasColumnType("datetime");

                entity.Property(e => e.DrawingDescription).HasMaxLength(100);

                entity.Property(e => e.DrawingFormat).HasMaxLength(100);

                entity.Property(e => e.DrawingIssue).HasColumnType("datetime");

                entity.Property(e => e.DrawingLength).HasMaxLength(100);

                entity.Property(e => e.DrawingMark).HasMaxLength(100);

                entity.Property(e => e.DrawingModified).HasMaxLength(100);

                entity.Property(e => e.DrawingNested).HasMaxLength(100);

                entity.Property(e => e.DrawingPrintFlag).HasMaxLength(100);

                entity.Property(e => e.DrawingQuantity).HasDefaultValueSql("((0))");

                entity.Property(e => e.DrawingRevision).HasMaxLength(100);

                entity.Property(e => e.DrawingScale).HasMaxLength(100);

                entity.Property(e => e.DrawingStamp).HasMaxLength(100);

                entity.Property(e => e.DrawingType).HasMaxLength(100);

                entity.Property(e => e.DrawingViewerStatus).HasMaxLength(100);

                entity.Property(e => e.FileCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(1000);

                entity.Property(e => e.FileUpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.Property(e => e.Latest)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is this the latest revision of the document");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasComment("The Contract Phase of the Document");

                entity.Property(e => e.Received)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Document Has been Received on this Date.");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasComment("This document should be completed by this date.");

                entity.Property(e => e.Reviewed)
                    .HasColumnType("datetime")
                    .HasComment("Document Has been Reviewed on this Date.");

                entity.Property(e => e.RevisedBy).HasMaxLength(500);

                entity.Property(e => e.RevisedOn).HasColumnType("datetime");

                entity.Property(e => e.RevisionDetails).HasMaxLength(1000);

                entity.Property(e => e.SizeId).HasColumnName("SizeID");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasComment("Used to Define the Status of the Revision in imports/updates");

                entity.Property(e => e.UpdatedBy).HasMaxLength(500);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DocumentRevision_ChangeOrderID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_DocumentRevision_Contact");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentRevision_Document");

                entity.HasOne(d => d.DocumentRevisionCode)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.DocumentRevisionCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentRevision_DocumentRevisionCode");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.DocumentStatusId)
                    .HasConstraintName("FK_DocumentRevision_DocumentStatus");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .HasConstraintName("FK_DocumentRevision_DocumentType");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.DocumentRevisions)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_DocumentRevision_ContractPhase");
            });

            modelBuilder.Entity<DocumentRevisionCode>(entity =>
            {
                entity.ToTable("DocumentRevisionCode");

                entity.Property(e => e.DocumentRevisionCodeId)
                    .HasColumnName("DocumentRevisionCodeID")
                    .HasComment("The unique revision ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The Name of the Revision");

                entity.Property(e => e.Sequence)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The sequence of the Revision");

                entity.Property(e => e.System).HasComment("System Value");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentRevisionFile>(entity =>
            {
                entity.ToTable("DocumentRevisionFile");

                entity.HasIndex(e => e.DocumentRevisionId, "IX_DocumentRevisionFile_FK_DocumentRevisionFile_DocumentRevision");

                entity.Property(e => e.DocumentRevisionFileId).HasColumnName("DocumentRevisionFileID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.File).IsRequired();

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.DocumentRevision)
                    .WithMany(p => p.DocumentRevisionFiles)
                    .HasForeignKey(d => d.DocumentRevisionId)
                    .HasConstraintName("FK_DocumentRevisionFile_DocumentRevision");
            });

            modelBuilder.Entity<DocumentStatus>(entity =>
            {
                entity.ToTable("DocumentStatus");

                entity.Property(e => e.DocumentStatusId)
                    .HasColumnName("DocumentStatusID")
                    .HasComment("The unique status type ID number generated automatically.");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the Status Type");

                entity.Property(e => e.IsApproved)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this Document Status linked to the Approval Milestone?");

                entity.Property(e => e.IsCompleted)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this Document Status linked to the Completed Milestone?");

                entity.Property(e => e.IsReviewed)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this Document Status linked to the Reviewed Milestone?");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasComment("Name of the Status Type");

                entity.Property(e => e.Percent).HasComment("The percent that the Status represents");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentTransmittal>(entity =>
            {
                entity.ToTable("DocumentTransmittal");

                entity.Property(e => e.DocumentTransmittalId)
                    .HasColumnName("DocumentTransmittalID")
                    .HasComment("The unique transmittal ID number generated automatically.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("The Contract this is assigned to");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DocumentTransmittalTypeId)
                    .HasColumnName("DocumentTransmittalTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("The Name of this Transmittal");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentTransmittalDocument>(entity =>
            {
                entity.ToTable("DocumentTransmittalDocument");

                entity.HasIndex(e => e.DocumentRevisionId, "IX_DocumentTransmittalDocument_DocumentRevisionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocumentTransmittalRevisionId, "IX_DocumentTransmittalDocument_FK_DocumentTransmittalDocument_DocumentTransmittalRevision");

                entity.HasIndex(e => e.ResendOnRevision, "IX_DocumentTransmittalDocument_ResendOnRevision");

                entity.Property(e => e.DocumentTransmittalDocumentId).HasColumnName("DocumentTransmittalDocumentID");

                entity.Property(e => e.DocumentRevisionId)
                    .HasColumnName("DocumentRevisionID")
                    .HasComment("The Document Revision this is linked to");

                entity.Property(e => e.DocumentTransmittalRevisionId).HasColumnName("DocumentTransmittalRevisionID");

                entity.Property(e => e.ResendOnRevision).HasDefaultValueSql("((1))");

                entity.Property(e => e.ResponseReceivedOn).HasColumnType("datetime");

                entity.HasOne(d => d.DocumentRevision)
                    .WithMany(p => p.DocumentTransmittalDocuments)
                    .HasForeignKey(d => d.DocumentRevisionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTransmittalDocument_DocumentRevision");

                entity.HasOne(d => d.DocumentTransmittalRevision)
                    .WithMany(p => p.DocumentTransmittalDocuments)
                    .HasForeignKey(d => d.DocumentTransmittalRevisionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DocumentTransmittalDocument_DocumentTransmittalRevision");
            });

            modelBuilder.Entity<DocumentTransmittalReason>(entity =>
            {
                entity.ToTable("DocumentTransmittalReason");

                entity.Property(e => e.DocumentTransmittalReasonId)
                    .HasColumnName("DocumentTransmittalReasonID")
                    .HasComment("The unique Transmittal Reason ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the Transmittal Reason a description for future reference.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the Transmittal Reason.");

                entity.Property(e => e.Sequence).HasComment("The sequence the Reasons appear in");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentTransmittalRecipient>(entity =>
            {
                entity.ToTable("DocumentTransmittalRecipient");

                entity.HasIndex(e => e.ContactId, "IX_DocumentTransmittalRecipient_ContactID");

                entity.HasIndex(e => e.DocumentTransmittalRevisionId, "IX_DocumentTransmittalRecipient_FK_DocumentTransmittalRecipient_DocumentTransmittalRevision");

                entity.Property(e => e.DocumentTransmittalRecipientId).HasColumnName("DocumentTransmittalRecipientID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.DocumentTransmittalRevisionId).HasColumnName("DocumentTransmittalRevisionID");

                entity.Property(e => e.RecipientTypeId)
                    .HasColumnName("RecipientTypeID")
                    .HasComment("~1 = To, 2= CC");

                entity.Property(e => e.TeamLeader).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.DocumentTransmittalRecipients)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTransmittalRecipient_Contact");

                entity.HasOne(d => d.DocumentTransmittalRevision)
                    .WithMany(p => p.DocumentTransmittalRecipients)
                    .HasForeignKey(d => d.DocumentTransmittalRevisionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DocumentTransmittalRecipient_DocumentTransmittalRevision");
            });

            modelBuilder.Entity<DocumentTransmittalResponse>(entity =>
            {
                entity.ToTable("DocumentTransmittalResponse");

                entity.HasIndex(e => e.DocumentTransmittalRevisionId, "IX_DocumentTransmittalResponse_FK_DocumentTransmittalResponse_DocumentTransmittalRevision");

                entity.Property(e => e.DocumentTransmittalResponseId).HasColumnName("DocumentTransmittalResponseID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentTransmittalRevisionId).HasColumnName("DocumentTransmittalRevisionID");

                entity.Property(e => e.Response).IsRequired();

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.DocumentTransmittalRevision)
                    .WithMany(p => p.DocumentTransmittalResponses)
                    .HasForeignKey(d => d.DocumentTransmittalRevisionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DocumentTransmittalResponse_DocumentTransmittalRevision");
            });

            modelBuilder.Entity<DocumentTransmittalRevision>(entity =>
            {
                entity.ToTable("DocumentTransmittalRevision");

                entity.HasIndex(e => e.ChangeOrderId, "IX_DocumentTransmittalRevision_FK_DocumentTransmittalRevision_ChangeOrderID");

                entity.HasIndex(e => e.ContactId, "IX_DocumentTransmittalRevision_FK_DocumentTransmittalRevision_Contact");

                entity.HasIndex(e => e.DocumentTransmittalReasonId, "IX_DocumentTransmittalRevision_FK_DocumentTransmittalRevision_DocumentTransmittalReason");

                entity.Property(e => e.DocumentTransmittalRevisionId)
                    .HasColumnName("DocumentTransmittalRevisionID")
                    .HasComment("The unique transmittal revision ID number generated automatically.");

                entity.Property(e => e.AcknowledgeReceivedOn)
                    .HasColumnType("datetime")
                    .HasComment("Date Acknowledgement was Received");

                entity.Property(e => e.Acknowledged)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Has the Transmittal been acknowledged");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("Who is this transmittal from?");

                entity.Property(e => e.Copies)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Number of Copies of this Transmittal");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DocumentRevisionCodeId)
                    .HasColumnName("DocumentRevisionCodeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalReasonId)
                    .HasColumnName("DocumentTransmittalReasonID")
                    .HasComment("Lookup the reason for the Transmittal");

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.Property(e => e.Latest).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the transmittal.");

                entity.Property(e => e.Pending)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is the Transmittal Pending");

                entity.Property(e => e.Priority).HasMaxLength(255);

                entity.Property(e => e.Received)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Has the Transmittal been received");

                entity.Property(e => e.RequestAcknowledgement)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Request Acknowledgement of this Transmittal");

                entity.Property(e => e.ResponseId)
                    .HasColumnName("ResponseID")
                    .HasComment("Response Message");

                entity.Property(e => e.ResponseReceivedOn)
                    .HasColumnType("datetime")
                    .HasComment("The Date a Response was Received on");

                entity.Property(e => e.ResponseRequestBy)
                    .HasColumnType("datetime")
                    .HasComment("The Date a Response is Required By");

                entity.Property(e => e.ResponseRequired)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Require Response for this Transmittal");

                entity.Property(e => e.RevisedBy).HasMaxLength(50);

                entity.Property(e => e.RevisionDetails).HasMaxLength(1000);

                entity.Property(e => e.Sent)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Has the Transmittal been sent");

                entity.Property(e => e.SentOn).HasColumnType("datetime");

                entity.Property(e => e.SentViaId).HasColumnName("SentViaID");

                entity.Property(e => e.Subject).HasMaxLength(255);

                entity.Property(e => e.SupplierRfiNumber).HasMaxLength(255);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.VendorRfiNumber).HasMaxLength(255);

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.DocumentTransmittalRevisions)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DocumentTransmittalRevision_ChangeOrderID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.DocumentTransmittalRevisions)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTransmittalRevision_Contact");

                entity.HasOne(d => d.DocumentTransmittalReason)
                    .WithMany(p => p.DocumentTransmittalRevisions)
                    .HasForeignKey(d => d.DocumentTransmittalReasonId)
                    .HasConstraintName("FK_DocumentTransmittalRevision_DocumentTransmittalReason");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.ToTable("DocumentType");

                entity.Property(e => e.DocumentTypeId)
                    .HasColumnName("DocumentTypeID")
                    .HasComment("The unique document type ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultFileTypeId)
                    .HasColumnName("DefaultFileTypeID")
                    .HasComment("Lookup for the Default Filetype of this Document Type");

                entity.Property(e => e.DefaultSizeId)
                    .HasColumnName("DefaultSizeID")
                    .HasComment("Lookup for Document Size Defaults");

                entity.Property(e => e.DefaultStorageLocation).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the Document Type");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Document Type");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Edifile>(entity =>
            {
                entity.ToTable("EDIFile");

                entity.HasIndex(e => new { e.ListingTypeId, e.DateCancelled, e.DateProcessed, e.SupplierId, e.DateReceived }, "IX_EDIFile_COMPLEX")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.CustomerId, e.SupplierId }, "IX_EDIFile_CustomerSupplier")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DateReceived, e.DateProcessed, e.DateCancelled }, "IX_EDIFile_Dates")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractId, "IX_EDIFile_FK_EDIFile_Contract");

                entity.HasIndex(e => e.NestingResultId, "IX_EDIFile_FK_EDIFile_NestingResult");

                entity.HasIndex(e => e.PurchaseOrderId, "IX_EDIFile_FK_EDIFile_PurchaseOrder");

                entity.HasIndex(e => e.SalesOrderId, "IX_EDIFile_FK_EDIFile_SalesOrder");

                entity.HasIndex(e => e.SupplierId, "IX_EDIFile_FK_EDIFile_Supplier");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileId");

                entity.Property(e => e.CancelledBy).HasMaxLength(100);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateProcessed).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.EdibatchNo)
                    .HasMaxLength(50)
                    .HasColumnName("EDIBatchNo")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.ListingTypeId)
                    .HasColumnName("ListingTypeID")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.ProcessedBy).HasMaxLength(100);

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.ReceivedXml)
                    .HasColumnType("xml")
                    .HasColumnName("ReceivedXML");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SentBy).HasMaxLength(100);

                entity.Property(e => e.SentXml)
                    .HasColumnType("xml")
                    .HasColumnName("SentXML");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_EDIFile_Contract");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_EDIFile_Customer");

                entity.HasOne(d => d.NestingResult)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.NestingResultId)
                    .HasConstraintName("FK_EDIFile_NestingResult");

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .HasConstraintName("FK_EDIFile_PurchaseOrder");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.SalesOrderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EDIFile_SalesOrder");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Edifiles)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_EDIFile_Supplier");
            });

            modelBuilder.Entity<EdifileContract>(entity =>
            {
                entity.ToTable("EDIFileContract");

                entity.HasIndex(e => e.ContractId, "IX_EDIFileContract_FK_EDIFileContract_Contract");

                entity.HasIndex(e => e.EdifileId, "IX_EDIFileContract_FK_EDIFileContract_EDIFile");

                entity.Property(e => e.EdifileContractId)
                    .HasColumnName("EDIFileContractID")
                    .HasComment("Unique EDI File Contract ID automatically generated by system.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("Contract ID this entry refers to.");

                entity.Property(e => e.EdifileId)
                    .HasColumnName("EDIFileID")
                    .HasComment("EDI File ID this entry is linked to.");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.EdifileContracts)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_EDIFileContract_Contract");

                entity.HasOne(d => d.Edifile)
                    .WithMany(p => p.EdifileContracts)
                    .HasForeignKey(d => d.EdifileId)
                    .HasConstraintName("FK_EDIFileContract_EDIFile");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.HasIndex(e => e.CostCodeId, "IX_Employee_FK_Employee_CostCode");

                entity.HasIndex(e => e.FacilityId, "IX_Employee_fk_FacilityEmployees");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.EmployeeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_CostCode");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FacilityEmployees");
            });

            modelBuilder.Entity<EmployeeCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EmployeeCalendar");

                entity.HasIndex(e => e.CalendarId, "IX_EmployeeCalendar_FK_EmployeeCalendar_Calendar");

                entity.HasIndex(e => e.EmployeeId, "IX_EmployeeCalendar_FK_EmployeeCalendar_Employee");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.Calendar)
                    .WithMany()
                    .HasForeignKey(d => d.CalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeCalendar_Calendar");

                entity.HasOne(d => d.Employee)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeCalendar_Employee");
            });

            modelBuilder.Entity<EmployeeHourlyRate>(entity =>
            {
                entity.ToTable("EmployeeHourlyRate");

                entity.HasIndex(e => e.EmployeeId, "IX_EmployeeHourlyRate_FK_EmployeeHourlyRate_Employee");

                entity.HasIndex(e => new { e.EmployeeId, e.Name }, "Unique_Rate")
                    .IsUnique();

                entity.Property(e => e.EmployeeHourlyRateId).HasColumnName("EmployeeHourlyRateID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeHourlyRates)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EmployeeHourlyRate_Employee");
            });

            modelBuilder.Entity<EmployeeProcess>(entity =>
            {
                entity.ToTable("EmployeeProcess");

                entity.HasIndex(e => e.EmployeeId, "IX_EmployeeProcess_FK_EmployeeProcess_Employee");

                entity.HasIndex(e => e.ProductionProcessId, "IX_EmployeeProcess_FK_EmployeeProcess_ProductionProcess");

                entity.Property(e => e.EmployeeProcessId).HasColumnName("EmployeeProcessID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeProcesses)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeProcess_Employee");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.EmployeeProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeProcess_ProductionProcess");
            });

            modelBuilder.Entity<EmployeeTimesheet>(entity =>
            {
                entity.HasKey(e => e.TimesheetId);

                entity.ToTable("EmployeeTimesheet");

                entity.HasIndex(e => e.ContractId, "IX_EmployeeTimesheet_ContractID");

                entity.HasIndex(e => new { e.EmployeeId, e.ContractId }, "IX_EmployeeTimesheet_EmployeeID_ContractID");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_EmployeeTimesheet_ProductionWorkOrderProcess");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_EmployeeTimesheet_ProductionWorkOrderProcessID");

                entity.HasIndex(e => e.WorkOrderId, "IX_EmployeeTimesheet_WorkOrderID");

                entity.Property(e => e.TimesheetId).HasColumnName("TimesheetID");

                entity.Property(e => e.ApprovedBy).HasMaxLength(100);

                entity.Property(e => e.ApprovedOn).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmployeeHourlyRateId).HasColumnName("EmployeeHourlyRateID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExportedBy).HasMaxLength(100);

                entity.Property(e => e.ExportedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StopTime).HasColumnType("datetime");

                entity.Property(e => e.TimesheetEntryId).HasColumnName("TimesheetEntryID");

                entity.Property(e => e.WorkOrderId).HasColumnName("WorkOrderID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeTimesheets)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTimesheet_Employee");

                entity.HasOne(d => d.ProductionWorkOrderProcess)
                    .WithMany(p => p.EmployeeTimesheets)
                    .HasForeignKey(d => d.ProductionWorkOrderProcessId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EmployeeTimesheet_ProductionWorkOrderProcess");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.EmployeeTimesheets)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_EmployeeTimesheet_ProductionWorkOrder");
            });

            modelBuilder.Entity<EmployeeTimesheetArchive>(entity =>
            {
                entity.HasKey(e => e.TimesheetId);

                entity.ToTable("EmployeeTimesheetArchive");

                entity.HasIndex(e => e.EmployeeId, "IX_EmployeeTimesheetArchive_FK_EmployeeTimesheetArchive_Employee");

                entity.Property(e => e.TimesheetId)
                    .ValueGeneratedNever()
                    .HasColumnName("TimesheetID");

                entity.Property(e => e.ApprovedBy).HasMaxLength(100);

                entity.Property(e => e.ApprovedOn).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EmployeeHourlyRateId).HasColumnName("EmployeeHourlyRateID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExportedBy).HasMaxLength(100);

                entity.Property(e => e.ExportedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StopTime).HasColumnType("datetime");

                entity.Property(e => e.TimesheetEntryId).HasColumnName("TimesheetEntryID");

                entity.Property(e => e.WorkOrderId).HasColumnName("WorkOrderID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeTimesheetArchives)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTimesheetArchive_Employee");
            });

            modelBuilder.Entity<Enquiry>(entity =>
            {
                entity.ToTable("Enquiry");

                entity.HasIndex(e => e.CustomerId, "IX_Enquiry_FK_Enquiry_Customer");

                entity.HasIndex(e => e.FacilityId, "IX_Enquiry_FK_Enquiry_Facility");

                entity.Property(e => e.EnquiryId)
                    .HasColumnName("EnquiryID")
                    .HasComment("Unique enquiry ID number");

                entity.Property(e => e.AddressId)
                    .HasMaxLength(100)
                    .HasColumnName("AddressID");

                entity.Property(e => e.ArchitectId)
                    .HasColumnName("ArchitectID")
                    .HasComment("~The architect table foreign key");

                entity.Property(e => e.AsQuoteId)
                    .HasColumnName("AsQuoteID")
                    .HasComment("~The enquiry table foreign key (cyclic link)");

                entity.Property(e => e.BidDate)
                    .HasColumnType("datetime")
                    .HasComment("The final bid date of the enquiry");

                entity.Property(e => e.BuildingTypeId)
                    .HasColumnName("BuildingTypeID")
                    .HasComment("~The building type table foreign key");

                entity.Property(e => e.ContactId)
                    .HasColumnName("ContactID")
                    .HasComment("The Customer Contact");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("~The contract table foreign key");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasComment("~The customer table foreign key");

                entity.Property(e => e.DateWon)
                    .HasColumnType("datetime")
                    .HasComment("The date of the enquiry if won");

                entity.Property(e => e.DeclinedDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the enquiry was declined");

                entity.Property(e => e.DesignFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("The finish of the design");

                entity.Property(e => e.DesignStartDate)
                    .HasColumnType("datetime")
                    .HasComment("The start date of the design");

                entity.Property(e => e.DesignTypeId)
                    .HasColumnName("DesignTypeID")
                    .HasComment("~The design type  table foreign key");

                entity.Property(e => e.DesignerId)
                    .HasColumnName("DesignerID")
                    .HasComment("~The designer table foreign key");

                entity.Property(e => e.EngineerId)
                    .HasColumnName("EngineerID")
                    .HasComment("~The engineer table foreign key");

                entity.Property(e => e.EnquiryAdminLdpenalty).HasColumnName("EnquiryAdminLDPenalty");

                entity.Property(e => e.EnquiryAdminOcipccip).HasColumnName("EnquiryAdminOCIPCCIP");

                entity.Property(e => e.EnquiryCategoryId)
                    .HasColumnName("EnquiryCategoryID")
                    .HasComment("~The client category table foreign key");

                entity.Property(e => e.EnquiryFabNdtinsp).HasColumnName("EnquiryFabNDTInsp");

                entity.Property(e => e.EnquiryFabSbeparticipation).HasColumnName("EnquiryFabSBEParticipation");

                entity.Property(e => e.EnquiryNdaagreement).HasColumnName("EnquiryNDAAgreement");

                entity.Property(e => e.EnquiryReceived)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the enquiry was received");

                entity.Property(e => e.EnquiryScopeBim).HasColumnName("EnquiryScopeBIM");

                entity.Property(e => e.EnquirySize).HasComment("The estimated size of the enquiry");

                entity.Property(e => e.EnquiryStatusId)
                    .HasColumnName("EnquiryStatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EnquiryWeight).HasComment("The estimated weight of the enquiry");

                entity.Property(e => e.EstimateId)
                    .HasColumnName("EstimateID")
                    .HasComment("~The estimate table foreign key");

                entity.Property(e => e.EstimatorId).HasColumnName("EstimatorID");

                entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FinalArea).HasComment("The final estimate area for the enquiry");

                entity.Property(e => e.FinalValue).HasComment("The final estimate value for the enquiry");

                entity.Property(e => e.FinalWeight).HasComment("The final estimate weight for the enquiry.");

                entity.Property(e => e.Location).HasComment("Specify the location of the project.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify the enquiry name.");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the enquiry.");

                entity.Property(e => e.OrderStartDate)
                    .HasColumnType("datetime")
                    .HasComment("Specify the order start date.");

                entity.Property(e => e.PercentReturn).HasComment("Define a return percentage from the project.");

                entity.Property(e => e.Project).HasComment("Give the project a description.");

                entity.Property(e => e.ProjectManagerId).HasColumnName("ProjectManagerID");

                entity.Property(e => e.QuantitySurveyorId)
                    .HasColumnName("QuantitySurveyorID")
                    .HasComment("Select from a list, or enter the proposed quantity surveyor.");

                entity.Property(e => e.SalesAreaId)
                    .HasColumnName("SalesAreaID")
                    .HasComment("Select from list, or enter sales area of project.");

                entity.Property(e => e.SalesmanId).HasColumnName("SalesmanID");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("(3)")
                    .HasComment("Select from list the current status of the tender.");

                entity.Property(e => e.SteelStartDate)
                    .HasColumnType("datetime")
                    .HasComment("Enter the date construction is set to commence.");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.TenderReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("Enter the date the tender was returned.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Enquiries)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Enquiry_Customer");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Enquiries)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Enquiry_Facility");
            });

            modelBuilder.Entity<EnquiryExchangeRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EnquiryExchangeRate");

                entity.HasIndex(e => new { e.AsQuoteId, e.EnquiryId, e.ExchangeRate }, "IX_EnquiryExchangeRate")
                    .IsClustered();

                entity.HasIndex(e => e.AsQuoteId, "IX_EnquiryExchangeRate_AsQuoteID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EnquiryId, "IX_EnquiryExchangeRate_EnquiryID")
                    .HasFillFactor(90);

                entity.Property(e => e.AsQuoteId).HasColumnName("AsQuoteID");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");
            });

            modelBuilder.Entity<EnquiryMeetingNote>(entity =>
            {
                entity.ToTable("EnquiryMeetingNote");

                entity.Property(e => e.EnquiryMeetingNoteId).HasColumnName("EnquiryMeetingNoteID");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.Property(e => e.EnquiryMeetingNoteTypeId).HasColumnName("EnquiryMeetingNoteTypeID");

                entity.Property(e => e.TemplateName).HasMaxLength(255);
            });

            modelBuilder.Entity<EnquiryProjectPerson>(entity =>
            {
                entity.HasKey(e => e.EnquiryProjectPeopleId);

                entity.HasIndex(e => e.ContactId, "IX_EnquiryProjectPeople_FK_EnquiryProjectPeople_Contact");

                entity.HasIndex(e => e.EnquiryId, "IX_EnquiryProjectPeople_FK_EnquiryProjectPeople_Enquiry");

                entity.Property(e => e.EnquiryProjectPeopleId).HasColumnName("EnquiryProjectPeopleID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.EnquiryProjectPeople)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnquiryProjectPeople_Contact");

                entity.HasOne(d => d.Enquiry)
                    .WithMany(p => p.EnquiryProjectPeople)
                    .HasForeignKey(d => d.EnquiryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnquiryProjectPeople_Enquiry");
            });

            modelBuilder.Entity<Errorlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("errorlog");

                entity.HasIndex(e => e.Rw, "IX_ErrorLog_Rw")
                    .IsClustered()
                    .HasFillFactor(71);

                entity.Property(e => e.ErrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Err_Date");

                entity.Property(e => e.ErrorMessage).HasMaxLength(4000);

                entity.Property(e => e.ErrorProcedure).HasMaxLength(200);

                entity.Property(e => e.Operation).HasMaxLength(200);

                entity.Property(e => e.Rw).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Estimate>(entity =>
            {
                entity.ToTable("Estimate");

                entity.HasIndex(e => e.FacilityId, "IX_Estimate_FK_Estimate_Facility");

                entity.Property(e => e.EstimateId)
                    .HasColumnName("EstimateID")
                    .HasComment("The unique estimate ID number generated automatically.");

                entity.Property(e => e.Area).HasComment("The final Estimate Area");

                entity.Property(e => e.CadPath).HasMaxLength(2000);

                entity.Property(e => e.CamPath).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultApplyLineNumber)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~~(1=Off, 2=Automatic By Estimate, 3=Automatic By Subsection, 4=Manual)");

                entity.Property(e => e.DefaultGradeId)
                    .HasColumnName("DefaultGradeID")
                    .HasComment("Select a default grade for the estimate.");

                entity.Property(e => e.DefaultPriceSourceId)
                    .HasColumnName("DefaultPriceSourceID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the estimate a description.");

                entity.Property(e => e.EstimateType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Select the estimate type; take off or bill of quantities.");

                entity.Property(e => e.FabricationRatePerHour)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Enter the fabrication rate per hour for the estimate.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FittingsMode)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Define the fittings mode for the estimate.");

                entity.Property(e => e.FittingsPerWeight)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Add a percentage of the overall estimate weight to account for fittings.");

                entity.Property(e => e.HoursPerWeightValue)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The estimate hours over weight value");

                entity.Property(e => e.Increment).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the estimate.");

                entity.Property(e => e.NextNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.RatePerWeightValue)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The estimate rate over weight value");

                entity.Property(e => e.ShowFittingsWithSections).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StruWalkerPath).HasMaxLength(2000);

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.UsageEnabled).HasComment("Labour Matrix usage setting");

                entity.Property(e => e.User1).HasMaxLength(100);

                entity.Property(e => e.User2).HasMaxLength(100);

                entity.Property(e => e.User3).HasMaxLength(100);

                entity.Property(e => e.User4).HasMaxLength(100);

                entity.Property(e => e.User5).HasMaxLength(100);

                entity.Property(e => e.User6).HasMaxLength(100);

                entity.Property(e => e.Value).HasComment("The final estimate value");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasComment("The final estimate weight");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Estimates)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Estimate_Facility");
            });

            modelBuilder.Entity<EstimateAssembly>(entity =>
            {
                entity.ToTable("EstimateAssembly");

                entity.HasIndex(e => e.FacilityId, "IX_EstimateAssembly_FK_EstimateAssembly_Facility");

                entity.Property(e => e.EstimateAssemblyId).HasColumnName("EstimateAssemblyID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the estimate a description.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the estimate.");

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.EstimateAssemblies)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateAssembly_Facility");
            });

            modelBuilder.Entity<EstimateAssemblyItem>(entity =>
            {
                entity.ToTable("EstimateAssemblyItem");

                entity.HasIndex(e => e.EstimateAssemblyId, "IX_EstimateAssemblyItem_FK_EstimateAssemblyItem_EstimateAssembly");

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.EstimateAssemblyId).HasColumnName("EstimateAssemblyID");

                entity.Property(e => e.EstimateItemUsageId).HasColumnName("EstimateItemUsageID");

                entity.Property(e => e.EstimateUnitId)
                    .HasColumnName("EstimateUnitID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingTypeId).HasColumnName("ItemListingTypeID");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.PriceSourceId).HasColumnName("PriceSourceID");

                entity.Property(e => e.QuantityPerAssembly).HasDefaultValueSql("((1))");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.UseEstimatePercentages)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.EstimateAssembly)
                    .WithMany(p => p.EstimateAssemblyItems)
                    .HasForeignKey(d => d.EstimateAssemblyId)
                    .HasConstraintName("FK_EstimateAssemblyItem_EstimateAssembly");
            });

            modelBuilder.Entity<EstimateAssemblyItemExtra>(entity =>
            {
                entity.ToTable("EstimateAssemblyItemExtra");

                entity.HasIndex(e => e.EstimateAssemblyItemId, "IX_EstimateAssemblyItemExtra_FK_EstimateAssemblyItemExtra_EstimateAssemblyItem");

                entity.HasIndex(e => e.ItemExtraRateId, "IX_EstimateAssemblyItemExtra_FK_EstimateAssemblyItemExtra_EstimateItemExtraRate");

                entity.Property(e => e.EstimateAssemblyItemExtraId).HasColumnName("EstimateAssemblyItemExtraID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.EstimateTypeId)
                    .HasColumnName("EstimateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExtraCalculationTypeId).HasColumnName("ExtraCalculationTypeID");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraTypeId).HasColumnName("ExtraTypeID");

                entity.Property(e => e.ItemExtraRateId).HasColumnName("ItemExtraRateID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecalculateSectionRollTypeId).HasColumnName("RecalculateSectionRollTypeID");

                entity.Property(e => e.Reference).HasMaxLength(200);

                entity.Property(e => e.SectionRollTypeId).HasColumnName("SectionRollTypeID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.EstimateAssemblyItem)
                    .WithMany(p => p.EstimateAssemblyItemExtras)
                    .HasForeignKey(d => d.EstimateAssemblyItemId)
                    .HasConstraintName("FK_EstimateAssemblyItemExtra_EstimateAssemblyItem");

                entity.HasOne(d => d.ItemExtraRate)
                    .WithMany(p => p.EstimateAssemblyItemExtras)
                    .HasForeignKey(d => d.ItemExtraRateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EstimateAssemblyItemExtra_EstimateItemExtraRate");
            });

            modelBuilder.Entity<EstimateAssemblyItemFitting>(entity =>
            {
                entity.ToTable("EstimateAssemblyItemFitting");

                entity.HasIndex(e => e.EstimateAssemblyItemId, "IX_EstimateAssemblyItemFitting_FK_EstimateAssemblyItemFitting_EstimateAssemblyItem");

                entity.Property(e => e.EstimateAssemblyItemFittingId).HasColumnName("EstimateAssemblyItemFittingID");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PriceSourceId)
                    .HasColumnName("PriceSourceID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.EstimateAssemblyItem)
                    .WithMany(p => p.EstimateAssemblyItemFittings)
                    .HasForeignKey(d => d.EstimateAssemblyItemId)
                    .HasConstraintName("FK_EstimateAssemblyItemFitting_EstimateAssemblyItem");
            });

            modelBuilder.Entity<EstimateAssemblyItemFittingProcess>(entity =>
            {
                entity.ToTable("EstimateAssemblyItemFittingProcess");

                entity.HasIndex(e => e.EstimateAssemblyItemFittingId, "IX_EstimateAssemblyItemFittingProcess_FK_EstimateAssemblyItemFittingProcess_EstimateAssemblyItemFitting");

                entity.Property(e => e.EstimateAssemblyItemFittingProcessId).HasColumnName("EstimateAssemblyItemFittingProcessID");

                entity.Property(e => e.EstimateAssemblyItemFittingId).HasColumnName("EstimateAssemblyItemFittingID");

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.EstimateAssemblyItemFitting)
                    .WithMany(p => p.EstimateAssemblyItemFittingProcesses)
                    .HasForeignKey(d => d.EstimateAssemblyItemFittingId)
                    .HasConstraintName("FK_EstimateAssemblyItemFittingProcess_EstimateAssemblyItemFitting");
            });

            modelBuilder.Entity<EstimateAssemblyItemUsageProcess>(entity =>
            {
                entity.ToTable("EstimateAssemblyItemUsageProcess");

                entity.HasIndex(e => e.EstimateAssemblyItemId, "IX_EstimateAssemblyItemUsageProcess_FK_EstimateAssemblyItemUsageProcess_EstimateAssemblyItem");

                entity.Property(e => e.EstimateAssemblyItemUsageProcessId).HasColumnName("EstimateAssemblyItemUsageProcessID");

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.Minutes).HasComputedColumnSql("([Quantity]*[PerUnitMinutes]+[FixedMinutes])", true);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.HasOne(d => d.EstimateAssemblyItem)
                    .WithMany(p => p.EstimateAssemblyItemUsageProcesses)
                    .HasForeignKey(d => d.EstimateAssemblyItemId)
                    .HasConstraintName("FK_EstimateAssemblyItemUsageProcess_EstimateAssemblyItem");
            });

            modelBuilder.Entity<EstimateCadlisting>(entity =>
            {
                entity.ToTable("EstimateCADListing");

                entity.HasIndex(e => e.EstimateId, "IX_EstimateCADListing_FK_EstimateCADListing_Estimate");

                entity.Property(e => e.EstimateCadlistingId).HasColumnName("EstimateCADListingID");

                entity.Property(e => e.CadinterfaceId).HasColumnName("CADInterfaceID");

                entity.Property(e => e.CustomFields).HasColumnType("xml");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.Ignore).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PlateItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.SessionGuid).HasMaxLength(255);

                entity.Property(e => e.SourceArea).HasMaxLength(100);

                entity.Property(e => e.SourceDepth).HasMaxLength(50);

                entity.Property(e => e.SourceEstimateSubSection)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'<SubSection Name>')");

                entity.Property(e => e.SourceGirderBfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFThickness");

                entity.Property(e => e.SourceGirderBfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderBFWidth");

                entity.Property(e => e.SourceGirderDepth).HasMaxLength(100);

                entity.Property(e => e.SourceGirderShape).HasMaxLength(100);

                entity.Property(e => e.SourceGirderTfthickness)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFThickness");

                entity.Property(e => e.SourceGirderTfwidth)
                    .HasMaxLength(100)
                    .HasColumnName("SourceGirderTFWidth");

                entity.Property(e => e.SourceGirderType).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebOffset).HasMaxLength(100);

                entity.Property(e => e.SourceGirderWebThickness).HasMaxLength(100);

                entity.Property(e => e.SourceGrade).HasMaxLength(100);

                entity.Property(e => e.SourceItemCrossReference).HasMaxLength(100);

                entity.Property(e => e.SourceLength)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourcePaintFinish).HasMaxLength(100);

                entity.Property(e => e.SourcePhase).HasMaxLength(100);

                entity.Property(e => e.SourceQuantity)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceReference).HasMaxLength(100);

                entity.Property(e => e.SourceSectionSize).HasMaxLength(100);

                entity.Property(e => e.SourceSectionType).HasMaxLength(100);

                entity.Property(e => e.SourceThickness).HasMaxLength(100);

                entity.Property(e => e.SourceUsage).HasMaxLength(100);

                entity.Property(e => e.SourceWeight).HasMaxLength(100);

                entity.Property(e => e.SourceWidth)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempLength).HasMaxLength(100);

                entity.Property(e => e.UsageId).HasColumnName("UsageID");

                entity.HasOne(d => d.Estimate)
                    .WithMany(p => p.EstimateCadlistings)
                    .HasForeignKey(d => d.EstimateId)
                    .HasConstraintName("FK_EstimateCADListing_Estimate");
            });

            modelBuilder.Entity<EstimateEnquiry>(entity =>
            {
                entity.HasKey(e => new { e.EnquiryId, e.EstimateId })
                    .HasName("PK_EstimateEnquiry_1");

                entity.ToTable("EstimateEnquiry");

                entity.HasIndex(e => e.EstimateId, "IX_EstimateEnquiry_FK_EstimateEnquiry_Estimate");

                entity.Property(e => e.EnquiryId)
                    .HasColumnName("EnquiryID")
                    .HasComment("Enquiry the estimate is linked to");

                entity.Property(e => e.EstimateId)
                    .HasColumnName("EstimateID")
                    .HasComment("Estimate the enquiry is linked to");

                entity.HasOne(d => d.Enquiry)
                    .WithMany(p => p.EstimateEnquiries)
                    .HasForeignKey(d => d.EnquiryId)
                    .HasConstraintName("FK_EstimateEnquiry_Enquiry");

                entity.HasOne(d => d.Estimate)
                    .WithMany(p => p.EstimateEnquiries)
                    .HasForeignKey(d => d.EstimateId)
                    .HasConstraintName("FK_EstimateEnquiry_Estimate");
            });

            modelBuilder.Entity<EstimateExtra>(entity =>
            {
                entity.ToTable("EstimateExtra");

                entity.HasIndex(e => new { e.EstimateSubSectionId, e.ItemListingId }, "IX_EstimateExtra_EstimateSubSectionID");

                entity.HasIndex(e => e.CostCodeId, "IX_EstimateExtra_FK_EstimateExtra_CostCode");

                entity.HasIndex(e => e.EstimateId, "IX_EstimateExtra_FK_EstimateExtra_Estimate");

                entity.HasIndex(e => e.ItemExtraRateId, "IX_EstimateExtra_FK_EstimateExtra_EstimateItemExtraRate");

                entity.HasIndex(e => e.SectionRollTypeId, "IX_EstimateExtra_FK_EstimateExtra_SectionRollType");

                entity.HasIndex(e => e.ItemListingId, "IX_EstimateExtra_ItemListingID");

                entity.Property(e => e.EstimateExtraId)
                    .HasColumnName("EstimateExtraID")
                    .HasComment("Unique Estimate Extra ID number.");

                entity.Property(e => e.Addition)
                    .HasDefaultValueSql("(1)")
                    .HasComment("");

                entity.Property(e => e.Area).HasDefaultValueSql("(0)");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasComment("Cost code the extra should be priced under.");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId)
                    .HasColumnName("EstimateSubSectionID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExtraCalculationTypeId)
                    .HasColumnName("ExtraCalculationTypeID")
                    .HasComment("Type of calculation the Extra is based on.");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraTypeId)
                    .HasColumnName("ExtraTypeID")
                    .HasDefaultValueSql("(1)")
                    .HasComment("Material or Labour");

                entity.Property(e => e.Hours).HasDefaultValueSql("(0)");

                entity.Property(e => e.ItemExtraRateId).HasColumnName("ItemExtraRateID");

                entity.Property(e => e.ItemListingId)
                    .HasColumnName("ItemListingID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Estimate Extra");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.RecalculateSectionRollTypeId).HasColumnName("RecalculateSectionRollTypeID");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReportDescription).HasMaxLength(100);

                entity.Property(e => e.SectionRollTypeId).HasColumnName("SectionRollTypeID");

                entity.Property(e => e.Value).HasDefaultValueSql("(0)");

                entity.Property(e => e.Weight).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.EstimateExtras)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateExtra_CostCode");

                entity.HasOne(d => d.Estimate)
                    .WithMany(p => p.EstimateExtras)
                    .HasForeignKey(d => d.EstimateId)
                    .HasConstraintName("FK_EstimateExtra_Estimate");

                entity.HasOne(d => d.ItemExtraRate)
                    .WithMany(p => p.EstimateExtras)
                    .HasForeignKey(d => d.ItemExtraRateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EstimateExtra_EstimateItemExtraRate");

                entity.HasOne(d => d.SectionRollType)
                    .WithMany(p => p.EstimateExtras)
                    .HasForeignKey(d => d.SectionRollTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateExtra_SectionRollType");
            });

            modelBuilder.Entity<EstimateItemExtraRate>(entity =>
            {
                entity.HasKey(e => e.ItemExtraRateId);

                entity.ToTable("EstimateItemExtraRate");

                entity.Property(e => e.ItemExtraRateId).HasColumnName("ItemExtraRateID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<EstimateItemExtraRateValue>(entity =>
            {
                entity.HasKey(e => new { e.ItemId, e.ItemExtraRateId });

                entity.ToTable("EstimateItemExtraRateValue");

                entity.HasIndex(e => e.ItemExtraRateId, "IX_EstimateItemExtraRateValue_FK_EstimateItemExtraRateValue_EstimateItemExtraRate");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemExtraRateId).HasColumnName("ItemExtraRateID");

                entity.HasOne(d => d.ItemExtraRate)
                    .WithMany(p => p.EstimateItemExtraRateValues)
                    .HasForeignKey(d => d.ItemExtraRateId)
                    .HasConstraintName("FK_EstimateItemExtraRateValue_EstimateItemExtraRate");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.EstimateItemExtraRateValues)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateItemExtraRateValue_Item");
            });

            modelBuilder.Entity<EstimateItemFitting>(entity =>
            {
                entity.ToTable("EstimateItemFitting");

                entity.HasIndex(e => e.CostCodeId, "IX_EstimateItemFitting_FK_EstimateItemFitting_CostCode");

                entity.HasIndex(e => e.FittingId, "IX_EstimateItemFitting_FK_EstimateItemFitting_Fitting");

                entity.HasIndex(e => e.ItemListingId, "IX_EstimateItemFitting_ItemListingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IsLabourUsageFitting, "IX_EstimateItemFitting_LabourUsage");

                entity.Property(e => e.EstimateItemFittingId).HasColumnName("EstimateItemFittingID");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FittingTypeId)
                    .HasColumnName("FittingTypeID")
                    .HasComment("~The type of fitting specifying its source, 0=Library Fitting, 1=Steel Item, 2=Non-Steel Item");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.PriceSourceId)
                    .HasColumnName("PriceSourceID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReviewedRateId).HasColumnName("ReviewedRateID");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.EstimateItemFittings)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateItemFitting_CostCode");

                entity.HasOne(d => d.Fitting)
                    .WithMany(p => p.EstimateItemFittings)
                    .HasForeignKey(d => d.FittingId)
                    .HasConstraintName("FK_EstimateItemFitting_Fitting");

                entity.HasOne(d => d.ItemListing)
                    .WithMany(p => p.EstimateItemFittings)
                    .HasForeignKey(d => d.ItemListingId)
                    .HasConstraintName("FK_EstimateItemFitting_ItemListing");
            });

            modelBuilder.Entity<EstimateItemFittingProcess>(entity =>
            {
                entity.ToTable("EstimateItemFittingProcess");

                entity.HasIndex(e => e.EstimateItemFittingId, "IX_EstimateItemFittingProcess_FK_EstimateItemFittingProcess_EstimateItemFitting");

                entity.HasIndex(e => e.ProcessId, "IX_EstimateItemFittingProcess_FK_EstimateItemFittingProcess_Process");

                entity.Property(e => e.EstimateItemFittingProcessId).HasColumnName("EstimateItemFittingProcessID");

                entity.Property(e => e.EstimateItemFittingId).HasColumnName("EstimateItemFittingID");

                entity.Property(e => e.Minutes).HasComputedColumnSql("([Quantity] * [PerUnitMinutes] + [FixedMinutes])", true);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.EstimateItemFitting)
                    .WithMany(p => p.EstimateItemFittingProcesses)
                    .HasForeignKey(d => d.EstimateItemFittingId)
                    .HasConstraintName("FK_EstimateItemFittingProcess_EstimateItemFitting");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.EstimateItemFittingProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateItemFittingProcess_Process");
            });

            modelBuilder.Entity<EstimateItemUsageProcess>(entity =>
            {
                entity.ToTable("EstimateItemUsageProcess");

                entity.HasIndex(e => e.ProcessId, "IX_EstimateItemUsageProcess_FK_EstimateItemUsageProcess_Process");

                entity.HasIndex(e => e.ItemListingId, "IX_EstimateItemUsageProcess_ItemListingID");

                entity.Property(e => e.EstimateItemUsageProcessId).HasColumnName("EstimateItemUsageProcessID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.Minutes).HasComputedColumnSql("([Quantity] * [PerUnitMinutes] + [FixedMinutes])", true);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.ItemListing)
                    .WithMany(p => p.EstimateItemUsageProcesses)
                    .HasForeignKey(d => d.ItemListingId)
                    .HasConstraintName("FK_EstimateItemUsageProcess_ItemListing");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.EstimateItemUsageProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstimateItemUsageProcess_Process");
            });

            modelBuilder.Entity<EstimateSubSection>(entity =>
            {
                entity.ToTable("EstimateSubSection");

                entity.HasIndex(e => e.EstimateId, "IX_EstimateSubSection_EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.BoqunitId).HasColumnName("BOQUnitID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.Increment).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NextNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.StartNumber).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Estimate)
                    .WithMany(p => p.EstimateSubSections)
                    .HasForeignKey(d => d.EstimateId)
                    .HasConstraintName("FK_EstimateSubSection_Estimate");
            });

            modelBuilder.Entity<EstimateSubsectionSet>(entity =>
            {
                entity.ToTable("EstimateSubsectionSet");

                entity.Property(e => e.EstimateSubsectionSetId).HasColumnName("EstimateSubsectionSetID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SetTypeId)
                    .HasColumnName("SetTypeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<EstimateSubsectionSetItem>(entity =>
            {
                entity.ToTable("EstimateSubsectionSetItem");

                entity.HasIndex(e => e.EstimateSubsectionSetId, "IX_EstimateSubsectionSetItem_FK_EstimateSubsectionSetItem_EstimateSubsectionSet");

                entity.Property(e => e.EstimateSubsectionSetItemId).HasColumnName("EstimateSubsectionSetItemID");

                entity.Property(e => e.BoqunitId).HasColumnName("BOQUnitID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EstimateSubsectionSetId)
                    .HasColumnName("EstimateSubsectionSetID")
                    .HasComment("Unique Subsection Set ID number.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.EstimateSubsectionSet)
                    .WithMany(p => p.EstimateSubsectionSetItems)
                    .HasForeignKey(d => d.EstimateSubsectionSetId)
                    .HasConstraintName("FK_EstimateSubsectionSetItem_EstimateSubsectionSet");
            });

            modelBuilder.Entity<Extra>(entity =>
            {
                entity.ToTable("Extra");

                entity.HasIndex(e => e.CostCodeId, "IX_Extra_FK_Extra_CostCode");

                entity.HasIndex(e => e.ItemExtraRateId, "IX_Extra_FK_Extra_EstimateItemExtraRate");

                entity.HasIndex(e => e.ExtraCalculationTypeId, "IX_Extra_FK_Extra_ExtraCalculationType");

                entity.HasIndex(e => e.FacilityId, "IX_Extra_FK_Extra_Facility");

                entity.HasIndex(e => e.SectionRollTypeId, "IX_Extra_FK_Extra_SectionRollType");

                entity.Property(e => e.ExtraId)
                    .HasColumnName("ExtraID")
                    .HasComment("The unique extra ID number generated automatically.");

                entity.Property(e => e.Addition)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify whether the value of the extra is to be added to or subtracted from the estimate. ");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasComment("Specify the cost code under which the extra will be priced.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the extra a description for future reference.");

                entity.Property(e => e.EstimateTypeId)
                    .HasColumnName("EstimateTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Define the estimate type; take off or bill of quantities.");

                entity.Property(e => e.ExtraCalculationTypeId)
                    .HasColumnName("ExtraCalculationTypeID")
                    .HasComment("Select the type of calculation on which this extra should be based.");

                entity.Property(e => e.ExtraTypeId)
                    .HasColumnName("ExtraTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Define whether the extra is a material or labour extra.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemExtraRateId).HasColumnName("ItemExtraRateID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the extra.");

                entity.Property(e => e.Quantity)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Specify a default quantity for the extra.");

                entity.Property(e => e.RecalculateSectionRollTypeId)
                    .HasColumnName("RecalculateSectionRollTypeID")
                    .HasComment("Select from list the roll type this extra should be applied to.");

                entity.Property(e => e.SectionRollTypeId)
                    .HasColumnName("SectionRollTypeID")
                    .HasComment("Define a roll type for the extra.");

                entity.Property(e => e.UnitPrice)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Specify a rate for the extra.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.Extras)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Extra_CostCode");

                entity.HasOne(d => d.ExtraCalculationType)
                    .WithMany(p => p.Extras)
                    .HasForeignKey(d => d.ExtraCalculationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Extra_ExtraCalculationType");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Extras)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Extra_Facility");

                entity.HasOne(d => d.ItemExtraRate)
                    .WithMany(p => p.Extras)
                    .HasForeignKey(d => d.ItemExtraRateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Extra_EstimateItemExtraRate");

                entity.HasOne(d => d.SectionRollType)
                    .WithMany(p => p.Extras)
                    .HasForeignKey(d => d.SectionRollTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Extra_SectionRollType");
            });

            modelBuilder.Entity<ExtraCalculationType>(entity =>
            {
                entity.ToTable("ExtraCalculationType");

                entity.Property(e => e.ExtraCalculationTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ExtraCalculationTypeID");

                entity.Property(e => e.ExtraTypeId).HasColumnName("ExtraTypeID");

                entity.Property(e => e.HasQty).HasDefaultValueSql("(1)");

                entity.Property(e => e.HasRate).HasDefaultValueSql("(1)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.QtyText).HasMaxLength(50);

                entity.Property(e => e.RateText).HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("(1)");

                entity.Property(e => e.Spname)
                    .HasMaxLength(100)
                    .HasColumnName("SPName");
            });

            modelBuilder.Entity<ExtraGroup>(entity =>
            {
                entity.ToTable("ExtraGroup");

                entity.HasIndex(e => e.FacilityId, "IX_ExtraGroup_FK_ExtraGroup_Facility");

                entity.Property(e => e.ExtraGroupId)
                    .HasColumnName("ExtraGroupID")
                    .HasComment("The unique extra group ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the extra group a description for future reference.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the extra group.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ExtraGroups)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExtraGroup_Facility");
            });

            modelBuilder.Entity<ExtraGroupExtra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExtraGroupExtra");

                entity.HasIndex(e => e.ExtraId, "IX_ExtraGroupExtra_FK_ExtraGroupExtra_Extra");

                entity.HasIndex(e => e.ExtraGroupId, "IX_ExtraGroupExtra_FK_ExtraGroupExtra_ExtraGroup");

                entity.Property(e => e.ExtraGroupId).HasColumnName("ExtraGroupID");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.HasOne(d => d.ExtraGroup)
                    .WithMany()
                    .HasForeignKey(d => d.ExtraGroupId)
                    .HasConstraintName("FK_ExtraGroupExtra_ExtraGroup");

                entity.HasOne(d => d.Extra)
                    .WithMany()
                    .HasForeignKey(d => d.ExtraId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExtraGroupExtra_Extra");
            });

            modelBuilder.Entity<Facility>(entity =>
            {
                entity.ToTable("Facility");

                entity.HasIndex(e => e.CurrencyId, "IX_Facility_FK_Facility_Currency");

                entity.HasIndex(e => e.DefaultCalendarId, "IX_Facility_FK_Facility_DefaultCalendar");

                entity.HasIndex(e => e.DefaultLocationId, "IX_Facility_FK_Factility_DefaultLocationID");

                entity.HasIndex(e => e.FacilityId, "IX_Name")
                    .IsUnique();

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.AngleEngineId)
                    .HasColumnName("AngleEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.CemarkingAccreditation).HasColumnName("CEMarkingAccreditation");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultAssemblyLocationId).HasColumnName("DefaultAssemblyLocationID");

                entity.Property(e => e.DefaultCalendarId).HasColumnName("DefaultCalendarID");

                entity.Property(e => e.DefaultLocationId).HasColumnName("DefaultLocationID");

                entity.Property(e => e.DefaultOffcutLocationId).HasColumnName("DefaultOffcutLocationID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DetailedPlanningNwdays)
                    .HasMaxLength(20)
                    .HasColumnName("DetailedPlanningNWDays");

                entity.Property(e => e.LandscapeTemplateId).HasColumnName("LandscapeTemplateID");

                entity.Property(e => e.LinearEngineId)
                    .HasColumnName("LinearEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlateEngineId)
                    .HasColumnName("PlateEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.PlatePromptEditNest).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlateShowApplication).HasDefaultValueSql("((0))");

                entity.Property(e => e.PortraitTemplateId).HasColumnName("PortraitTemplateID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facility_Currency");

                entity.HasOne(d => d.DefaultCalendar)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.DefaultCalendarId)
                    .HasConstraintName("FK_Facility_DefaultCalendar");

                entity.HasOne(d => d.DefaultLocation)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.DefaultLocationId)
                    .HasConstraintName("FK_Factility_DefaultLocationID");
            });

            modelBuilder.Entity<FacilityCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacilityCalendar");

                entity.HasIndex(e => e.CalendarId, "IX_FacilityCalendar_FK_FacilityCalendar_Calendar");

                entity.HasIndex(e => e.FacilityId, "IX_FacilityCalendar_FK_FacilityCalendar_Facility");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.HasOne(d => d.Calendar)
                    .WithMany()
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_FacilityCalendar_Calendar");

                entity.HasOne(d => d.Facility)
                    .WithMany()
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_FacilityCalendar_Facility");
            });

            modelBuilder.Entity<FacilityProcessWeeklyCapacity>(entity =>
            {
                entity.ToTable("FacilityProcessWeeklyCapacity");

                entity.HasIndex(e => e.FacilityId, "IX_FacilityProcessWeeklyCapacity_FK_FacilityProcessWeeklyCapacity_Facility");

                entity.HasIndex(e => e.ItemLocationId, "IX_FacilityProcessWeeklyCapacity_FK_FacilityProcessWeeklyCapacity_ItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_FacilityProcessWeeklyCapacity_FK_FacilityProcessWeeklyCapacity_ProductionProcess");

                entity.Property(e => e.FacilityProcessWeeklyCapacityId).HasColumnName("FacilityProcessWeeklyCapacityID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityProcessWeeklyCapacities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacilityProcessWeeklyCapacity_Facility");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.FacilityProcessWeeklyCapacities)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacilityProcessWeeklyCapacity_ItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.FacilityProcessWeeklyCapacities)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacilityProcessWeeklyCapacity_ProductionProcess");
            });

            modelBuilder.Entity<FacilityTaskWeeklyCapacity>(entity =>
            {
                entity.ToTable("FacilityTaskWeeklyCapacity");

                entity.HasIndex(e => e.FacilityId, "IX_FacilityTaskWeeklyCapacity_FK_FacilityTaskWeeklyCapacity_Facility");

                entity.HasIndex(e => e.LocationId, "IX_FacilityTaskWeeklyCapacity_FK_FacilityTaskWeeklyCapacity_Location");

                entity.Property(e => e.FacilityTaskWeeklyCapacityId).HasColumnName("FacilityTaskWeeklyCapacityID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.ShiftId).HasColumnName("ShiftID");

                entity.Property(e => e.TaskId).HasColumnName("TaskID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityTaskWeeklyCapacities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacilityTaskWeeklyCapacity_Facility");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.FacilityTaskWeeklyCapacities)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacilityTaskWeeklyCapacity_Location");
            });

            modelBuilder.Entity<Fitting>(entity =>
            {
                entity.ToTable("Fitting");

                entity.HasIndex(e => e.FacilityId, "IX_Fitting_FK_Fitting_Facility");

                entity.HasIndex(e => e.ItemId, "IX_Fitting_FK_Fitting_Item");

                entity.Property(e => e.FittingId)
                    .HasColumnName("FittingID")
                    .HasComment("The unique fitting ID number generated automatically.");

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DepthLengthDimension).HasComment("Define the length of the fitting as an addition to a percentage of the shafts depth.");

                entity.Property(e => e.DepthLengthPercent).HasComment("Define the length of the fitting as a percentage of the shaft depth.");

                entity.Property(e => e.DepthThickDimension).HasComment("Define the thickness of the fitting as an addition to a percentage of the shafts depth.");

                entity.Property(e => e.DepthThickPercent).HasComment("Define the thickness of the fitting as a percentage of the shaft depth.");

                entity.Property(e => e.DepthWidthDimension).HasComment("Define the width of the fitting as an addition to a percentage of the shafts depth.");

                entity.Property(e => e.DepthWidthPercent).HasComment("Define the width of the fitting as a percentage of the shaft depth.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Give the fitting a description.");

                entity.Property(e => e.DimensionalSize).HasDefaultValueSql("(0)");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FixedSizeLength)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Define the length of the fitting by a fixed dimension.");

                entity.Property(e => e.FixedSizeThick)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Define the thickness of the fitting by a fixed dimension.");

                entity.Property(e => e.FixedSizeWidth)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Define the width of the fitting by a fixed dimension.");

                entity.Property(e => e.GradeAsShaft)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Apply same grade to fitting as the shaft.");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LengthLengthDimension).HasComment("Define the length of the fitting as an addition to a percentage of the shafts length.");

                entity.Property(e => e.LengthLengthPercent).HasComment("Define the length of the fitting as a percentage of the shafts length.");

                entity.Property(e => e.LengthThickDimension).HasComment("Define the thickness of the fitting as an addition to a percentage of the shafts length.");

                entity.Property(e => e.LengthThickPercent).HasComment("Define the thickness of the fitting as a percentage of the shafts length.");

                entity.Property(e => e.LengthWidthDimension).HasComment("Define the width of the fitting as an addition to a percentage of the shafts length.");

                entity.Property(e => e.LengthWidthPercent).HasComment("Define the width of the fitting as a percentage of the shafts length.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of fitting");

                entity.Property(e => e.ThickFlangeLengthDimension).HasComment("Define the length of the fitting as an addition to a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickFlangeLengthPercent).HasComment("Define the length of the fitting as a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickFlangeThickDimension).HasComment("Define the thickness of the fitting as an addition to a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickFlangeThickPercent).HasComment("Define the thickness of the fitting as a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickFlangeWidthDimension).HasComment("Define the width of the fitting as an addition to a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickFlangeWidthPercent).HasComment("Define the width of the fitting as a percentage of the shafts flange thickness.");

                entity.Property(e => e.ThickWebLengthDimension).HasComment("Define the length of the fitting as an addition to a percentage of the shafts web width.");

                entity.Property(e => e.ThickWebLengthPercent).HasComment("Define the length of the fitting as a percentage of the shafts web width.");

                entity.Property(e => e.ThickWebThickDimension).HasComment("Define the thickness of the fitting as an addition to a percentage of the shafts web width.");

                entity.Property(e => e.ThickWebThickPercent).HasComment("Define the thickness of the fitting as a percentage of the shafts web width.");

                entity.Property(e => e.ThickWebWidthDimension).HasComment("Define the width of the fitting as an addition to a percentage of the shafts web width.");

                entity.Property(e => e.ThickWebWidthPercent).HasComment("Define the width of the fitting as a percentage of the shafts web width.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.Property(e => e.WidthLengthDimension).HasComment("Define the length of the fitting as an addition to a percentage of the shafts width.");

                entity.Property(e => e.WidthLengthPercent).HasComment("Define the length of the fitting as a percentage of the shafts width.");

                entity.Property(e => e.WidthThickDimension).HasComment("Define the thickness of the fitting as an addition to a percentage of the shafts width.");

                entity.Property(e => e.WidthThickPercent).HasComment("Define the thickness of the fitting as a percentage of the shafts width.");

                entity.Property(e => e.WidthWidthDimension).HasComment("Define the width of the fitting as an addition to a percentage of the shafts width.");

                entity.Property(e => e.WidthWidthPercent).HasComment("Define the width of the fitting as a percentage of the shafts width.");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Fittings)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fitting_Facility");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Fittings)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fitting_Item");
            });

            modelBuilder.Entity<FittingGroup>(entity =>
            {
                entity.ToTable("FittingGroup");

                entity.HasIndex(e => e.FacilityId, "IX_FittingGroup_FK_FittingGroup_Facility");

                entity.Property(e => e.FittingGroupId)
                    .HasColumnName("FittingGroupID")
                    .HasComment("The unique fitting group ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("Give the fitting group a description.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the fitting group.");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FittingGroups)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FittingGroup_Facility");
            });

            modelBuilder.Entity<FittingGroupItem>(entity =>
            {
                entity.ToTable("FittingGroupItem");

                entity.HasIndex(e => e.FittingGroupId, "IX_FittingGroupItem_FK_FittingGroupFittings_FittingGroup");

                entity.Property(e => e.FittingGroupItemId).HasColumnName("FittingGroupItemID");

                entity.Property(e => e.FittingGroupId).HasColumnName("FittingGroupID");

                entity.Property(e => e.FittingItemTypeId)
                    .HasColumnName("FittingItemTypeID")
                    .HasDefaultValueSql("(1)")
                    .HasComment("~1 - Fitting ; 2 - Fitting Group");

                entity.Property(e => e.LineItemId).HasColumnName("LineItemID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.FittingGroup)
                    .WithMany(p => p.FittingGroupItems)
                    .HasForeignKey(d => d.FittingGroupId)
                    .HasConstraintName("FK_FittingGroupFittings_FittingGroup");
            });

            modelBuilder.Entity<FittingProcess>(entity =>
            {
                entity.ToTable("FittingProcess");

                entity.HasIndex(e => e.FittingId, "IX_FittingProcess_FK_FittingProcess_Fitting");

                entity.HasIndex(e => e.ProcessId, "IX_FittingProcess_FK_FittingProcess_Process");

                entity.Property(e => e.FittingProcessId).HasColumnName("FittingProcessID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("UnitTypeID")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Fitting)
                    .WithMany(p => p.FittingProcesses)
                    .HasForeignKey(d => d.FittingId)
                    .HasConstraintName("FK_FittingProcess_Fitting");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.FittingProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FittingProcess_Process");
            });

            modelBuilder.Entity<Grade>(entity =>
            {
                entity.ToTable("Grade");

                entity.HasIndex(e => e.RegionId, "IX_Grade_FK_Grade_Region");

                entity.HasIndex(e => new { e.GradeId, e.Name, e.RegionId }, "IX_Grade_Name");

                entity.Property(e => e.GradeId)
                    .HasColumnName("GradeID")
                    .HasComment("Unique grade ID number");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of grade");

                entity.Property(e => e.Rating).HasDefaultValueSql("(1)");

                entity.Property(e => e.RegionId)
                    .HasColumnName("RegionID")
                    .HasDefaultValueSql("(13)")
                    .HasComment("Region of grade");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Grades)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_Grade_Region");
            });

            modelBuilder.Entity<GradeCrossReference>(entity =>
            {
                entity.ToTable("GradeCrossReference");

                entity.HasIndex(e => new { e.GradeId, e.Name }, "IX_GradeCrossReference_GradeID");

                entity.HasIndex(e => e.Name, "IX_GradeCrossReference_Name")
                    .HasFillFactor(90);

                entity.Property(e => e.GradeCrossReferenceId).HasColumnName("GradeCrossReferenceID");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<HotfixLog>(entity =>
            {
                entity.ToTable("HotfixLog");

                entity.Property(e => e.HotfixLogId).HasColumnName("HotfixLogID");

                entity.Property(e => e.HotfixCode).HasColumnType("xml");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Username).HasMaxLength(100);
            });

            modelBuilder.Entity<InventoryBarcodeListing>(entity =>
            {
                entity.ToTable("InventoryBarcodeListing");

                entity.Property(e => e.InventoryBarcodeListingId).HasColumnName("InventoryBarcodeListingID");

                entity.Property(e => e.ActiveBarcode)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Barcode).HasMaxLength(100);

                entity.Property(e => e.BarcodeInterfaceId).HasColumnName("BarcodeInterfaceID");

                entity.Property(e => e.CuttingPlan).HasColumnName("Cutting Plan");

                entity.Property(e => e.ErrorMessage).HasMaxLength(255);

                entity.Property(e => e.InventoryListingTypeId)
                    .HasColumnName("InventoryListingTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~~(1=Inventory Barcode, 2=Inventory Reconciliation)");

                entity.Property(e => e.Item).HasMaxLength(100);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemLocation).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(255);

                entity.Property(e => e.Process).HasMaxLength(100);

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ScannedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Scanned By")
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.ScannedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Scanned On")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SerialNumber).HasMaxLength(255);

                entity.Property(e => e.SessionGuid)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Valid)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.ToTable("Item");

                entity.HasIndex(e => e.CostCodeId, "IX_Item_FK_Item_CostCode");

                entity.HasIndex(e => e.GradeId, "IX_Item_FK_Item_Grade");

                entity.HasIndex(e => e.ItemTypeId, "IX_Item_FK_Item_ItemType");

                entity.HasIndex(e => e.RegionId, "IX_Item_FK_Item_Region");

                entity.HasIndex(e => e.DefaultCostUnitId, "IX_Item_FK_Item_Unit");

                entity.HasIndex(e => e.DefaultSellUnitId, "IX_Item_FK_Item_Unit1");

                entity.HasIndex(e => e.DefaultInventoryUnitId, "IX_Item_FK_Item_Unit_Inventory");

                entity.HasIndex(e => new { e.ItemId, e.GradeId }, "IX_Item_ItemID_GradeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemId, e.ItemTypeId }, "IX_Item_ItemID_ItemTypeID");

                entity.HasIndex(e => new { e.ItemId, e.Name }, "IX_Item_ItemID_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SectionTypeId, "IX_Item_ItemSectionType");

                entity.HasIndex(e => new { e.Name, e.SectionTypeId }, "IX_Item_Name")
                    .IsUnique()
                    .HasFillFactor(80);

                entity.HasIndex(e => e.SectionSize, "IX_Item_SectionSize")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The unique item ID number generated automatically.");

                entity.Property(e => e.AltName).HasMaxLength(255);

                entity.Property(e => e.BackFlush)
                    .HasDefaultValueSql("((0))")
                    .HasComment("");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify the cost code under which the item will be priced.");

                entity.Property(e => e.CreateProductionWorkOrder)
                    .HasDefaultValueSql("((0))")
                    .HasComment("");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultCostUnitId)
                    .HasColumnName("DefaultCostUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify the price unit that will be applied as default to all suppliers");

                entity.Property(e => e.DefaultCostUnitPrice).HasComment("Specify the price that will be applied as default to all suppliers");

                entity.Property(e => e.DefaultInventoryUnitId)
                    .HasColumnName("DefaultInventoryUnitID")
                    .HasComment("The default price unit at which this Item is stored in Inventory.");

                entity.Property(e => e.DefaultSellUnitId)
                    .HasColumnName("DefaultSellUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify the price unit that will be applied as default to all customers");

                entity.Property(e => e.DefaultSellUnitPrice).HasComment("Specify the price that will be applied as default to all customers");

                entity.Property(e => e.Density).HasComment("Specify the density of the steel item.");

                entity.Property(e => e.Description)
                    .HasMaxLength(4000)
                    .HasComment("Give the item a description.");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasComment("Specify a date from when the item is available.");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasComment("Specify a date at which the item expires.");

                entity.Property(e => e.GirderShapeId).HasColumnName("GirderShapeID");

                entity.Property(e => e.GirderTypeId).HasColumnName("GirderTypeID");

                entity.Property(e => e.GradeId)
                    .HasColumnName("GradeID")
                    .HasComment("Specify a steel grade for the steel item.");

                entity.Property(e => e.ItemClassId)
                    .HasColumnName("ItemClassID")
                    .HasComment("Specify an item class for the item.");

                entity.Property(e => e.ItemGroupId)
                    .HasColumnName("ItemGroupID")
                    .HasComment("Specify an item group for the item.");

                entity.Property(e => e.ItemPartNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ItemTypeId)
                    .HasColumnName("ItemTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Select whether this item is a steel or non steel item.");

                entity.Property(e => e.Manufactured).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasMaxLength(3000)
                    .HasComment("Enter any additional notes you wish to add concerning the item.");

                entity.Property(e => e.ProductionTypeId)
                    .HasColumnName("ProductionTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.ScrapCostCodeId)
                    .HasColumnName("ScrapCostCodeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ScrapLimit).HasDefaultValueSql("((0))");

                entity.Property(e => e.SectionSize)
                    .HasMaxLength(100)
                    .HasComment("Enter the section size of the steel item.");

                entity.Property(e => e.SectionTypeId)
                    .HasColumnName("SectionTypeID")
                    .HasComment("Define the section type of the steel item.");

                entity.Property(e => e.Shape).HasMaxLength(50);

                entity.Property(e => e.SurfaceArea).HasComment("Define the surface area of the steel item.");

                entity.Property(e => e.TrackInventoryLevel).HasDefaultValueSql("((4))");

                entity.Property(e => e.TrackNumberMask)
                    .HasMaxLength(50)
                    .HasComment("For date descriptions use [year],[yy],[quarter],[qq],[month],[mm],[dayofyear],[dy], for Item descriptions use %item%,%section%,%sectionsize%,%grade%");

                entity.Property(e => e.TrackingTypeId)
                    .HasColumnName("TrackingTypeID")
                    .HasDefaultValueSql("((3))")
                    .HasComment("Specifies if the Item must be tracked in the inventory system");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasComment("Weight per (EA, Area, Linear)");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_CostCode");

                entity.HasOne(d => d.DefaultCostUnit)
                    .WithMany(p => p.ItemDefaultCostUnits)
                    .HasForeignKey(d => d.DefaultCostUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_Unit");

                entity.HasOne(d => d.DefaultInventoryUnit)
                    .WithMany(p => p.ItemDefaultInventoryUnits)
                    .HasForeignKey(d => d.DefaultInventoryUnitId)
                    .HasConstraintName("FK_Item_Unit_Inventory");

                entity.HasOne(d => d.DefaultSellUnit)
                    .WithMany(p => p.ItemDefaultSellUnits)
                    .HasForeignKey(d => d.DefaultSellUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_Unit1");

                entity.HasOne(d => d.Grade)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.GradeId)
                    .HasConstraintName("FK_Item_Grade");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemTypeId)
                    .HasConstraintName("FK_Item_ItemType");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_Item_Region");

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.SectionTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Item_SectionType");
            });

            modelBuilder.Entity<ItemClassification>(entity =>
            {
                entity.ToTable("ItemClassification");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.AltName)
                    .HasMaxLength(100)
                    .HasComment("Alternative Name of the classification");

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the classification");

                entity.Property(e => e.IsUsable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Can this item be used in stock transactions");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of classification");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ItemCrossReference>(entity =>
            {
                entity.ToTable("ItemCrossReference");

                entity.HasIndex(e => new { e.ItemId, e.ItemCrossReferenceId }, "IX_ItemCrossReference_ItemID");

                entity.HasIndex(e => new { e.Name, e.ItemId, e.CrossReferenceTypeId }, "IX_ItemCrossReference_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemId, e.CrossReferenceTypeId, e.Name, e.RnU }, "IX_ItemCrossReference_Unique")
                    .IsUnique();

                entity.Property(e => e.ItemCrossReferenceId).HasColumnName("ItemCrossReferenceID");

                entity.Property(e => e.CrossReferenceTypeId)
                    .HasColumnName("CrossReferenceTypeID")
                    .HasDefaultValueSql("(1)")
                    .HasComment("Select the cross reference type; Cad Interface or Supplier.");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .HasComment("Enter any notes you wish to add to the cross reference.");

                entity.Property(e => e.RnU)
                    .HasColumnName("RN_U")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemCrossReferences)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemCrossReference_Item");
            });

            modelBuilder.Entity<ItemCustomer>(entity =>
            {
                entity.ToTable("ItemCustomer");

                entity.HasIndex(e => e.CustomerId, "IX_ItemCustomer_FK_ItemCustomer_Customer");

                entity.HasIndex(e => e.TaxCodeId, "IX_ItemCustomer_FK_ItemCustomer_TaxCode");

                entity.HasIndex(e => e.PriceUnitId, "IX_ItemCustomer_FK_ItemCustomer_Unit");

                entity.HasIndex(e => e.CustomerId, "IX_ItemCustomer_FK_ItemCustomers_Customer");

                entity.HasIndex(e => e.ItemId, "IX_ItemCustomer_FK_ItemCustomers_Item");

                entity.Property(e => e.ItemCustomerId).HasColumnName("ItemCustomerID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The currency used for the unit price");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerPartCode).HasMaxLength(50);

                entity.Property(e => e.CustomerPartGrade).HasMaxLength(50);

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasComment("The part number that the customer uses for the item");

                entity.Property(e => e.CustomerPartSize).HasMaxLength(50);

                entity.Property(e => e.Discount).HasComment("The default discount percent when ordering the item");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.PriceUnitId)
                    .HasColumnName("PriceUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The unit to use when determining the price of the item");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("The tax code that must be used when ordering this item");

                entity.Property(e => e.UnitPrice).HasComment("The unit price of the item");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ItemCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemCustomer_Customer");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemCustomers)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemCustomers_Item");

                entity.HasOne(d => d.PriceUnit)
                    .WithMany(p => p.ItemCustomers)
                    .HasForeignKey(d => d.PriceUnitId)
                    .HasConstraintName("FK_ItemCustomer_Unit");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.ItemCustomers)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_ItemCustomer_TaxCode");
            });

            modelBuilder.Entity<ItemFinish>(entity =>
            {
                entity.ToTable("ItemFinish");

                entity.HasIndex(e => e.Name, "IX_ItemFinish_Name_Unique")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ItemFinishId).HasColumnName("ItemFinishID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ItemFinishCoat>(entity =>
            {
                entity.ToTable("ItemFinishCoat");

                entity.HasIndex(e => e.ItemFinishId, "IX_ItemFinishCoat_FK__ItemFinish_ItemFinishID");

                entity.Property(e => e.ItemFinishCoatId).HasColumnName("ItemFinishCoatID");

                entity.Property(e => e.CoatNameId).HasColumnName("CoatNameID");

                entity.Property(e => e.ColourId).HasColumnName("ColourID");

                entity.Property(e => e.DescriptionId).HasColumnName("DescriptionID");

                entity.Property(e => e.Dftid).HasColumnName("DFTID");

                entity.Property(e => e.DryTimeId).HasColumnName("DryTimeID");

                entity.Property(e => e.ItemFinishId).HasColumnName("ItemFinishID");

                entity.Property(e => e.MeasureId).HasColumnName("MeasureID");

                entity.Property(e => e.PackSizeId).HasColumnName("PackSizeID");

                entity.Property(e => e.TheoreticalCoatingId).HasColumnName("TheoreticalCoatingID");

                entity.Property(e => e.ThinnerId).HasColumnName("ThinnerID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.Wftid).HasColumnName("WFTID");

                entity.HasOne(d => d.ItemFinish)
                    .WithMany(p => p.ItemFinishCoats)
                    .HasForeignKey(d => d.ItemFinishId)
                    .HasConstraintName("FK__ItemFinish_ItemFinishID");
            });

            modelBuilder.Entity<ItemFinishPreparation>(entity =>
            {
                entity.ToTable("ItemFinishPreparation");

                entity.HasIndex(e => e.ItemFinishId, "IX_ItemFinishPreparation_FK_ItemFinishPreparation_ItemFinish");

                entity.Property(e => e.ItemFinishPreparationId).HasColumnName("ItemFinishPreparationID");

                entity.Property(e => e.DescriptionId).HasColumnName("DescriptionID");

                entity.Property(e => e.ItemFinishId).HasColumnName("ItemFinishID");

                entity.Property(e => e.PreparationId).HasColumnName("PreparationID");

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.HasOne(d => d.ItemFinish)
                    .WithMany(p => p.ItemFinishPreparations)
                    .HasForeignKey(d => d.ItemFinishId)
                    .HasConstraintName("FK_ItemFinishPreparation_ItemFinish");
            });

            modelBuilder.Entity<ItemInventory>(entity =>
            {
                entity.ToTable("ItemInventory");

                entity.HasIndex(e => new { e.ContractMarkPhaseLotItemId, e.MarkItemId }, "IX_ItemInventory_CMPLIID");

                entity.HasIndex(e => e.LockItemInventoryTransId, "IX_ItemInventory_FK_Inventory_LockingTransactionID");

                entity.HasIndex(e => e.UnitId, "IX_ItemInventory_FK_Inventory_Unit");

                entity.HasIndex(e => e.MarkItemId, "IX_ItemInventory_FK_ItemInventory_ContractMarkItem");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ItemInventory_FK_ItemInventory_ContractMarkPhaseLot");

                entity.HasIndex(e => e.CurrencyId, "IX_ItemInventory_FK_ItemInventory_Currency");

                entity.HasIndex(e => e.FacilityId, "IX_ItemInventory_FK_ItemInventory_Facility");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_ItemInventory_FK_ItemInventory_ItemInventoryShape");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemInventory_ItemClassificationID");

                entity.HasIndex(e => e.MarkId, "IX_ItemInventory_MarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_ItemInventory_Property");

                entity.HasIndex(e => new { e.ItemId, e.MarkItemId }, "IX_Iteminventory_ItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemLocationId, "IX_Iteminventory_LocationYardRef")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemReservationId, "IX_Iteminventory_Reservation")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.YardReference, "IX_Iteminventory_YardReference")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemInventoryId)
                    .HasColumnName("ItemInventoryID")
                    .HasComment("Unique ID for the inventory record");

                entity.Property(e => e.Area)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The area of the item held in inventory");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemClassificationId)
                    .HasColumnName("ItemClassificationID")
                    .HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The Item ID of the inventory item");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The location where the item is held");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.Length)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The length of the bar held in inventory");

                entity.Property(e => e.LockItemInventoryTransId)
                    .HasColumnName("LockItemInventoryTransID")
                    .HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.Locked).HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId)
                    .HasColumnName("MarkItemID")
                    .HasComment("~The Mark Item ID to define the Mark where this item will be used");

                entity.Property(e => e.Quantity).HasComment("The quantity that is kept for this inventory record");

                entity.Property(e => e.TmpKey).HasColumnName("tmpKey");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasComment("The unit for the inventory item");

                entity.Property(e => e.UnitPrice).HasComment("The unit price of the item");

                entity.Property(e => e.Value).HasComment("The value of the item in the system currency");

                entity.Property(e => e.Weight)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The weight of the item held in inventory");

                entity.Property(e => e.Width)
                    .HasDefaultValueSql("((0))")
                    .HasComment("The width of the item held in inventory");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasComment("The yard reference of the inventory");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ItemInventory_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ItemInventory_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_ItemInventory_Currency");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ItemInventory_Facility");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .HasConstraintName("FK_Inventory_ItemClassification");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_Inventory_Item");

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventory_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_ItemInventory_ItemInventoryShape");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventory_Location");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_ItemInventory_ItemReservation");

                entity.HasOne(d => d.LockItemInventoryTrans)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.LockItemInventoryTransId)
                    .HasConstraintName("FK_Inventory_LockingTransactionID");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ItemInventory_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ItemInventory_ContractMarkItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemInventories)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventory_Unit");
            });

            modelBuilder.Entity<ItemInventoryArchive>(entity =>
            {
                entity.HasKey(e => e.ItemInventoryId);

                entity.ToTable("ItemInventoryArchive");

                entity.HasIndex(e => e.MarkId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ContractMark");

                entity.HasIndex(e => e.MarkItemId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ContractMarkItem");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ContractMarkPhaseLot");

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ContractMarkPhaseLotItem");

                entity.HasIndex(e => e.ItemId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_Item");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ItemClassification");

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ItemInventoryProperty");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ItemInventoryShape");

                entity.HasIndex(e => e.ItemReservationId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_ItemReservation");

                entity.HasIndex(e => e.ItemLocationId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_Location");

                entity.HasIndex(e => e.LockItemInventoryTransId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_LockingTransactionID");

                entity.HasIndex(e => e.UnitId, "IX_ItemInventoryArchive_FK_ItemInventoryArchive_Unit");

                entity.Property(e => e.ItemInventoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemInventoryID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ItemInventoryArchive_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ItemInventoryArchive_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryArchive_ItemClassification");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemInventoryArchive_Item");

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryArchive_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_ItemInventoryArchive_ItemInventoryShape");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryArchive_Location");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_ItemInventoryArchive_ItemReservation");

                entity.HasOne(d => d.LockItemInventoryTrans)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.LockItemInventoryTransId)
                    .HasConstraintName("FK_ItemInventoryArchive_LockingTransactionID");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ItemInventoryArchive_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ItemInventoryArchive_ContractMarkItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemInventoryArchives)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryArchive_Unit");
            });

            modelBuilder.Entity<ItemInventoryExchangeLink>(entity =>
            {
                entity.HasKey(e => new { e.TransActionLineId, e.ExchangedTransActionLineId });

                entity.ToTable("ItemInventoryExchangeLink");

                entity.Property(e => e.TransActionLineId)
                    .HasColumnName("TransActionLineID")
                    .HasComment("This can link on ItemInventoryTransactionLine Or PurchaseOrderItemExchange");

                entity.Property(e => e.ExchangedTransActionLineId)
                    .HasColumnName("ExchangedTransActionLineID")
                    .HasComment("This can link on ItemInventoryTransactionLine Or PurchaseOrderItemExchange");

                entity.Property(e => e.ExchangedTransActionLineTypeId)
                    .HasColumnName("ExchangedTransActionLineTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TransActionLineTypeId)
                    .HasColumnName("TransActionLineTypeID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ItemInventoryGroupProperty>(entity =>
            {
                entity.ToTable("ItemInventoryGroupProperty");

                entity.HasIndex(e => e.ItemInventoryId, "IX_ItemInventoryGroupProperty_ItemInventoryID");

                entity.Property(e => e.ItemInventoryGroupPropertyId).HasColumnName("ItemInventoryGroupPropertyID");

                entity.Property(e => e.ContractIds).HasColumnName("ContractIDs");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.HasOne(d => d.ItemInventory)
                    .WithMany(p => p.ItemInventoryGroupProperties)
                    .HasForeignKey(d => d.ItemInventoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ItemInventoryGroupProperty_ItemInventoryID");
            });

            modelBuilder.Entity<ItemInventoryHistory>(entity =>
            {
                entity.ToTable("ItemInventoryHistory");

                entity.HasIndex(e => e.DateLogged, "IX_ItemInventoryHistory_DateLogged")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemInventoryId, e.FacilityId }, "IX_ItemInventoryHistory_FacilityID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemInventoryHistoryId, e.ItemInventoryId, e.DateLogged }, "IX_ItemInventoryHistory_ItemInventoryHistoryID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Quantity, e.DateLogged }, "IX_ItemInventoryHistory_Quantity")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemInventoryHistoryId).HasColumnName("ItemInventoryHistoryID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.DateLogged)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");
            });

            modelBuilder.Entity<ItemInventoryHistoryArchive>(entity =>
            {
                entity.HasKey(e => e.ItemInventoryHistoryId)
                    .HasName("PK__ItemInve__4F685B5621282E8F");

                entity.ToTable("ItemInventoryHistoryArchive");

                entity.Property(e => e.ItemInventoryHistoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemInventoryHistoryID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.DateLogged).HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");
            });

            modelBuilder.Entity<ItemInventoryInstance>(entity =>
            {
                entity.ToTable("ItemInventoryInstance");

                entity.HasIndex(e => e.ContractMarkInstanceId, "IX_ItemInventoryInstance_FK_ItemInventoryInstance_ContractMarkInstanceID");

                entity.HasIndex(e => e.ContractMarkItemInstanceId, "IX_ItemInventoryInstance_FK_ItemInventoryInstance_ContractMarkItemInstanceID");

                entity.HasIndex(e => e.LockItemInventoryTransId, "IX_ItemInventoryInstance_FK_ItemInventoryInstance_LockingTransactionID");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemInventoryInstance_ItemClassificationID");

                entity.HasIndex(e => e.ItemInventoryId, "IX_ItemInventoryInstance_ItemInventoryID");

                entity.HasIndex(e => e.ItemReservationId, "IX_ItemInventoryInstance_ItemReservationID");

                entity.HasIndex(e => new { e.ItemClassificationId, e.LockItemInventoryTransId }, "IX_ItemInventoryInstance_LockItemInventoryTransID");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ItemInventoryInstance_ProductionWorkOrderContract")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemInventoryId, e.Instance }, "UC_ItemInventoryInstance_Instance")
                    .IsUnique();

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "UC_ItemInventoryInstance_ItemInventoryTrackingGuidID")
                    .IsUnique();

                entity.Property(e => e.ItemInventoryInstanceId).HasColumnName("ItemInventoryInstanceID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ItemClassificationId)
                    .HasColumnName("ItemClassificationID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ContractMarkInstance)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ContractMarkInstanceId)
                    .HasConstraintName("FK_ItemInventoryInstance_ContractMarkInstanceID");

                entity.HasOne(d => d.ContractMarkItemInstance)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ContractMarkItemInstanceId)
                    .HasConstraintName("FK_ItemInventoryInstance_ContractMarkItemInstanceID");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryInstance_ItemClassification");

                entity.HasOne(d => d.ItemInventory)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ItemInventoryId)
                    .HasConstraintName("KF_ItemInventoryInstance_ItemInventoryID");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithOne(p => p.ItemInventoryInstance)
                    .HasForeignKey<ItemInventoryInstance>(d => d.ItemInventoryTrackingGuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryInstance_ItemInventoryTrackingGuidID");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("KF_ItemInventoryInstance_ItemReservationID");

                entity.HasOne(d => d.LockItemInventoryTrans)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.LockItemInventoryTransId)
                    .HasConstraintName("FK_ItemInventoryInstance_LockingTransactionID");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ItemInventoryInstances)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ItemInventoryInstance_ProductionWorkOrderContractID");
            });

            modelBuilder.Entity<ItemInventoryInstanceHistory>(entity =>
            {
                entity.ToTable("ItemInventoryInstanceHistory");

                entity.HasIndex(e => e.DateLogged, "IX_ItemInventoryInstanceHistory_DateLogged")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemInventoryInstanceHistoryId, e.ItemInventoryHistoryId, e.ItemInventoryInstanceId, e.ItemInventoryId, e.DateLogged }, "IX_ItemInventoryInstanceHistory_ItemInventoryInstanceHistoryID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_ItemInventoryInstanceHistory_ItemInventoryTrackingGuidID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemInventoryHistoryId, e.ItemInventoryInstanceId, e.ItemInventoryTrackingGuidId, e.ItemTrackingNumberId, e.MultiContract }, "IX_ItemInventoryInstanceHistory_ItemInventoryTrackingNumber")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemInventoryInstanceHistoryId).HasColumnName("ItemInventoryInstanceHistoryID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.DateLogged)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryHistoryId).HasColumnName("ItemInventoryHistoryID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryInstanceId).HasColumnName("ItemInventoryInstanceID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTrackingNumberId).HasColumnName("ItemTrackingNumberID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ItemInventoryHistory)
                    .WithMany(p => p.ItemInventoryInstanceHistories)
                    .HasForeignKey(d => d.ItemInventoryHistoryId)
                    .HasConstraintName("FK_ItemInventoryInstanceHistory_ItemInventoryHistoryID");
            });

            modelBuilder.Entity<ItemInventoryInstanceHistoryArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemInventoryInstanceHistoryArchive");

                entity.HasIndex(e => e.ItemInventoryHistoryId, "IX_ItemInventoryInstanceHistoryArchive_FK_ItemInventoryInstanceHistoryArchive_ItemInventoryHistoryID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.DateLogged).HasColumnType("datetime");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryHistoryId).HasColumnName("ItemInventoryHistoryID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryInstanceHistoryId).HasColumnName("ItemInventoryInstanceHistoryID");

                entity.Property(e => e.ItemInventoryInstanceId).HasColumnName("ItemInventoryInstanceID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTrackingNumberId).HasColumnName("ItemTrackingNumberID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ItemInventoryHistory)
                    .WithMany()
                    .HasForeignKey(d => d.ItemInventoryHistoryId)
                    .HasConstraintName("FK_ItemInventoryInstanceHistoryArchive_ItemInventoryHistoryID");
            });

            modelBuilder.Entity<ItemInventoryProperty>(entity =>
            {
                entity.ToTable("ItemInventoryProperty");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.CadweightArea)
                    .HasColumnName("CADWeightArea")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CastReference).HasMaxLength(255);

                entity.Property(e => e.Cemark)
                    .HasMaxLength(255)
                    .HasColumnName("CEMark");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CountryOfOrigin).HasMaxLength(255);

                entity.Property(e => e.MillOrigin).HasMaxLength(255);

                entity.Property(e => e.PurchaseOrder).HasMaxLength(255);

                entity.Property(e => e.Receipt).HasMaxLength(255);

                entity.Property(e => e.ReceivedFromMark).HasMaxLength(255);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(255);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ItemInventoryProperties)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_ItemInventoryProperty_Supplier");
            });

            modelBuilder.Entity<ItemInventoryShape>(entity =>
            {
                entity.ToTable("ItemInventoryShape");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.Chksum)
                    .HasColumnName("CHKSUM")
                    .HasComputedColumnSql("(binary_checksum([Shape]))", true);

                entity.Property(e => e.Shape).IsRequired();
            });

            modelBuilder.Entity<ItemInventoryTestCertMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemInventoryTestCertMap");

                entity.HasIndex(e => new { e.ItemInventoryId, e.ItemSiteInventoryId }, "IX_ItemInventoryTestCertMap")
                    .IsClustered();

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.TestCertificateName).HasColumnName("Test Certificate Name");
            });

            modelBuilder.Entity<ItemInventoryTrackingGuid>(entity =>
            {
                entity.ToTable("ItemInventoryTrackingGuid");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.TrackingGuid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ItemInventoryTrackingGuidLink>(entity =>
            {
                entity.ToTable("ItemInventoryTrackingGuidLink");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidIdOut, "IX_ItemInventoryTrackingGuidLink_FK_ItemInventoryTrackingGuidLink_ItemInventoryTrackingGuidID_In");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidIdOut, "IX_ItemInventoryTrackingGuidLink_FK_ItemInventoryTrackingGuidLink_ItemInventoryTrackingGuidID_Out");

                entity.Property(e => e.ItemInventoryTrackingGuidLinkId).HasColumnName("ItemInventoryTrackingGuidLinkID");

                entity.Property(e => e.ItemInventoryTrackingGuidIdIn).HasColumnName("ItemInventoryTrackingGuidID_In");

                entity.Property(e => e.ItemInventoryTrackingGuidIdOut).HasColumnName("ItemInventoryTrackingGuidID_Out");

                entity.HasOne(d => d.ItemInventoryTrackingGuidIdOutNavigation)
                    .WithMany(p => p.ItemInventoryTrackingGuidLinks)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidIdOut)
                    .HasConstraintName("FK_ItemInventoryTrackingGuidLink_ItemInventoryTrackingGuidID_In");
            });

            modelBuilder.Entity<ItemInventoryTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("PK_ItemInventoryTransAction");

                entity.ToTable("ItemInventoryTransaction");

                entity.HasIndex(e => e.ContractId, "IX_ItemInventoryTransaction_ContractID");

                entity.HasIndex(e => e.Date, "IX_ItemInventoryTransaction_Date")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SalesOrderId, "IX_ItemInventoryTransaction_FK_ItemInventoryTransaction_SalesOrder");

                entity.HasIndex(e => e.UnitId, "IX_ItemInventoryTransaction_FK_ItemInventoryTransaction_Unit");

                entity.HasIndex(e => e.ItemTransactionTypeId, "IX_ItemInventoryTransaction_ItemTransactionTypeID");

                entity.HasIndex(e => e.Name, "IX_ItemInventoryTransaction_Name")
                    .HasFillFactor(90);

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.AdjustmentTypeId)
                    .HasColumnName("AdjustmentTypeID")
                    .HasComment("The type of adjustment that is being made, ");

                entity.Property(e => e.CastReference).HasMaxLength(255);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExchangeRate).HasComment("Used For Rec - Currenct rate when insert");

                entity.Property(e => e.ExportedBy).HasMaxLength(100);

                entity.Property(e => e.ExportedOn).HasColumnType("datetime");

                entity.Property(e => e.ExternalReference).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SalesInvoiced).HasComment("If an Invoice has been created for the Sales Order Delivery");

                entity.Property(e => e.SalesOrderId)
                    .HasColumnName("SalesOrderID")
                    .HasComment("The Source for the Sales Order Delivery");

                entity.Property(e => e.ShippingAgent).HasComment("The method used to move the items to the new location");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(255);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.ItemTransactionType)
                    .WithMany(p => p.ItemInventoryTransactions)
                    .HasForeignKey(d => d.ItemTransactionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransAction_ItemTransactionType");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.ItemInventoryTransactions)
                    .HasForeignKey(d => d.SalesOrderId)
                    .HasConstraintName("FK_ItemInventoryTransaction_SalesOrder");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ItemInventoryTransactions)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_ItemInventoryTransactionSupplier");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemInventoryTransactions)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_ItemInventoryTransaction_Unit");
            });

            modelBuilder.Entity<ItemInventoryTransactionArchiveLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemInventoryTransactionArchiveLink");

                entity.HasIndex(e => new { e.ContractId, e.TransactionId }, "IX_ItemInventoryTransactionArchiveLink")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            });

            modelBuilder.Entity<ItemInventoryTransactionLine>(entity =>
            {
                entity.HasKey(e => e.TransActionLineId)
                    .HasName("PK_ItemInventoryTransActionLine");

                entity.ToTable("ItemInventoryTransactionLine");

                entity.HasIndex(e => e.PurchaseOrderItemId, "IX_ItemInventoryTransActionLine_PurchaseOrderItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransactionId, "IX_ItemInventoryTransActionLine_TransactionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Complete, "IX_ItemInventoryTransactionLine_Complete");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ItemInventoryTransactionLine_ContractMarkPhaseLotID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_ItemInventoryTransactionLine_ContractMarkPhaseLotItemID");

                entity.HasIndex(e => e.CreditTransactionLineId, "IX_ItemInventoryTransactionLine_CreditTransactionLineID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CurrencyId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_Currency");

                entity.HasIndex(e => e.FacilityId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_Facility");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_ItemClassification");

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_ItemInventoryProperty");

                entity.HasIndex(e => e.ItemLocationId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_ItemLocation");

                entity.HasIndex(e => e.TransactionOrderUnitId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_OrderUnit_Transaction");

                entity.HasIndex(e => e.UnitId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_Unit");

                entity.HasIndex(e => e.TransactionUnitId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransActionLine_Unit_Transaction");

                entity.HasIndex(e => e.DeliveryAddressId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransactionLine_DeliveryAddressID");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_ItemInventoryTransactionLine_FK_ItemInventoryTransactionLine_ItemInventoryShape");

                entity.HasIndex(e => new { e.ItemId, e.TransActionLineId, e.ItemInventoryPropertyId }, "IX_ItemInventoryTransactionLine_ItemID");

                entity.HasIndex(e => e.ItemReservationId, "IX_ItemInventoryTransactionLine_ItemReservationID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemTransactionTypeId, e.TransactionId, e.TransActionLineId }, "IX_ItemInventoryTransactionLine_ItemTransactionTypeID_TransactionID_TransActionLineID");

                entity.HasIndex(e => new { e.ItemId, e.ContractMarkPhaseLotItemId }, "IX_ItemInventoryTransactionLine_Item_LotItem")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LinkId, e.ItemReservationId }, "IX_ItemInventoryTransactionLine_LinkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkId, "IX_ItemInventoryTransactionLine_MarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkItemId, "IX_ItemInventoryTransactionLine_MarkItemID");

                entity.HasIndex(e => e.NestingResultAllocationId, "IX_ItemInventoryTransactionLine_NestingResultAllocationID");

                entity.HasIndex(e => e.NestingResultItemListingId, "IX_ItemInventoryTransactionLine_NestingResultItemListingID");

                entity.HasIndex(e => e.ReversalStatus, "IX_ItemInventoryTransactionLine_ReversalStatus");

                entity.HasIndex(e => e.SalesOrderItemId, "IX_ItemInventoryTransactionLine_SalesOrderItemID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ItemInventoryTransactionLine_Unissue_ProductionWorkOrderID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TransActionLineId, e.ItemTransactionTypeId }, "IX_ItemInventorytransactionLine_TransActionLineID");

                entity.HasIndex(e => new { e.ProductionWorkOrderContractId, e.ProductionWorkOrderId }, "ItemInventoryTransactionLine_ProductionWorkOrderContractID");

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CreditTransactionLineId).HasColumnName("CreditTransactionLineID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Isintoinventory).HasComment("~0 - Outward movement, 1 - Inward Movement");

                entity.Property(e => e.ItemClassificationId)
                    .HasColumnName("ItemClassificationID")
                    .HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 - Item, 2 - Mark/Offcut/Scrapped Offcut, 3 Cutting Scrap, 4 \"Extra\" Scrap");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId)
                    .HasColumnName("MarkItemID")
                    .HasComment("~The Mark Item ID to define the Mark where this item will be used");

                entity.Property(e => e.NestingResultAllocationId)
                    .HasColumnName("NestingResultAllocationID")
                    .HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.NestingResultItemListingId)
                    .HasColumnName("NestingResultItemListingID")
                    .HasComment("No longer used, Kept for historical data");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId)
                    .HasColumnName("ProductionWorkOrderID")
                    .HasComment("Only used for Receive from workorder to track where the item came from");

                entity.Property(e => e.PurchaseOrderItemId)
                    .HasColumnName("PurchaseOrderItemID")
                    .HasComment("For PO Receipts - The PO Line that is received");

                entity.Property(e => e.ReceivedInFull).HasComment("If a PO is received in full");

                entity.Property(e => e.RetainOrderedValue)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Retain the PO ordered value if the length is not the same as the Order Length");

                entity.Property(e => e.ReversalTransActionLineId).HasColumnName("ReversalTransActionLineID");

                entity.Property(e => e.SalesOrderItemId)
                    .HasColumnName("SalesOrderItemID")
                    .HasComment("The Source for the Sales Order Delivery");

                entity.Property(e => e.TmpKey).HasColumnName("tmpKey");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionOrderUnitId)
                    .HasColumnName("TransactionOrderUnitID")
                    .HasComment("~Purchase Order Pack Qty");

                entity.Property(e => e.TransactionQuantity).HasComment("~Quantity based on the Purchase Order UnitID");

                entity.Property(e => e.TransactionUnitId)
                    .HasColumnName("TransactionUnitID")
                    .HasComment("~Purchase Order UnitID");

                entity.Property(e => e.TransactionUnitPrice).HasComment("~Unit Price based on the Purchase Order UnitID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_Currency");

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.DeliveryAddressId)
                    .HasConstraintName("FK_ItemInventoryTransactionLine_DeliveryAddressID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_Facility");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ItemClassification");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_Item");

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_ItemInventoryTransactionLine_ItemInventoryShape");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemLocationId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ItemLocation");

                entity.HasOne(d => d.ItemTransactionType)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ItemTransactionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ItemTransactionType");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ContractMarkItem");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ItemInventoryTransactionLine_ProductionWorkOrderContract");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ProductionWorkOrder");

                entity.HasOne(d => d.SalesOrderItem)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.SalesOrderItemId)
                    .HasConstraintName("FK_ItemInventoryTransactionLine_SalesOrderItem");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ItemInventoryTransactionLines)
                    .HasForeignKey(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_ItemInventoryTransAction");

                entity.HasOne(d => d.TransactionOrderUnit)
                    .WithMany(p => p.ItemInventoryTransactionLineTransactionOrderUnits)
                    .HasForeignKey(d => d.TransactionOrderUnitId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_OrderUnit_Transaction");

                entity.HasOne(d => d.TransactionUnit)
                    .WithMany(p => p.ItemInventoryTransactionLineTransactionUnits)
                    .HasForeignKey(d => d.TransactionUnitId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_Unit_Transaction");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemInventoryTransactionLineUnits)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_ItemInventoryTransActionLine_Unit");
            });

            modelBuilder.Entity<ItemInventoryTransactionLineArchive>(entity =>
            {
                entity.HasKey(e => e.TransActionLineId)
                    .HasName("PK_ItemInventoryTransActionLineArchive");

                entity.ToTable("ItemInventoryTransactionLineArchive");

                entity.HasIndex(e => e.TransactionId, "IX_ItemInventoryTransactionLineArchive_TransactionID")
                    .HasFillFactor(90);

                entity.Property(e => e.TransActionLineId)
                    .ValueGeneratedNever()
                    .HasColumnName("TransActionLineID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CreditTransactionLineId).HasColumnName("CreditTransactionLineID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.ReversalTransActionLineId).HasColumnName("ReversalTransActionLineID");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionOrderUnitId).HasColumnName("TransactionOrderUnitID");

                entity.Property(e => e.TransactionUnitId).HasColumnName("TransactionUnitID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.ItemInventoryTransactionLineArchives)
                    .HasForeignKey(d => d.DeliveryAddressId)
                    .HasConstraintName("FK_ItemInventoryTransactionLineArchive_DeliveryAddress");
            });

            modelBuilder.Entity<ItemInventoryTransactionLineInstance>(entity =>
            {
                entity.HasKey(e => e.TransactionLineInstanceId)
                    .HasName("PK_ItemInventoryTransactionLineinstance_TransactionLineinstanceID");

                entity.ToTable("ItemInventoryTransactionLineInstance");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemInventoryTransactionLineInstance_FK_ItemInventoryTransactionLineInstance_ItemClassification");

                entity.HasIndex(e => e.ParentMarkInstanceId, "IX_ItemInventoryTransactionLineInstance_FK_ItemInventoryTransactionLineInstance_ParentMarkInstanceID");

                entity.HasIndex(e => e.NestingResultItemListingId, "IX_ItemInventoryTransactionLineInstance_NestingResultItemListingID");

                entity.HasIndex(e => e.ParentMarkInstanceId, "IX_ItemInventoryTransactionLineInstance_ParentMarkInstance");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ItemInventoryTransactionLineInstance_ProductionWorkOrderContractID");

                entity.HasIndex(e => new { e.ItemInventoryTrackingGuidId, e.TransactionLineInstanceId, e.ItemReservationId, e.TransactionLineId, e.ItemClassificationId, e.ParentMarkInstanceId }, "IX_ItemInventoryTransactionLineInstance_ReceiptCovering");

                entity.HasIndex(e => new { e.TransactionLineInstanceId, e.TransactionLineId }, "IX_ItemInventoryTransactionLineInstance_TrnasactionLineInstanceID");

                entity.HasIndex(e => e.ItemReservationId, "IX_ItemInventoryTransactionLineinstance_ItemReservationID");

                entity.HasIndex(e => new { e.TransactionLineId, e.TransactionLineInstanceId, e.Instance }, "IX_ItemInventoryTransactionLineinstance_TransactionLineID");

                entity.HasIndex(e => new { e.TransactionLineId, e.Instance }, "UC_ItemInventoryTransactionLineInstance_Instance")
                    .IsUnique();

                entity.Property(e => e.TransactionLineInstanceId).HasColumnName("TransactionLineInstanceID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.ParentMarkInstanceId).HasColumnName("ParentMarkInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ReversalTransActionLineId).HasColumnName("ReversalTransActionLineID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(1000);

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.UncutContractMarkItemInstanceId).HasColumnName("UncutContractMarkItemInstanceID");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .HasConstraintName("FK_ItemInventoryTransactionLineInstance_ItemClassification");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransactionLineInstance_ItemInventoryTrackingGuidID");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("KF_ItemInventoryTransactionLineinstance_ItemReservationID");

                entity.HasOne(d => d.ParentMarkInstance)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.ParentMarkInstanceId)
                    .HasConstraintName("FK_ItemInventoryTransactionLineInstance_ParentMarkInstanceID");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ItemInventoryTransactionLineInstance_ProductionWorkOrderContractID");

                entity.HasOne(d => d.TransactionLine)
                    .WithMany(p => p.ItemInventoryTransactionLineInstances)
                    .HasForeignKey(d => d.TransactionLineId)
                    .HasConstraintName("KF_ItemInventoryTransactionLineInstance_TransactionLineID");
            });

            modelBuilder.Entity<ItemInventoryTransactionLineInstanceArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemInventoryTransactionLineInstanceArchive");

                entity.HasIndex(e => e.TransactionLineId, "IX_ItemInventoryTransactionLineInstanceArchive_TransactionLineID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.ParentMarkInstanceId).HasColumnName("ParentMarkInstanceID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ReversalTransActionLineId).HasColumnName("ReversalTransActionLineID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(1000);

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.TransactionLineInstanceId).HasColumnName("TransactionLineInstanceID");

                entity.Property(e => e.UncutContractMarkItemInstanceId).HasColumnName("UncutContractMarkItemInstanceID");
            });

            modelBuilder.Entity<ItemInventoryTransactionLineInstancePwocarchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemInventoryTransactionLineInstancePWOCArchive");

                entity.HasIndex(e => e.TransactionLineInstanceId, "IX_ItemInventoryTransactionLineInstancePWOCArchive")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.TransactionLineInstanceId).HasColumnName("TransactionLineInstanceID");
            });

            modelBuilder.Entity<ItemInventoryTransactionLink>(entity =>
            {
                entity.HasKey(e => new { e.TransActionLineIdOut, e.TransActionLineIdIn });

                entity.ToTable("ItemInventoryTransactionLink");

                entity.HasIndex(e => new { e.TransActionLineIdIn, e.TransActionLineIdOut }, "IX_ItemInventoryTransactionLink_INOUT")
                    .HasFillFactor(90);

                entity.Property(e => e.TransActionLineIdOut).HasColumnName("TransActionLineID_OUT");

                entity.Property(e => e.TransActionLineIdIn).HasColumnName("TransActionLineID_IN");

                entity.HasOne(d => d.TransActionLineIdInNavigation)
                    .WithMany(p => p.ItemInventoryTransactionLinkTransActionLineIdInNavigations)
                    .HasForeignKey(d => d.TransActionLineIdIn)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransactionLink_ItemInventoryTransActionLine1");

                entity.HasOne(d => d.TransActionLineIdOutNavigation)
                    .WithMany(p => p.ItemInventoryTransactionLinkTransActionLineIdOutNavigations)
                    .HasForeignKey(d => d.TransActionLineIdOut)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInventoryTransactionLink_ItemInventoryTransActionLine");
            });

            modelBuilder.Entity<ItemInventoryTransactionLinkArchive>(entity =>
            {
                entity.HasKey(e => new { e.TransActionLineIdOut, e.TransActionLineIdIn });

                entity.ToTable("ItemInventoryTransactionLinkArchive");

                entity.Property(e => e.TransActionLineIdOut).HasColumnName("TransActionLineID_OUT");

                entity.Property(e => e.TransActionLineIdIn).HasColumnName("TransActionLineID_IN");
            });

            modelBuilder.Entity<ItemLength>(entity =>
            {
                entity.ToTable("ItemLength");

                entity.HasIndex(e => e.ItemId, "IX_ItemLength_FK_ItemLength_Item");

                entity.Property(e => e.ItemLengthId).HasColumnName("ItemLengthID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Width).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemLengths)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLength_Item");
            });

            modelBuilder.Entity<ItemListing>(entity =>
            {
                entity.ToTable("ItemListing");

                entity.HasIndex(e => e.EstimateSubSectionId, "IX_ItemListing_EstimateSubsectionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CostCodeId, "IX_ItemListing_FK_ItemListing_CostCode");

                entity.HasIndex(e => e.EstimateUnitId, "IX_ItemListing_FK_ItemListing_Unit");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.AssemblyDescription).HasMaxLength(255);

                entity.Property(e => e.AssemblyGuid)
                    .HasMaxLength(50)
                    .HasColumnName("AssemblyGUID");

                entity.Property(e => e.AssemblyName).HasMaxLength(100);

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.EstimateItemUsageId).HasColumnName("EstimateItemUsageID");

                entity.Property(e => e.EstimateSubSectionId)
                    .HasColumnName("EstimateSubSectionID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.EstimateUnitId)
                    .HasColumnName("EstimateUnitID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingTypeId)
                    .HasColumnName("ItemListingTypeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.PaintFinish).HasMaxLength(255);

                entity.Property(e => e.Phase).HasMaxLength(255);

                entity.Property(e => e.PriceSourceId)
                    .HasColumnName("PriceSourceID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReviewedRateId).HasColumnName("ReviewedRateID");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.ItemListings)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemListing_CostCode");

                entity.HasOne(d => d.EstimateUnit)
                    .WithMany(p => p.ItemListings)
                    .HasForeignKey(d => d.EstimateUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemListing_Unit");
            });

            modelBuilder.Entity<ItemLocation>(entity =>
            {
                entity.ToTable("ItemLocation");

                entity.HasIndex(e => new { e.FacilityId, e.Name }, "IX_ItemLocation_FacilityId_Name");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The unique location ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("The record creator  ");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasComment("Date the record was created. ");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Enter the location description. ");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemLocationTypeId)
                    .HasColumnName("ItemLocationTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~The type of location: 1 - Storage; 2 - Workshop; 3 - Subcontractor; 4 - Erection Site;5 - Off-Site; 6 - Port");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Enter the location name. ");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ItemLocation_Facility");
            });

            modelBuilder.Entity<ItemLocationRule>(entity =>
            {
                entity.ToTable("ItemLocationRule");

                entity.HasIndex(e => e.ItemLocationId, "IX_ItemLocationRule_FK_ItemLocationRule_ItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ItemLocationRule_FK_ItemLocationRule_Process");

                entity.Property(e => e.ItemLocationRuleId).HasColumnName("ItemLocationRuleID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemLocationRuleTypeId)
                    .HasColumnName("ItemLocationRuleTypeID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.MaxValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.RuleId)
                    .HasColumnName("RuleID")
                    .HasComment("Link to the Routing Rule Table");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemLocationRules)
                    .HasForeignKey(d => d.ItemLocationId)
                    .HasConstraintName("FK_ItemLocationRule_ItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ItemLocationRules)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ItemLocationRule_Process");
            });

            modelBuilder.Entity<ItemLocationRuleItem>(entity =>
            {
                entity.ToTable("ItemLocationRuleItem");

                entity.HasIndex(e => e.ItemLocationRuleId, "IX_ItemLocationRuleItem_FK_ItemLocationItem_ItemLocation");

                entity.HasIndex(e => e.ItemId, "IX_ItemLocationRuleItem_FK_ItemLocationRuleItem_Item");

                entity.HasIndex(e => e.SectionTypeId, "IX_ItemLocationRuleItem_FK_ItemLocationRuleItem_SectionType");

                entity.Property(e => e.ItemLocationRuleItemId).HasColumnName("ItemLocationRuleItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocationRuleId).HasColumnName("ItemLocationRuleID");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemLocationRuleItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemLocationRuleItem_Item");

                entity.HasOne(d => d.ItemLocationRule)
                    .WithMany(p => p.ItemLocationRuleItems)
                    .HasForeignKey(d => d.ItemLocationRuleId)
                    .HasConstraintName("FK_ItemLocationItem_ItemLocation");

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.ItemLocationRuleItems)
                    .HasForeignKey(d => d.SectionTypeId)
                    .HasConstraintName("FK_ItemLocationRuleItem_SectionType");
            });

            modelBuilder.Entity<ItemLocationRuleParameter>(entity =>
            {
                entity.ToTable("ItemLocationRuleParameter");

                entity.HasIndex(e => e.ItemLocationRuleId, "IX_ItemLocationRuleParameter_FK_ItemLocationRuleParameter_ItemLocationRuleVM");

                entity.Property(e => e.ItemLocationRuleParameterId).HasColumnName("ItemLocationRuleParameterID");

                entity.Property(e => e.ItemLocationRuleId).HasColumnName("ItemLocationRuleID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.ItemLocationRule)
                    .WithMany(p => p.ItemLocationRuleParameters)
                    .HasForeignKey(d => d.ItemLocationRuleId)
                    .HasConstraintName("FK_ItemLocationRuleParameter_ItemLocationRuleVM");
            });

            modelBuilder.Entity<ItemLocationRuleVm>(entity =>
            {
                entity.HasKey(e => e.ItemLocationRuleId);

                entity.ToTable("ItemLocationRuleVM");

                entity.HasIndex(e => e.ItemLocationId, "IX_ItemLocationRuleVM_FK_ItemLocationRuleVM_ItemLocation");

                entity.HasIndex(e => e.ProductionRuleId, "IX_ItemLocationRuleVM_FK_ItemLocationRuleVM_ProductionRule");

                entity.Property(e => e.ItemLocationRuleId).HasColumnName("ItemLocationRuleID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ParentItemLocationRuleId).HasColumnName("ParentItemLocationRuleID");

                entity.Property(e => e.ProductionRuleId).HasColumnName("ProductionRuleID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemLocationRuleVms)
                    .HasForeignKey(d => d.ItemLocationId)
                    .HasConstraintName("FK_ItemLocationRuleVM_ItemLocation");

                entity.HasOne(d => d.ProductionRule)
                    .WithMany(p => p.ItemLocationRuleVms)
                    .HasForeignKey(d => d.ProductionRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLocationRuleVM_ProductionRule");
            });

            modelBuilder.Entity<ItemParameter>(entity =>
            {
                entity.ToTable("ItemParameter");

                entity.HasIndex(e => e.ShapeDimensionId, "IX_ItemParameter_FK_ItemParameter_ShapeDimension");

                entity.HasIndex(e => e.ItemId, "IX_ItemParameter_ItemID");

                entity.Property(e => e.ItemParameterId).HasColumnName("ItemParameterID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ShapeDimensionId).HasColumnName("ShapeDimensionID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemParameters)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemParameter_Item");

                entity.HasOne(d => d.ShapeDimension)
                    .WithMany(p => p.ItemParameters)
                    .HasForeignKey(d => d.ShapeDimensionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemParameter_ShapeDimension");
            });

            modelBuilder.Entity<ItemReservation>(entity =>
            {
                entity.ToTable("ItemReservation");

                entity.HasIndex(e => e.ContractId, "IX_ItemReservation_ContractID");

                entity.HasIndex(e => e.PhaseId, "IX_ItemReservation_FK_ItemReservation_ContractPhase");

                entity.HasIndex(e => new { e.ItemReservationId, e.ContractId }, "IX_ItemReservation_ReservationContract")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ReservationType, e.ContractId, e.PhaseId }, "IX_ItemReservation_ReservationType_ContractID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("For Manual Allocations, the Link to the Contract");

                entity.Property(e => e.ContractPrelimBatchId).HasColumnName("ContractPrelimBatchID");

                entity.Property(e => e.OriginalReservationType).HasComment("~0 MANUAL, 1 PRELIM, 2 DETAIL, 3 EDI, 4 CUSTOMER LISTING, 5 FREE");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasComment("For Manual Allocations, the link to the Phase");

                entity.Property(e => e.QtyDetailOrdered).HasColumnName("Qty_Detail_Ordered");

                entity.Property(e => e.QtyFromFreeOrder).HasColumnName("Qty_From_Free_Order");

                entity.Property(e => e.QtyManualOrdered).HasColumnName("Qty_Manual_Ordered");

                entity.Property(e => e.QtyOnHand).HasColumnName("Qty_On_hand");

                entity.Property(e => e.QtyOnOrder).HasColumnName("Qty_On_Order");

                entity.Property(e => e.QtyOrigOrdered)
                    .HasColumnName("Qty_Orig_Ordered")
                    .HasComment("Obsolete");

                entity.Property(e => e.QtyPrelimOrdered).HasColumnName("Qty_Prelim_Ordered");

                entity.Property(e => e.QtyWelded)
                    .HasColumnName("Qty_Welded")
                    .HasComment("The quantity that is produced by welding other items");

                entity.Property(e => e.ReservationType).HasComment("~0 MANUAL, 1 PRELIM, 2 DETAIL, 3 EDI, 4 CUSTOMER LISTING, 5 FREE");

                entity.Property(e => e.TmpKey).HasColumnName("tmpKey");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ItemReservations)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ItemReservation_Contract");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.ItemReservations)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_ItemReservation_ContractPhase");
            });

            modelBuilder.Entity<ItemReservationContract>(entity =>
            {
                entity.ToTable("ItemReservationContract");

                entity.HasIndex(e => new { e.ContractId, e.PhaseId }, "IX_ItemReservationContract_ContractID");

                entity.HasIndex(e => e.PhaseId, "IX_ItemReservationContract_FK_ItemReservationContract_Phase");

                entity.HasIndex(e => new { e.ItemReservationId, e.ContractId }, "IX_ItemReservationContract_ReservationContract")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemReservationId, e.ReservationType, e.ContractId, e.PhaseId }, "IX_ItemReservationContract_ReservationType_ContractID");

                entity.HasIndex(e => new { e.ItemReservationId, e.ReservationType, e.ContractId, e.PhaseId }, "UC_ItemReservationContract")
                    .IsUnique();

                entity.Property(e => e.ItemReservationContractId)
                    .HasColumnName("ItemReservationContractID")
                    .HasComment("Unique Item Reservation Contract/Phase ID automatically generated by system.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("Contract ID this entry refers to.");

                entity.Property(e => e.ItemReservationId)
                    .HasColumnName("ItemReservationID")
                    .HasComment("Item Reservation ID this entry is linked to.");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasComment("Phase ID this entry refers to.");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ItemReservationContracts)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemReservationContract_Contract");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemReservationContracts)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_ItemReservationContract_ItemReservation");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.ItemReservationContracts)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_ItemReservationContract_Phase");
            });

            modelBuilder.Entity<ItemReservationHistory>(entity =>
            {
                entity.HasKey(e => e.Rw)
                    .HasName("PK__ItemRese__3215371912C5009F");

                entity.ToTable("ItemReservationHistory");

                entity.HasIndex(e => new { e.ItemreservationOld, e.ItemreservationNew }, "IX_Itemreservationhistory");

                entity.Property(e => e.ItemreservationNew).HasColumnName("Itemreservation_New");

                entity.Property(e => e.ItemreservationOld).HasColumnName("Itemreservation_Old");
            });

            modelBuilder.Entity<ItemShortcutCode>(entity =>
            {
                entity.HasKey(e => e.ItemShortcutId);

                entity.ToTable("ItemShortcutCode");

                entity.HasIndex(e => e.SectionTypeId, "IX_ItemShortcutCode_FK_ItemShortcutCode_SectionType");

                entity.HasIndex(e => e.ShortcutCode, "uc_ItemShortcutCode_ShortcutCode")
                    .IsUnique();

                entity.Property(e => e.ItemShortcutId).HasColumnName("ItemShortcutID");

                entity.Property(e => e.SectionSize).HasMaxLength(100);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.ShortcutCode).HasMaxLength(10);

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.ItemShortcutCodes)
                    .HasForeignKey(d => d.SectionTypeId)
                    .HasConstraintName("FK_ItemShortcutCode_SectionType");
            });

            modelBuilder.Entity<ItemSiteInventory>(entity =>
            {
                entity.ToTable("ItemSiteInventory");

                entity.HasIndex(e => new { e.ContractMarkPhaseLotItemId, e.MarkItemId }, "IX_ItemSiteInventory_CMPLIID");

                entity.HasIndex(e => e.MarkItemId, "IX_ItemSiteInventory_FK_ItemSiteInventory_ContractMarkItem");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ItemSiteInventory_FK_ItemSiteInventory_ContractMarkPhaseLot");

                entity.HasIndex(e => e.CurrencyId, "IX_ItemSiteInventory_FK_ItemSiteInventory_Currency");

                entity.HasIndex(e => e.FacilityId, "IX_ItemSiteInventory_FK_ItemSiteInventory_Facility");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_ItemSiteInventory_FK_ItemSiteInventory_ItemInventoryShape");

                entity.HasIndex(e => e.UnitId, "IX_ItemSiteInventory_FK_ItemSiteInventory_Unit");

                entity.HasIndex(e => new { e.ItemId, e.MarkItemId }, "IX_ItemSiteInventory_ItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkId, "IX_ItemSiteInventory_MarkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_ItemSiteInventory_Property");

                entity.HasIndex(e => e.ItemLocationId, "IX_ItemSiteinventory_LocationID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.YardReference, "IX_ItemSiteinventory_YardReference")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.Area).HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.Length).HasDefaultValueSql("((0))");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.TmpKey).HasColumnName("tmpKey");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.Property(e => e.Width).HasDefaultValueSql("((0))");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ItemSiteInventory_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ItemSiteInventory_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_ItemSiteInventory_Currency");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ItemSiteInventory_Facility");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemSiteInventory_Item");

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSiteInventory_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_ItemSiteInventory_ItemInventoryShape");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSiteInventory_Location");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ItemSiteInventory_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ItemSiteInventory_ContractMarkItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemSiteInventories)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSiteInventory_Unit");
            });

            modelBuilder.Entity<ItemSiteInventoryHistory>(entity =>
            {
                entity.ToTable("ItemSiteInventoryHistory");

                entity.HasIndex(e => e.DateLogged, "IX_ItemSiteInventoryHistory_DateLogged")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemSiteInventoryId, e.FacilityId }, "IX_ItemSiteInventoryHistory_FacilityID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemSiteInventoryHistoryId, e.ItemSiteInventoryId, e.DateLogged }, "IX_ItemSiteInventoryHistory_ItemSiteInventoryHistoryID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Quantity, e.DateLogged }, "IX_ItemSiteInventoryHistory_Quantity")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemSiteInventoryHistoryId).HasColumnName("ItemSiteInventoryHistoryID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.DateLogged)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");
            });

            modelBuilder.Entity<ItemSiteInventoryHistoryArchive>(entity =>
            {
                entity.HasKey(e => e.ItemSiteInventoryHistoryId)
                    .HasName("PK__ItemSite__2C3F147E15B67BE3");

                entity.ToTable("ItemSiteInventoryHistoryArchive");

                entity.Property(e => e.ItemSiteInventoryHistoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemSiteInventoryHistoryID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.DateLogged).HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");
            });

            modelBuilder.Entity<ItemSiteInventoryInstance>(entity =>
            {
                entity.ToTable("ItemSiteInventoryInstance");

                entity.HasIndex(e => e.ContractMarkInstanceId, "IX_ItemSiteInventoryInstance_FK_ItemSiteInventoryInstance_ContractMarkInstanceID");

                entity.HasIndex(e => e.ContractMarkItemInstanceId, "IX_ItemSiteInventoryInstance_FK_ItemSiteInventoryInstance_ContractMarkItemInstanceID");

                entity.HasIndex(e => e.LockItemInventoryTransId, "IX_ItemSiteInventoryInstance_FK_ItemSiteInventoryInstance_LockingTransactionID");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ItemSiteInventoryInstance_FK_ItemSiteInventoryInstance_ProductionWorkOrderContractID");

                entity.HasIndex(e => e.ItemClassificationId, "IX_ItemSiteInventoryInstance_ItemClassificationID");

                entity.HasIndex(e => e.ItemReservationId, "IX_ItemSiteInventoryInstance_ItemReservationID");

                entity.HasIndex(e => e.ItemSiteInventoryId, "IX_ItemSiteInventoryInstance_ItemSiteInventoryID");

                entity.HasIndex(e => new { e.ItemClassificationId, e.LockItemInventoryTransId }, "IX_ItemSiteInventoryInstance_LockItemInventoryTransID")
                    .HasFillFactor(85);

                entity.HasIndex(e => new { e.ItemSiteInventoryId, e.Instance }, "UC_ItemSiteInventoryInstance_Instance")
                    .IsUnique();

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "UC_ItemSiteInventoryInstance_ItemInventoryTrackingGuidID")
                    .IsUnique();

                entity.Property(e => e.ItemSiteInventoryInstanceId).HasColumnName("ItemSiteInventoryInstanceID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ContractMarkInstance)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ContractMarkInstanceId)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_ContractMarkInstanceID");

                entity.HasOne(d => d.ContractMarkItemInstance)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ContractMarkItemInstanceId)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_ContractMarkItemInstanceID");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_ItemClassification");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithOne(p => p.ItemSiteInventoryInstance)
                    .HasForeignKey<ItemSiteInventoryInstance>(d => d.ItemInventoryTrackingGuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_ItemInventoryTrackingGuidID");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("KF_ItemSiteInventoryInstance_ItemReservationID");

                entity.HasOne(d => d.ItemSiteInventory)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ItemSiteInventoryId)
                    .HasConstraintName("KF_ItemSiteInventoryInstance_ItemInventoryID");

                entity.HasOne(d => d.LockItemInventoryTrans)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.LockItemInventoryTransId)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_LockingTransactionID");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ItemSiteInventoryInstances)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ItemSiteInventoryInstance_ProductionWorkOrderContractID");
            });

            modelBuilder.Entity<ItemSiteInventoryInstanceHistory>(entity =>
            {
                entity.ToTable("ItemSiteInventoryInstanceHistory");

                entity.HasIndex(e => e.DateLogged, "IX_ItemSiteInventoryInstanceHistory_DateLogged")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_ItemSiteInventoryInstanceHistory_ItemInventoryTrackingGuidID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemSiteInventoryHistoryId, e.ItemSiteInventoryInstanceId, e.ItemInventoryTrackingGuidId, e.ItemTrackingNumberId, e.MultiContract }, "IX_ItemSiteInventoryInstanceHistory_ItemInventoryTrackingNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemSiteInventoryInstanceHistoryId, e.ItemSiteInventoryHistoryId, e.ItemSiteInventoryInstanceId, e.ItemSiteInventoryId, e.DateLogged }, "IX_ItemSiteInventoryInstanceHistory_ItemSiteInventoryInstanceHistoryID")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemSiteInventoryInstanceHistoryId).HasColumnName("ItemSiteInventoryInstanceHistoryID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.DateLogged)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemSiteInventoryHistoryId).HasColumnName("ItemSiteInventoryHistoryID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.ItemSiteInventoryInstanceId).HasColumnName("ItemSiteInventoryInstanceID");

                entity.Property(e => e.ItemTrackingNumberId).HasColumnName("ItemTrackingNumberID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ItemSiteInventoryHistory)
                    .WithMany(p => p.ItemSiteInventoryInstanceHistories)
                    .HasForeignKey(d => d.ItemSiteInventoryHistoryId)
                    .HasConstraintName("FK_ItemSiteInventoryInstanceHistory_ItemSiteInventoryHistoryID");
            });

            modelBuilder.Entity<ItemSiteInventoryInstanceHistoryArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemSiteInventoryInstanceHistoryArchive");

                entity.HasIndex(e => e.ItemSiteInventoryHistoryId, "IX_ItemSiteInventoryInstanceHistoryArchive_FK_ItemSiteInventoryInstanceHistoryArchive_ItemSiteInventoryHistoryID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.DateLogged).HasColumnType("datetime");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemSiteInventoryHistoryId).HasColumnName("ItemSiteInventoryHistoryID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.ItemSiteInventoryInstanceHistoryId).HasColumnName("ItemSiteInventoryInstanceHistoryID");

                entity.Property(e => e.ItemSiteInventoryInstanceId).HasColumnName("ItemSiteInventoryInstanceID");

                entity.Property(e => e.ItemTrackingNumberId).HasColumnName("ItemTrackingNumberID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.HasOne(d => d.ItemSiteInventoryHistory)
                    .WithMany()
                    .HasForeignKey(d => d.ItemSiteInventoryHistoryId)
                    .HasConstraintName("FK_ItemSiteInventoryInstanceHistoryArchive_ItemSiteInventoryHistoryID");
            });

            modelBuilder.Entity<ItemSupplier>(entity =>
            {
                entity.ToTable("ItemSupplier");

                entity.HasIndex(e => new { e.SupplierId, e.SupplierPartCode, e.SupplierPartGrade, e.SupplierPartSize }, "IX_ItemSupplier_COMPLEX");

                entity.HasIndex(e => e.TaxCodeId, "IX_ItemSupplier_FK_ItemSupplier_TaxCode");

                entity.HasIndex(e => e.PriceUnitId, "IX_ItemSupplier_FK_ItemSupplier_Unit");

                entity.HasIndex(e => new { e.ItemId, e.SupplierId, e.ContractId }, "IX_ItemSupplier_Unique")
                    .IsUnique();

                entity.Property(e => e.ItemSupplierId).HasColumnName("ItemSupplierID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The currency used for the unit price");

                entity.Property(e => e.DefaultSupplier)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Is this the default supplier for the item");

                entity.Property(e => e.Discount).HasComment("The default discount percent when ordering the item");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MillLocationId).HasColumnName("MillLocationID");

                entity.Property(e => e.MinOrderQuantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.OrderMultiple).HasDefaultValueSql("((1))");

                entity.Property(e => e.PriceUnitId)
                    .HasColumnName("PriceUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The unit to use when determining the price of the item");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierPartCode).HasMaxLength(50);

                entity.Property(e => e.SupplierPartGrade).HasMaxLength(50);

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasComment("The part number that the supplier uses for the item");

                entity.Property(e => e.SupplierPartSize).HasMaxLength(50);

                entity.Property(e => e.SupplierRollReferenceSerial).HasMaxLength(100);

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("The tax code that must be used when ordering this item");

                entity.Property(e => e.UnitPrice).HasComment("The unit price of the item");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSuppliers)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemSuppliers_Item");

                entity.HasOne(d => d.PriceUnit)
                    .WithMany(p => p.ItemSuppliers)
                    .HasForeignKey(d => d.PriceUnitId)
                    .HasConstraintName("FK_ItemSupplier_Unit");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ItemSuppliers)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSuppliers_Supplier");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.ItemSuppliers)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_ItemSupplier_TaxCode");
            });

            modelBuilder.Entity<ItemSupplierLength>(entity =>
            {
                entity.ToTable("ItemSupplierLength");

                entity.HasIndex(e => e.ItemSupplierId, "IX_ItemSupplierLength_ItemSupplierID")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemSupplierLengthId).HasColumnName("ItemSupplierLengthID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.ItemSupplierId).HasColumnName("ItemSupplierID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.HasOne(d => d.ItemSupplier)
                    .WithMany(p => p.ItemSupplierLengths)
                    .HasForeignKey(d => d.ItemSupplierId)
                    .HasConstraintName("FK_ItemSupplierLength_ItemSupplier");
            });

            modelBuilder.Entity<ItemSupplierMinimumQuantity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemSupplierMinimumQuantity");

                entity.Property(e => e.Createdon)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemSupplierMinimumQuantityId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ItemSupplierMinimumQuantityID");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ItemTracking>(entity =>
            {
                entity.HasKey(e => e.ItemTrackingNumberId)
                    .HasName("PK_ItemTrackingNumberID");

                entity.ToTable("ItemTracking");

                entity.HasIndex(e => new { e.ItemId, e.TrackingNumberHash }, "IX_ItemTracking_Cluster");

                entity.HasIndex(e => e.ItemId, "IX_ItemTracking_ItemID");

                entity.Property(e => e.ItemTrackingNumberId).HasColumnName("ItemTrackingNumberID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.TrackingNumber)
                    .IsRequired()
                    .HasMaxLength(448);

                entity.Property(e => e.TrackingNumberHash)
                    .HasMaxLength(32)
                    .HasComputedColumnSql("(CONVERT([binary](32),hashbytes('SHA1',[TrackingNumber]),0))", true)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemTrackings)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemTracking_Item");
            });

            modelBuilder.Entity<ItemTrackingNextNumber>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("ItemTrackingNextNumber");

                entity.HasIndex(e => e.ItemId, "IX_ItemTrackingNextNumber_ItemID")
                    .IsUnique();

                entity.Property(e => e.ItemId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ItemTransactionType>(entity =>
            {
                entity.ToTable("ItemTransactionType");

                entity.Property(e => e.ItemTransactionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemType>(entity =>
            {
                entity.ToTable("ItemType");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Item Type");

                entity.Property(e => e.SteelItem)
                    .HasDefaultValueSql("(1)")
                    .HasComment("Steel Item flag");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ItemUsage>(entity =>
            {
                entity.ToTable("ItemUsage");

                entity.HasIndex(e => e.FacilityId, "IX_ItemUsage_FK_ItemUsage_Facility");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApprovedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ItemUsages)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemUsage_Facility");
            });

            modelBuilder.Entity<ItemUsageFitting>(entity =>
            {
                entity.ToTable("ItemUsageFitting");

                entity.HasIndex(e => e.ItemUsageId, "IX_ItemUsageFitting_FK_ItemUsageFitting_ItemUsage");

                entity.Property(e => e.ItemUsageFittingId).HasColumnName("ItemUsageFittingID");

                entity.Property(e => e.FittingItemTypeId)
                    .HasColumnName("FittingItemTypeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.LineItemId).HasColumnName("LineItemID");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("UnitTypeID")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.ItemUsage)
                    .WithMany(p => p.ItemUsageFittings)
                    .HasForeignKey(d => d.ItemUsageId)
                    .HasConstraintName("FK_ItemUsageFitting_ItemUsage");
            });

            modelBuilder.Entity<ItemUsageFittingPercentage>(entity =>
            {
                entity.ToTable("ItemUsageFittingPercentage");

                entity.HasIndex(e => e.ItemUsageId, "IX_ItemUsageFittingPercentage_FK_ItemUsageFittingPercentage_ItemUsage");

                entity.Property(e => e.ItemUsageFittingPercentageId).HasColumnName("ItemUsageFittingPercentageID");

                entity.Property(e => e.FittingsPerWeight)
                    .HasDefaultValueSql("(0)")
                    .HasComment("The estimate fittings per weight percentage");

                entity.Property(e => e.HoursPerWeightValue)
                    .HasDefaultValueSql("(0)")
                    .HasComment("The estimate hours over weight value");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.RatePerWeightValue)
                    .HasDefaultValueSql("(0)")
                    .HasComment("The estimate rate over weight value");

                entity.HasOne(d => d.ItemUsage)
                    .WithMany(p => p.ItemUsageFittingPercentages)
                    .HasForeignKey(d => d.ItemUsageId)
                    .HasConstraintName("FK_ItemUsageFittingPercentage_ItemUsage");
            });

            modelBuilder.Entity<ItemUsageItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemUsageItem");

                entity.HasIndex(e => e.ItemId, "IX_ItemUsageItem_FK_ItemUsageItem_Item");

                entity.HasIndex(e => new { e.ItemUsageId, e.ItemId }, "IX_ItemUsageItem_Unique")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemUsageId, "IX_ItemUsageItem_UsageID")
                    .IsClustered();

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.HasOne(d => d.Item)
                    .WithMany()
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemUsageItem_Item");

                entity.HasOne(d => d.ItemUsage)
                    .WithMany()
                    .HasForeignKey(d => d.ItemUsageId)
                    .HasConstraintName("FK_ItemUsageItem_ItemUsage");
            });

            modelBuilder.Entity<ItemUsageProcess>(entity =>
            {
                entity.ToTable("ItemUsageProcess");

                entity.HasIndex(e => e.ProcessId, "IX_ItemUsageProcess_FK_ItemUsageProcess_Process");

                entity.HasIndex(e => e.ItemUsageId, "IX_ItemUsageProcess_ItemUsageID")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemUsageProcessId).HasColumnName("ItemUsageProcessID");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("(1)");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("UnitTypeID")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.ItemUsage)
                    .WithMany(p => p.ItemUsageProcesses)
                    .HasForeignKey(d => d.ItemUsageId)
                    .HasConstraintName("FK_ItemUsageProcess_ItemUsage");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ItemUsageProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemUsageProcess_Process");
            });

            modelBuilder.Entity<KeyRequirement>(entity =>
            {
                entity.HasKey(e => e.KeyRequirementsId)
                    .HasName("PK__KeyRequi__547CE5E41853BCC3");

                entity.Property(e => e.KeyRequirementsId).HasColumnName("KeyRequirementsID");

                entity.Property(e => e.AdminBidBondId).HasColumnName("AdminBidBondID");

                entity.Property(e => e.AdminCertifiedPayrollId).HasColumnName("AdminCertifiedPayrollID");

                entity.Property(e => e.AdminLdpenaltyId).HasColumnName("AdminLDPenaltyID");

                entity.Property(e => e.AdminOcipccipid).HasColumnName("AdminOCIPCCIPID");

                entity.Property(e => e.AdminOtherTaxesId).HasColumnName("AdminOtherTaxesID");

                entity.Property(e => e.AdminPaymentTermsId).HasColumnName("AdminPaymentTermsID");

                entity.Property(e => e.AdminPerfBondId).HasColumnName("AdminPerfBondID");

                entity.Property(e => e.AdminRetentionTermsId).HasColumnName("AdminRetentionTermsID");

                entity.Property(e => e.AdminSalesTaxId).HasColumnName("AdminSalesTaxID");

                entity.Property(e => e.AdminWarrantyPeriodId).HasColumnName("AdminWarrantyPeriodID");

                entity.Property(e => e.FabErectCertId).HasColumnName("FabErectCertID");

                entity.Property(e => e.FabLocalParticipationId).HasColumnName("FabLocalParticipationID");

                entity.Property(e => e.FabMarketRetentionId).HasColumnName("FabMarketRetentionID");

                entity.Property(e => e.FabNdtinspId).HasColumnName("FabNDTInspID");

                entity.Property(e => e.FabPaintCertId).HasColumnName("FabPaintCertID");

                entity.Property(e => e.FabSbeparticipationId).HasColumnName("FabSBEParticipationID");

                entity.Property(e => e.FabShopCertId).HasColumnName("FabShopCertID");

                entity.Property(e => e.KrlinkId).HasColumnName("KRLinkID");

                entity.Property(e => e.Krtype).HasColumnName("KRType");

                entity.Property(e => e.MaterialBuyAmericanId).HasColumnName("MaterialBuyAmericanID");

                entity.Property(e => e.MaterialDomesticId).HasColumnName("MaterialDomesticID");

                entity.Property(e => e.MaterialLeedId).HasColumnName("MaterialLeedID");

                entity.Property(e => e.MaterialUniqueMaterialId).HasColumnName("MaterialUniqueMaterialID");

                entity.Property(e => e.NdaagreementPath).HasColumnName("NDAAgreementPath");

                entity.Property(e => e.ScopeBimid).HasColumnName("ScopeBIMID");

                entity.Property(e => e.ScopeDesignId).HasColumnName("ScopeDesignID");

                entity.Property(e => e.ScopeDetailId).HasColumnName("ScopeDetailID");

                entity.Property(e => e.ScopeErectionId).HasColumnName("ScopeErectionID");

                entity.Property(e => e.ScopeFabId).HasColumnName("ScopeFabID");

                entity.Property(e => e.ScopeFreightId).HasColumnName("ScopeFreightID");

                entity.Property(e => e.ScopePaintId).HasColumnName("ScopePaintID");

                entity.Property(e => e.ScopePrepId).HasColumnName("ScopePrepID");

                entity.Property(e => e.Sga).HasColumnName("SGA");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.ToTable("Language");

                entity.Property(e => e.LanguageId)
                    .ValueGeneratedNever()
                    .HasColumnName("LanguageID")
                    .HasComment("The unique language ID number generated automatically.");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("The date of the last update.");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The last updater");

                entity.Property(e => e.Iso6391code)
                    .HasMaxLength(2)
                    .HasColumnName("ISO639_1Code");

                entity.Property(e => e.Iso6391codeInUse).HasColumnName("ISO639_1CodeInUse");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Define the language name.");

                entity.Property(e => e.RegionalSettingId)
                    .HasColumnName("RegionalSettingID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Rtllanguage).HasColumnName("RTLLanguage");

                entity.Property(e => e.System).HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("Date the record was created.");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The record creator");
            });

            modelBuilder.Entity<LanguageString>(entity =>
            {
                entity.ToTable("LanguageString");

                entity.Property(e => e.LanguageStringId).HasColumnName("LanguageStringID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.System).HasDefaultValueSql("((1))");

                entity.Property(e => e.SystemString)
                    .IsRequired()
                    .HasMaxLength(750);

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<LanguageStringTranslation>(entity =>
            {
                entity.HasKey(e => e.LanguageTranslationId);

                entity.ToTable("LanguageStringTranslation");

                entity.HasIndex(e => new { e.Chksum, e.LanguageId, e.LanguageTranslationId }, "IX_LanguageStringTranslation_CHKSUM")
                    .HasFillFactor(71);

                entity.HasIndex(e => e.LanguageId, "IX_LanguageStringTranslation_LanguageID")
                    .HasFillFactor(71);

                entity.Property(e => e.LanguageTranslationId)
                    .HasColumnName("LanguageTranslationID")
                    .HasComment("Unique ID");

                entity.Property(e => e.Chksum)
                    .HasColumnName("CHKSUM")
                    .HasComputedColumnSql("(checksum([systemstring]))", true);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasComment("CreatedOn");

                entity.Property(e => e.LanguageId)
                    .HasColumnName("LanguageID")
                    .HasComment("Language ID");

                entity.Property(e => e.LanguageStringId)
                    .HasColumnName("LanguageStringID")
                    .HasComment("Language String ID");

                entity.Property(e => e.SystemString)
                    .IsRequired()
                    .HasMaxLength(750)
                    .HasComment("System String");

                entity.Property(e => e.SystemTranslation).HasDefaultValueSql("((1))");

                entity.Property(e => e.TranslatedString)
                    .IsRequired()
                    .HasMaxLength(750)
                    .HasDefaultValueSql("('')")
                    .HasComment("Translated String");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("UpdatedBy");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasComment("UpdatedOn");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.LanguageStringTranslations)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_LanguageStringTranslation_Language");
            });

            modelBuilder.Entity<Lookup>(entity =>
            {
                entity.ToTable("Lookup");

                entity.HasIndex(e => e.Name, "IX_Lookup_Unique")
                    .IsUnique()
                    .HasFillFactor(71);

                entity.Property(e => e.LookupId)
                    .ValueGeneratedNever()
                    .HasColumnName("LookupID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.System).HasDefaultValueSql("(1)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<LookupValue>(entity =>
            {
                entity.ToTable("LookupValue");

                entity.HasIndex(e => new { e.LookupId, e.Name, e.RnU }, "IX_LookupValue_UniqueMerged")
                    .HasFillFactor(71);

                entity.HasIndex(e => new { e.LookupValueKey, e.LookupId }, "IX_LookupValue_ValueKey")
                    .HasFillFactor(71);

                entity.Property(e => e.LookupValueId).HasColumnName("LookupValueID");

                entity.Property(e => e.LookupId).HasColumnName("LookupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RnU)
                    .HasColumnName("RN_U")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.Lookup)
                    .WithMany(p => p.LookupValues)
                    .HasForeignKey(d => d.LookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LookupValue_Lookup");
            });

            modelBuilder.Entity<LottingDateDependency>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DependentDate).HasMaxLength(100);

                entity.Property(e => e.LottingDate)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LottingDateDepenanciesId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LottingDateDepenanciesID");
            });

            modelBuilder.Entity<NestResultsEstimateItemFitting>(entity =>
            {
                entity.ToTable("NestResultsEstimateItemFitting");

                entity.Property(e => e.NestResultsEstimateItemFittingId).HasColumnName("NestResultsEstimateItemFittingID");

                entity.Property(e => e.EstimateItemFittingId).HasColumnName("EstimateItemFittingID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.NestSourceTypeId).HasColumnName("NestSourceTypeID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<NestResultsItemListing>(entity =>
            {
                entity.HasKey(e => e.NestItemListingId)
                    .HasName("PK_NestResultItemListing");

                entity.ToTable("NestResultsItemListing");

                entity.HasIndex(e => e.ItemId, "IX_NestResultsItemListing_FK_NestResultsItemListing_Item");

                entity.Property(e => e.NestItemListingId).HasColumnName("NestItemListingID");

                entity.Property(e => e.ContractPrelimMarkId)
                    .HasColumnName("ContractPrelimMarkID")
                    .HasComment("The prelim mark ID if the cut is for a prelim mark");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The ItemID of the Item");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.Length).HasComment("Length in MM");

                entity.Property(e => e.MarkId)
                    .HasColumnName("MarkID")
                    .HasComment("~The mark id where the cut is used - could be markitemid");

                entity.Property(e => e.NestSourceTypeId)
                    .HasColumnName("NestSourceTypeID")
                    .HasComment("~1 = Estimating, 2 = Prelim 3 = Detailed Listing");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasComment("The phase id where the cut is used");

                entity.Property(e => e.SourceKey).HasComment("For example the EstimateID");

                entity.Property(e => e.StockId)
                    .HasColumnName("StockID")
                    .HasComment("The stock length");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.NestResultsItemListings)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestResultsItemListing_Item");
            });

            modelBuilder.Entity<NestResultsStockListing>(entity =>
            {
                entity.HasKey(e => e.NestStockListingId);

                entity.ToTable("NestResultsStockListing");

                entity.HasIndex(e => e.ItemId, "IX_NestResultsStockListing_FK_NestResultsStockListing_Item");

                entity.HasIndex(e => e.ItemReservationId, "IX_NestResultsStockListing_FK_NestResultsStockListing_ItemReservation");

                entity.Property(e => e.NestStockListingId).HasColumnName("NestStockListingID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The ItemID of the Item");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.Items).HasComment("number of items being cut from the bar");

                entity.Property(e => e.NestSourceTypeId)
                    .HasColumnName("NestSourceTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 = Estimating, 2 = Prelim 3 = Detailed Listing");

                entity.Property(e => e.PriceUnitId).HasColumnName("PriceUnitID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.SourceKey).HasComment("For example the EstimateID");

                entity.Property(e => e.StockId)
                    .HasColumnName("StockID")
                    .HasComment("The stock length from which the item is cut from");

                entity.Property(e => e.WasteArea).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.NestResultsStockListings)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestResultsStockListing_Item");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.NestResultsStockListings)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_NestResultsStockListing_ItemReservation");
            });

            modelBuilder.Entity<Nesting>(entity =>
            {
                entity.ToTable("Nesting");

                entity.Property(e => e.NestingId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingID")
                    .HasComment("Unique Nesting Option ID");

                entity.Property(e => e.CostOptimiseMode).HasComment("Cost Optimization Mode - If Checked, switches optimizer objective to minimize total cost of used stock items, from material length total wastage; Unchecked will revert to material length total wastage.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.GripEndZone).HasComment("Gripping / End-zone; Stock piece end portion, which due to a certain cutting technology reasons must be either free of saw cuts (gripping end), or can not be utilized at all, say, for trim losses (left and right sum). ");

                entity.Property(e => e.IgnoreLast).HasComment("Ignore Last Stock - exclude last filled (half-empty) stock item from optimization objective and presented totals (if appropriate waste is greater than Minimal Reusable Length).");

                entity.Property(e => e.LowerLayout).HasComment("Moving the slider to Less Layouts reduces the amount of different nesting plans,however it may nest to more bars and lead to increased wastage.");

                entity.Property(e => e.MaxDiffPiece).HasComment("~Maximum Different Pieces; Maximum number of different piece kinds (sizes) allowed to be placed together in the same layout/pattern (enter zero “0”, if any number is allowed).");

                entity.Property(e => e.MaxDiffStock).HasComment("~Maximum Different Stocks - maximum number of different stock types (sizes) allowed to be actually used from the list of available stock material (enter zero “0”, if any number is allowed).");

                entity.Property(e => e.MillLengthIncrement).HasDefaultValueSql("((500))");

                entity.Property(e => e.MillMaxLength).HasDefaultValueSql("((24000))");

                entity.Property(e => e.MillMaxPlength).HasColumnName("MillMaxPLength");

                entity.Property(e => e.MillMaxPwidth).HasColumnName("MillMaxPWidth");

                entity.Property(e => e.MillMinLength).HasDefaultValueSql("((6000))");

                entity.Property(e => e.MillMinPlength).HasColumnName("MillMinPLength");

                entity.Property(e => e.MillMinPwidth).HasColumnName("MillMinPWidth");

                entity.Property(e => e.MillPlengthIncrement).HasColumnName("MillPLengthIncrement");

                entity.Property(e => e.MillPwidthIncrement).HasColumnName("MillPWidthIncrement");

                entity.Property(e => e.MinReuseLength).HasComment("Minimum Reusable Lengths; Length of shortest offcut piece (remainder) from resulting layouts that should be returned to stock inventory list as a response to “Add Reusable” command.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of Nesting Option");

                entity.Property(e => e.NestToTheoreticalOffcut)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Whether to respect the original offcut length/shape or re-nest the entire bar/sheet");

                entity.Property(e => e.NestingEngine).HasDefaultValueSql("((1))");

                entity.Property(e => e.NonUseEndZone).HasComment("Non Usable End-Zone, The way program treats the Gripping End Zone constraint. Usable / Non Usable.");

                entity.Property(e => e.OptimiseEffortLevel)
                    .HasDefaultValueSql("(5)")
                    .HasComment("Optimizer Effort Level - the slower this option is set to the longer nesting will take, however as it attempts more permutations it should lead to more efficient nesting.");

                entity.Property(e => e.PreferShortStock).HasComment("Short Length preference forces the nesting engine to use shorter rather than longer length bars. Ideal when clearing out short offcuts from Inventory.");

                entity.Property(e => e.RoundToNextPincrement).HasColumnName("RoundToNextPIncrement");

                entity.Property(e => e.SawBladeThick).HasComment("Saw Blade Thickness - gaps between items (saw kerf).");

                entity.Property(e => e.System)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Internal Key to Identity Nesting Option required by the StruMIS System");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<NestingResult>(entity =>
            {
                entity.HasKey(e => e.NestResultId);

                entity.ToTable("NestingResult");

                entity.HasIndex(e => new { e.NestResultId, e.ContractBatchId }, "IX_NestingResult_ContractBatch")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractListingId, "IX_NestingResult_ContractListing")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContractBatchId, "IX_NestingResult_FK_NestingResult_ContractBatch");

                entity.HasIndex(e => e.DeliveryAddressId, "IX_NestingResult_FK_NestingResult_DeliveryAddressID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractOffcutsOnly)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Whether to only use theoretical offcuts from the same contract");

                entity.Property(e => e.CostOptimiseMode).HasComment("Autocut Settings");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryLocationId).HasColumnName("DeliveryLocationID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Dxflocation).HasColumnName("DXFLocation");

                entity.Property(e => e.EdilistingTypeId).HasColumnName("EDIListingTypeID");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InventoryLocations).HasColumnType("xml");

                entity.Property(e => e.LowerLayout).HasComment("Autocut Settings");

                entity.Property(e => e.MaterialSource)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Source preferences as specified on front page of wizard. 1 - Supplier Lengths, 2 - Cut to Length, 3 - Mills standard lengths, 4 - Entered Lengths");

                entity.Property(e => e.MaxDiffPiece).HasComment("Autocut Settings");

                entity.Property(e => e.MaxDiffStock).HasComment("Autocut Settings");

                entity.Property(e => e.MillLengthIncrement).HasComment("Autocut Settings");

                entity.Property(e => e.MillMaxLength).HasComment("Autocut Settings");

                entity.Property(e => e.MillMaxPlength).HasColumnName("MillMaxPLength");

                entity.Property(e => e.MillMaxPwidth).HasColumnName("MillMaxPWidth");

                entity.Property(e => e.MillMinLength).HasComment("Autocut Settings");

                entity.Property(e => e.MillMinPlength).HasColumnName("MillMinPLength");

                entity.Property(e => e.MillMinPwidth).HasColumnName("MillMinPWidth");

                entity.Property(e => e.MillPlengthIncrement).HasColumnName("MillPLengthIncrement");

                entity.Property(e => e.MillPwidthIncrement).HasColumnName("MillPWidthIncrement");

                entity.Property(e => e.MinReuseLength).HasComment("Autocut Settings");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NestTfromI).HasDefaultValueSql("((0))");

                entity.Property(e => e.NestToTheoreticalOffcut).HasComment("Whether the nest respects the original offcut length/shape or re-nests the entire bar/sheet");

                entity.Property(e => e.NestingEngine).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.OptimiseEffortLevel).HasComment("Autocut Settings");

                entity.Property(e => e.PofacilityId)
                    .HasColumnName("POFacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreferCam).HasColumnName("PreferCAM");

                entity.Property(e => e.PreferShortStock).HasComment("Autocut Settings");

                entity.Property(e => e.PrelimAllocation).HasComment("0 - is a Prelim nest or not matched, 1 - Contract, 2 - Batch, 3 - Mark");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.RollingReferences).HasColumnType("xml");

                entity.Property(e => e.RoundToNextPincrement).HasColumnName("RoundToNextPIncrement");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasComment("The status of the nest: 0 - Saved, 1 - Allocated/Complete, 2 - Part Complete (possibly in future, not implimented now)");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UseCam).HasColumnName("UseCAM");

                entity.Property(e => e.UseDxf).HasColumnName("UseDXF");

                entity.Property(e => e.UseSawingLength).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseTheoreticalOffcuts).HasComment("Whether the nest utilises surplus material from existing uncut nests");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContractBatch)
                    .WithMany(p => p.NestingResults)
                    .HasForeignKey(d => d.ContractBatchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResult_ContractBatch");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.NestingResults)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_NestingResult_ContractListing");

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.NestingResults)
                    .HasForeignKey(d => d.DeliveryAddressId)
                    .HasConstraintName("FK_NestingResult_DeliveryAddressID");
            });

            modelBuilder.Entity<NestingResultAllocation>(entity =>
            {
                entity.ToTable("NestingResultAllocation");

                entity.HasIndex(e => new { e.NestingResultAllocationId, e.NestResultId }, "IX_NestingResultAllocation_Alloc_Nestresult")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemReservationId, e.NestingResultAllocationId }, "IX_NestingResultAllocation_Alloc_Reservation")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.NestResultId, e.NestingResultAllocationId, e.LinkId }, "IX_NestingResultAllocation_COMPLEX")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OffcutItemInventoryShapeId, "IX_NestingResultAllocation_FK_NestingResultAllocation_ItemInventoryShape");

                entity.HasIndex(e => e.NestingResultSupplyLengthId, "IX_NestingResultAllocation_FK_NestingResultAllocation_NestingResultSupplyLength");

                entity.HasIndex(e => new { e.WeldedBarNestingResultAllocationId, e.NestingResultAllocationId }, "IX_NestingResultAllocation_InventoryID");

                entity.HasIndex(e => e.ItemReservationId, "IX_NestingResultAllocation_ItemReservationID");

                entity.HasIndex(e => new { e.LinkId, e.ItemReservationId }, "IX_NestingResultAllocation_LinkID_ItemReservationID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Status, e.QuantityCut }, "IX_NestingResultAllocation_StatusQuantityCut");

                entity.HasIndex(e => e.WeldedBarNestingResultAllocationId, "IX_NestingResultAllocation_WeldedBarNestingResultAllocationID");

                entity.HasIndex(e => e.NestEngineWorkspace, "IX_NestingResultAllocation_Workspace")
                    .HasFillFactor(90);

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.Accept)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("If the bar/plate used on the nest is accepted on the current nest - maybe just do not save is not accepted...");

                entity.Property(e => e.AlternateItemId)
                    .HasColumnName("AlternateItemID")
                    .HasComment("Jsut for development/testing - Remove!");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryLocationId).HasColumnName("DeliveryLocationID");

                entity.Property(e => e.IsWeldedBar).HasComment("If the bar is made up of smaller parts");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId)
                    .HasColumnName("ItemInventoryID")
                    .HasComment("~ Delete???");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestEngineBarReference)
                    .HasMaxLength(400)
                    .HasComment("A nesting engine internal reference for ththis specific bar");

                entity.Property(e => e.NestEngineTask)
                    .HasMaxLength(400)
                    .HasComment("A nesting engine internal reference for the nest job this bar is part of");

                entity.Property(e => e.NestEngineUsed)
                    .HasMaxLength(200)
                    .HasComment("The nesting engine used to nest this bar");

                entity.Property(e => e.NestEngineWorkspace)
                    .HasMaxLength(400)
                    .HasComment("A nesting engine internal reference for the nest this bar is part of");

                entity.Property(e => e.NestResultId)
                    .HasColumnName("NestResultID")
                    .HasComment("Header link");

                entity.Property(e => e.NestingResultSupplyLengthId)
                    .HasColumnName("NestingResultSupplyLengthID")
                    .HasComment("On a saved nest this is the pointer to where the material will come from");

                entity.Property(e => e.Nraaux1)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux1");

                entity.Property(e => e.Nraaux2)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux2");

                entity.Property(e => e.Nraaux3)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux3");

                entity.Property(e => e.OffcutItemInventoryShapeId)
                    .HasColumnName("OffcutItemInventoryShapeID")
                    .HasComment("The shape of the offcut for plate nesting");

                entity.Property(e => e.PurchaseOrderItemId)
                    .HasColumnName("PurchaseOrderItemID")
                    .HasComment("~--DELETE--ItemReservationID handels the link maybe good for tracking!!!");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.SawWaste).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 - Saved, 1 - Allocated/Completed");

                entity.Property(e => e.StockId)
                    .HasColumnName("StockID")
                    .HasComment("Used to link the NRA table to the NRI table when inserting - donot use otherwise!");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("~--Delete?");

                entity.Property(e => e.Tmpkey).HasColumnName("tmpkey");

                entity.Property(e => e.WeldedBarNestingResultAllocationId)
                    .HasColumnName("WeldedBarNestingResultAllocationID")
                    .HasComment("The bar that will be created when this bar is welded to other pieces");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.NestingResultAllocations)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_NestingResultAllocation_ItemReservation");

                entity.HasOne(d => d.NestingResultSupplyLength)
                    .WithMany(p => p.NestingResultAllocations)
                    .HasForeignKey(d => d.NestingResultSupplyLengthId)
                    .HasConstraintName("FK_NestingResultAllocation_NestingResultSupplyLength");

                entity.HasOne(d => d.OffcutItemInventoryShape)
                    .WithMany(p => p.NestingResultAllocations)
                    .HasForeignKey(d => d.OffcutItemInventoryShapeId)
                    .HasConstraintName("FK_NestingResultAllocation_ItemInventoryShape");
            });

            modelBuilder.Entity<NestingResultAllocationArchive>(entity =>
            {
                entity.HasKey(e => e.NestingResultAllocationId);

                entity.ToTable("NestingResultAllocationArchive");

                entity.HasIndex(e => e.OffcutItemInventoryShapeId, "IX_NestingResultAllocationArchive_FK_NestingResultAllocationArchive_ItemInventoryShape");

                entity.HasIndex(e => e.ItemReservationId, "IX_NestingResultAllocationArchive_FK_NestingResultAllocationArchive_ItemReservation");

                entity.HasIndex(e => e.NestResultId, "IX_NestingResultAllocationArchive_NestResultID")
                    .HasFillFactor(90);

                entity.Property(e => e.NestingResultAllocationId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.AlternateItemId).HasColumnName("AlternateItemID");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryLocationId).HasColumnName("DeliveryLocationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestEngineBarReference).HasMaxLength(500);

                entity.Property(e => e.NestEngineTask).HasMaxLength(500);

                entity.Property(e => e.NestEngineUsed).HasMaxLength(200);

                entity.Property(e => e.NestEngineWorkspace).HasMaxLength(500);

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.NestingResultSupplyLengthId).HasColumnName("NestingResultSupplyLengthID");

                entity.Property(e => e.Nraaux1)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux1");

                entity.Property(e => e.Nraaux2)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux2");

                entity.Property(e => e.Nraaux3)
                    .HasMaxLength(100)
                    .HasColumnName("NRAAux3");

                entity.Property(e => e.OffcutItemInventoryShapeId).HasColumnName("OffcutItemInventoryShapeID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.Tmpkey).HasColumnName("tmpkey");

                entity.Property(e => e.WeldedBarNestingResultAllocationId).HasColumnName("WeldedBarNestingResultAllocationID");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.NestingResultAllocationArchives)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_NestingResultAllocationArchive_ItemReservation");

                entity.HasOne(d => d.OffcutItemInventoryShape)
                    .WithMany(p => p.NestingResultAllocationArchives)
                    .HasForeignKey(d => d.OffcutItemInventoryShapeId)
                    .HasConstraintName("FK_NestingResultAllocationArchive_ItemInventoryShape");
            });

            modelBuilder.Entity<NestingResultArchive>(entity =>
            {
                entity.HasKey(e => e.NestResultId);

                entity.ToTable("NestingResultArchive");

                entity.HasIndex(e => e.ContractBatchId, "IX_NestingResultArchive_FK_NestingResultArchive_ContractBatch");

                entity.HasIndex(e => e.ContractListingId, "IX_NestingResultArchive_FK_NestingResultArchive_ContractListing");

                entity.Property(e => e.NestResultId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestResultID");

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryLocationId).HasColumnName("DeliveryLocationID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EdilistingTypeId).HasColumnName("EDIListingTypeID");

                entity.Property(e => e.InventoryLocations).HasColumnType("xml");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.PofacilityId).HasColumnName("POFacilityID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.ContractBatch)
                    .WithMany(p => p.NestingResultArchives)
                    .HasForeignKey(d => d.ContractBatchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultArchive_ContractBatch");

                entity.HasOne(d => d.ContractListing)
                    .WithMany(p => p.NestingResultArchives)
                    .HasForeignKey(d => d.ContractListingId)
                    .HasConstraintName("FK_NestingResultArchive_ContractListing");
            });

            modelBuilder.Entity<NestingResultArchiveLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NestingResultArchiveLink");

                entity.HasIndex(e => new { e.ContractId, e.NestResultId }, "IX_NestingResultArchiveLink")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");
            });

            modelBuilder.Entity<NestingResultCuttingPlan>(entity =>
            {
                entity.HasKey(e => e.CuttingPlanId);

                entity.ToTable("NestingResultCuttingPlan");

                entity.HasIndex(e => e.CuttingPlanId, "IX_NestingResultCuttingPlan")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Chksum, "IX_NestingResultCuttingPlan_CuttingPlan");

                entity.Property(e => e.CuttingPlanId).HasColumnName("CuttingPlanID");

                entity.Property(e => e.Chksum).HasColumnName("CHKSUM");

                entity.Property(e => e.CuttingPlanDxf).HasColumnName("CuttingPlanDXF");

                entity.Property(e => e.CuttingPlanText).IsRequired();
            });

            modelBuilder.Entity<NestingResultItemDesign>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NestingResultItemDesign");

                entity.HasIndex(e => e.Chksum, "IX_NestingResultItemDesign_CHKSUM");

                entity.Property(e => e.Chksum).HasColumnName("CHKSUM");

                entity.Property(e => e.NestingResultItemDesignId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NestingResultItemDesignID");

                entity.Property(e => e.ShapeDesignData).IsRequired();

                entity.Property(e => e.ShapeDesignType)
                    .IsRequired()
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<NestingResultItemListing>(entity =>
            {
                entity.ToTable("NestingResultItemListing");

                entity.HasIndex(e => new { e.NestingResultAllocationId, e.ContractMarkPhaseLotItemId }, "IX_NestResultItemListing_AllocationID");

                entity.HasIndex(e => e.Accept, "IX_NestingResultItemListing_Accept");

                entity.HasIndex(e => e.ContractMarkItemInstanceId, "IX_NestingResultItemListing_ContractMarkItemInstanceID");

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_NestingResultItemListing_ContractMarkPhaseLotItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LinkId, e.ContractMarkPhaseLotItemId }, "IX_NestingResultItemListing_LinkContractMarkPhaseLotItem")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LinkId, e.NestingResultItemListingId }, "IX_NestingResultItemListing_LinkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.NestingResultAllocationId, e.SequenceId }, "IX_NestingResultItemListing_PrelimMark")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SequenceId, "IX_NestingResultItemListing_SequenceID");

                entity.HasIndex(e => e.NestResultId, "IX_NestresultItemListing_NestID")
                    .HasFillFactor(90);

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.Accept)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("If the item is accepted on the current nest");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ContractMarkPhaseLotItemId)
                    .HasColumnName("ContractMarkPhaseLotItemID")
                    .HasComment("The detailed CMPLIID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("THIS MUST BE THE SAME AS ON THE CONTRACTITEM TABLE - POSSIBLY REMOVE!");

                entity.Property(e => e.ItemUsedId).HasColumnName("ItemUsedID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestResultId)
                    .HasColumnName("NestResultID")
                    .HasComment("Header link");

                entity.Property(e => e.NestingResultAllocationId)
                    .HasColumnName("NestingResultAllocationID")
                    .HasComment("");

                entity.Property(e => e.NestingResultItemDesignId).HasColumnName("NestingResultItemDesignID");

                entity.Property(e => e.Nriaux1)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux1");

                entity.Property(e => e.Nriaux2)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux2");

                entity.Property(e => e.Nriaux3)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux3");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.RotatedX).HasComment("Angle Nesting - Has the bar been rotated around the X-Axis");

                entity.Property(e => e.RotatedY).HasComment("Angle Nesting - Has the bar been rotated around the Y-Axis");

                entity.Property(e => e.RotatedZ).HasComment("Angle Nesting - Has the bar been rotated around the Z-Axis");

                entity.Property(e => e.SavedContractMarkItemInstanceId).HasColumnName("SavedContractMarkItemInstanceID");

                entity.Property(e => e.SequenceId)
                    .HasColumnName("SequenceID")
                    .HasComment("The prelim marksequenceID");

                entity.Property(e => e.SequenceOnBar).HasComment("For angled nesting - indicates where on the bar this item will be cut from");

                entity.Property(e => e.StockId)
                    .HasColumnName("StockID")
                    .HasComment("DO NOT USE!!! REMOVE LATER");

                entity.Property(e => e.Waste).HasComment("The waste because of the sawblade or angle cut - This is not the offcut!");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.NestingResultItemListings)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_NestingResultItemListing_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.NestResult)
                    .WithMany(p => p.NestingResultItemListings)
                    .HasForeignKey(d => d.NestResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultItemListing_NestingResult");

                entity.HasOne(d => d.NestingResultAllocation)
                    .WithMany(p => p.NestingResultItemListings)
                    .HasForeignKey(d => d.NestingResultAllocationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NestingResultItemListing_NestingResultAllocation");

                entity.HasOne(d => d.Sequence)
                    .WithMany(p => p.NestingResultItemListings)
                    .HasForeignKey(d => d.SequenceId)
                    .HasConstraintName("FK_NestingResultItemListing_ContractPrelimMarkSequence");
            });

            modelBuilder.Entity<NestingResultItemListingArchive>(entity =>
            {
                entity.HasKey(e => e.NestingResultItemListingId);

                entity.ToTable("NestingResultItemListingArchive");

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_NestingResultItemListingArchive_FK_NestingResultItemListingArchive_ContractMarkPhaseLotItem");

                entity.HasIndex(e => e.SequenceId, "IX_NestingResultItemListingArchive_FK_NestingResultItemListingArchive_ContractPrelimMarkSequence");

                entity.HasIndex(e => e.NestResultId, "IX_NestingResultItemListingArchive_NestResultID")
                    .HasFillFactor(90);

                entity.Property(e => e.NestingResultItemListingId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemUsedId).HasColumnName("ItemUsedID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemDesignId).HasColumnName("NestingResultItemDesignID");

                entity.Property(e => e.Nriaux1)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux1");

                entity.Property(e => e.Nriaux2)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux2");

                entity.Property(e => e.Nriaux3)
                    .HasMaxLength(100)
                    .HasColumnName("NRIAux3");

                entity.Property(e => e.SavedContractMarkItemInstanceId).HasColumnName("SavedContractMarkItemInstanceID");

                entity.Property(e => e.SequenceId).HasColumnName("SequenceID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.NestingResultItemListingArchives)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_NestingResultItemListingArchive_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Sequence)
                    .WithMany(p => p.NestingResultItemListingArchives)
                    .HasForeignKey(d => d.SequenceId)
                    .HasConstraintName("FK_NestingResultItemListingArchive_ContractPrelimMarkSequence");
            });

            modelBuilder.Entity<NestingResultSupply>(entity =>
            {
                entity.ToTable("NestingResultSupply");

                entity.HasIndex(e => e.NestResultId, "IX_NestingResultSupply_FK_NestingResultSupply_NestingResult");

                entity.Property(e => e.NestingResultSupplyId).HasColumnName("NestingResultSupplyID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Include)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.PurchaseOrderId)
                    .HasColumnName("PurchaseOrderID")
                    .HasComment("IF ordered from the supplier, append to a po or if null, create a new po");

                entity.Property(e => e.SourceType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Where the material comes from: 1 - Inventory, 2 - Supplier");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UseHigherGrades).HasComment("For SupplyType inventory - display the higher grades");

                entity.Property(e => e.UseLowerGrades).HasComment("For SupplyType inventory - display the lower grades");

                entity.Property(e => e.UsedItemId)
                    .HasColumnName("UsedItemID")
                    .HasComment("The ItemID of the item that is used in nesting (Link to NestingRequiredItem)");

                entity.HasOne(d => d.NestResult)
                    .WithMany(p => p.NestingResultSupplies)
                    .HasForeignKey(d => d.NestResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultSupply_NestingResult");
            });

            modelBuilder.Entity<NestingResultSupplyArchive>(entity =>
            {
                entity.HasKey(e => e.NestingResultSupplyId);

                entity.ToTable("NestingResultSupplyArchive");

                entity.Property(e => e.NestingResultSupplyId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingResultSupplyID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UsedItemId).HasColumnName("UsedItemID");
            });

            modelBuilder.Entity<NestingResultSupplyLength>(entity =>
            {
                entity.ToTable("NestingResultSupplyLength");

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_NestingResultSupplyLength_FK_NestingResultSupplyLength_ItemInventoryProperty");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_NestingResultSupplyLength_FK_NestingResultSupplyLength_ItemInventoryShape");

                entity.HasIndex(e => e.NestingResultSupplyId, "IX_NestingResultSupplyLength_FK_NestingResultSupplyLength_NestingResultSupply");

                entity.HasIndex(e => e.PurchaseOrderItemId, "IX_NestingResultSupplyLength_FK_NestingResultSupplyLength_PurchaseOrderItem");

                entity.HasIndex(e => e.NestResultId, "IX_NestingResultSupplyLength_NestResultID");

                entity.Property(e => e.NestingResultSupplyLengthId).HasColumnName("NestingResultSupplyLengthID");

                entity.Property(e => e.Include)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemClassificationId)
                    .HasColumnName("ItemClassificationID")
                    .HasComment("Used to locate an item that is in inventory");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("THe actual ItemID (Could only be different because of grades)");

                entity.Property(e => e.ItemInventoryId)
                    .HasColumnName("ItemInventoryID")
                    .HasComment("~ Only used for synchronisation when saving - do not use for joining");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId)
                    .HasColumnName("ItemInventoryShapeID")
                    .HasComment("Used to locate an item that is in inventory");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("Used to locate an item that is in inventory");

                entity.Property(e => e.ItemReservationId)
                    .HasColumnName("ItemReservationID")
                    .HasComment("Used to locate an item that is in inventory");

                entity.Property(e => e.Length).HasComment("Inv&POL - Same as Length in Inv/POL, Supplier - the length that can be ordered");

                entity.Property(e => e.NestResultId)
                    .HasColumnName("NestResultID")
                    .HasComment("Not Needed???");

                entity.Property(e => e.NestingResultSupplyId).HasColumnName("NestingResultSupplyID");

                entity.Property(e => e.OffcutNestingResultAllocationId)
                    .HasColumnName("OffcutNestingResultAllocationID")
                    .HasComment("A link to the bar/sheet whose offcut extra Mark Items may be nested to");

                entity.Property(e => e.PurchaseOrderItemId)
                    .HasColumnName("PurchaseOrderItemID")
                    .HasComment("The Purchase Order Line ID if this item is from a current purchase order.");

                entity.Property(e => e.Quantity).HasComment("Inv&POL - Same as Qty in Inv/POL, Supplier - the qty that can be ordered(usually 999)");

                entity.Property(e => e.SourceType).HasComment("Where the material comes from: 1 - Free Inventory, 2 - Supplier new order, 3 - Reserved Inventory, 4 - Purchase Order, 5- Work Order , 6 - Theoretical Offcuts");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("The SupplierID that will supply this bar/plate, Also used when referring to an inventory line");

                entity.Property(e => e.TempKey).HasComment("~Temp key for syncing client data from other tables to this table");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasComment("Used to locate an item that is in inventory/Price Unit for a supplier length");

                entity.Property(e => e.UnitPrice).HasComment("Used to locate an item that is in inventory/Price of the supplier length (could differ from NRSupply table)");

                entity.Property(e => e.UsedItemId)
                    .HasColumnName("UsedItemID")
                    .HasComment("The itemID of what we are looking for (What the user wanted)");

                entity.Property(e => e.Width).HasComment("Inv&POL - Same as Width in Inv/POL, Supplier - the width that can be ordered");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasComment("Used to locate an item that is in inventory");

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.NestingResultSupplyLengths)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .HasConstraintName("FK_NestingResultSupplyLength_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.NestingResultSupplyLengths)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_NestingResultSupplyLength_ItemInventoryShape");

                entity.HasOne(d => d.NestResult)
                    .WithMany(p => p.NestingResultSupplyLengths)
                    .HasForeignKey(d => d.NestResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultSupplyLength_NestingResult");

                entity.HasOne(d => d.NestingResultSupply)
                    .WithMany(p => p.NestingResultSupplyLengths)
                    .HasForeignKey(d => d.NestingResultSupplyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultSupplyLength_NestingResultSupply");

                entity.HasOne(d => d.PurchaseOrderItem)
                    .WithMany(p => p.NestingResultSupplyLengths)
                    .HasForeignKey(d => d.PurchaseOrderItemId)
                    .HasConstraintName("FK_NestingResultSupplyLength_PurchaseOrderItem");
            });

            modelBuilder.Entity<NestingResultSupplyLengthArchive>(entity =>
            {
                entity.HasKey(e => e.NestingResultSupplyLengthId);

                entity.ToTable("NestingResultSupplyLengthArchive");

                entity.HasIndex(e => e.ItemInventoryPropertyId, "IX_NestingResultSupplyLengthArchive_FK_NestingResultSupplyLengthArchive_ItemInventoryProperty");

                entity.HasIndex(e => e.ItemInventoryShapeId, "IX_NestingResultSupplyLengthArchive_FK_NestingResultSupplyLengthArchive_ItemInventoryShape");

                entity.HasIndex(e => e.PurchaseOrderItemId, "IX_NestingResultSupplyLengthArchive_FK_NestingResultSupplyLengthArchive_PurchaseOrderItem");

                entity.HasIndex(e => e.NestResultId, "IX_NestingResultSupplyLengthArchive_NestResultID")
                    .HasFillFactor(90);

                entity.Property(e => e.NestingResultSupplyLengthId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingResultSupplyLengthID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.NestingResultSupplyId).HasColumnName("NestingResultSupplyID");

                entity.Property(e => e.OffcutNestingResultAllocationId).HasColumnName("OffcutNestingResultAllocationID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UsedItemId).HasColumnName("UsedItemID");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.ItemInventoryProperty)
                    .WithMany(p => p.NestingResultSupplyLengthArchives)
                    .HasForeignKey(d => d.ItemInventoryPropertyId)
                    .HasConstraintName("FK_NestingResultSupplyLengthArchive_ItemInventoryProperty");

                entity.HasOne(d => d.ItemInventoryShape)
                    .WithMany(p => p.NestingResultSupplyLengthArchives)
                    .HasForeignKey(d => d.ItemInventoryShapeId)
                    .HasConstraintName("FK_NestingResultSupplyLengthArchive_ItemInventoryShape");

                entity.HasOne(d => d.PurchaseOrderItem)
                    .WithMany(p => p.NestingResultSupplyLengthArchives)
                    .HasForeignKey(d => d.PurchaseOrderItemId)
                    .HasConstraintName("FK_NestingResultSupplyLengthArchive_PurchaseOrderItem");
            });

            modelBuilder.Entity<NestingResultSupplyLengthInstance>(entity =>
            {
                entity.ToTable("NestingResultSupplyLengthInstance");

                entity.HasIndex(e => e.ItemClassificationId, "IX_NestingResultSupplyLengthInstance_FK_NestingResultSupplyLengthInstance_ItemClassification");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidid, "IX_NestingResultSupplyLengthInstance_FK_NestingResultSupplyLengthInstance_ItemInventoryTrackingGuid");

                entity.HasIndex(e => e.ItemReservationId, "IX_NestingResultSupplyLengthInstance_FK_NestingResultSupplyLengthInstance_ItemReservation");

                entity.HasIndex(e => e.NestingResultSupplyLengthId, "IX_NestingResultSupplyLengthInstance_FK_NestingResultSupplyLengthInstance_NestingResultSupplyLength");

                entity.Property(e => e.NestingResultSupplyLengthInstanceId).HasColumnName("NestingResultSupplyLengthInstanceID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.NestingResultSupplyLengthId).HasColumnName("NestingResultSupplyLengthID");

                entity.HasOne(d => d.ItemClassification)
                    .WithMany(p => p.NestingResultSupplyLengthInstances)
                    .HasForeignKey(d => d.ItemClassificationId)
                    .HasConstraintName("FK_NestingResultSupplyLengthInstance_ItemClassification");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.NestingResultSupplyLengthInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultSupplyLengthInstance_ItemInventoryTrackingGuid");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.NestingResultSupplyLengthInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_NestingResultSupplyLengthInstance_ItemReservation");

                entity.HasOne(d => d.NestingResultSupplyLength)
                    .WithMany(p => p.NestingResultSupplyLengthInstances)
                    .HasForeignKey(d => d.NestingResultSupplyLengthId)
                    .HasConstraintName("FK_NestingResultSupplyLengthInstance_NestingResultSupplyLength");
            });

            modelBuilder.Entity<NestingResultSupplyLengthInstanceArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NestingResultSupplyLengthInstanceArchive");

                entity.HasIndex(e => e.NestingResultSupplyLengthId, "IX_NestingResultSupplyLengthInstanceArchive_NestingResultSupplyLengthID")
                    .HasFillFactor(90);

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemInventoryTrackingGuidid).HasColumnName("ItemInventoryTrackingGUIDID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.NestingResultSupplyLengthId).HasColumnName("NestingResultSupplyLengthID");

                entity.Property(e => e.NestingResultSupplyLengthInstanceId).HasColumnName("NestingResultSupplyLengthInstanceID");
            });

            modelBuilder.Entity<NestingResultWeldedBar>(entity =>
            {
                entity.ToTable("NestingResultWeldedBar");

                entity.HasIndex(e => e.BarNestingResultSupplyLengthId, "IX_NestingResultWeldedBar_FK_NestingResultWeldedBar_NestingResultSupplyLength");

                entity.HasIndex(e => e.PartNestingResultSupplyLengthId, "IX_NestingResultWeldedBar_FK_NestingResultWeldedBar_NestingResultSupplyLength1");

                entity.Property(e => e.NestingResultWeldedBarId).HasColumnName("NestingResultWeldedBarID");

                entity.Property(e => e.BarNestingResultSupplyLengthId).HasColumnName("BarNestingResultSupplyLengthID");

                entity.Property(e => e.PartNestingResultSupplyLengthId).HasColumnName("PartNestingResultSupplyLengthID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.BarNestingResultSupplyLength)
                    .WithMany(p => p.NestingResultWeldedBarBarNestingResultSupplyLengths)
                    .HasForeignKey(d => d.BarNestingResultSupplyLengthId)
                    .HasConstraintName("FK_NestingResultWeldedBar_NestingResultSupplyLength");

                entity.HasOne(d => d.PartNestingResultSupplyLength)
                    .WithMany(p => p.NestingResultWeldedBarPartNestingResultSupplyLengths)
                    .HasForeignKey(d => d.PartNestingResultSupplyLengthId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NestingResultWeldedBar_NestingResultSupplyLength1");
            });

            modelBuilder.Entity<NestingResultWeldedBarArchive>(entity =>
            {
                entity.HasKey(e => e.NestingResultWeldedBarId);

                entity.ToTable("NestingResultWeldedBarArchive");

                entity.Property(e => e.NestingResultWeldedBarId)
                    .ValueGeneratedNever()
                    .HasColumnName("NestingResultWeldedBarID");

                entity.Property(e => e.BarNestingResultSupplyLengthId).HasColumnName("BarNestingResultSupplyLengthID");

                entity.Property(e => e.PartNestingResultSupplyLengthId).HasColumnName("PartNestingResultSupplyLengthID");
            });

            modelBuilder.Entity<Nsitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_NSItems");

                entity.Property(e => e.Ccode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ccode")
                    .IsFixedLength();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("code")
                    .IsFixedLength();

                entity.Property(e => e.Cup)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cup")
                    .IsFixedLength();

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("descr")
                    .IsFixedLength();

                entity.Property(e => e.Diam)
                    .HasColumnType("decimal(3, 0)")
                    .HasColumnName("diam");

                entity.Property(e => e.Fin)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("fin")
                    .IsFixedLength();

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("grade")
                    .IsFixedLength();

                entity.Property(e => e.Lastdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("lastdate");

                entity.Property(e => e.Lastqty)
                    .HasColumnType("decimal(8, 0)")
                    .HasColumnName("lastqty");

                entity.Property(e => e.Lastrate)
                    .HasColumnType("decimal(9, 3)")
                    .HasColumnName("lastrate");

                entity.Property(e => e.Lastsupp)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("lastsupp")
                    .IsFixedLength();

                entity.Property(e => e.Len)
                    .HasColumnType("decimal(7, 1)")
                    .HasColumnName("len");

                entity.Property(e => e.Maxlevel)
                    .HasColumnType("decimal(8, 0)")
                    .HasColumnName("maxlevel");

                entity.Property(e => e.Minlevel)
                    .HasColumnType("decimal(8, 0)")
                    .HasColumnName("minlevel");

                entity.Property(e => e.Pcat)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pcat")
                    .IsFixedLength();

                entity.Property(e => e.Prefsupp)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("prefsupp")
                    .IsFixedLength();

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("rate");

                entity.Property(e => e.Reorderqty)
                    .HasColumnType("decimal(5, 0)")
                    .HasColumnName("reorderqty");

                entity.Property(e => e.Shortdes)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("shortdes")
                    .IsFixedLength();

                entity.Property(e => e.Sprice1)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("sprice1");

                entity.Property(e => e.Sprice2)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("sprice2");

                entity.Property(e => e.Sprice3)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("sprice3");

                entity.Property(e => e.Stockitem).HasColumnName("stockitem");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("unit")
                    .IsFixedLength();

                entity.Property(e => e.Unitqty)
                    .HasColumnType("decimal(4, 0)")
                    .HasColumnName("unitqty");

                entity.Property(e => e.Unittype)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("unittype")
                    .IsFixedLength();

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("weight");
            });

            modelBuilder.Entity<PaymentTerm>(entity =>
            {
                entity.HasKey(e => e.PaymentTermsId);

                entity.Property(e => e.PaymentTermsId)
                    .HasColumnName("PaymentTermsID")
                    .HasComment("Unique ID for the payment term");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created. ");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the payment term");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of payment term");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PlanningCalendar>(entity =>
            {
                entity.HasKey(e => e.CalendarId)
                    .HasName("PK__PlanningCalendar__1FDE3944");

                entity.ToTable("PlanningCalendar");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<PlanningCalendarBase>(entity =>
            {
                entity.ToTable("PlanningCalendarBase");

                entity.HasIndex(e => e.BaseCalendarId, "IX_PlanningCalendarBase_FK_CalendarBase_BaseCalendar");

                entity.HasIndex(e => e.CalendarId, "IX_PlanningCalendarBase_FK_CalendarBase_Calendar");

                entity.Property(e => e.BaseCalendarId).HasColumnName("BaseCalendarID");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.BaseCalendar)
                    .WithMany(p => p.PlanningCalendarBaseBaseCalendars)
                    .HasForeignKey(d => d.BaseCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalendarBase_BaseCalendar");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.PlanningCalendarBaseCalendars)
                    .HasForeignKey(d => d.CalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalendarBase_Calendar");
            });

            modelBuilder.Entity<PlanningDetail>(entity =>
            {
                entity.ToTable("PlanningDetail");

                entity.HasIndex(e => new { e.StartDate, e.EndDate }, "IX_PlanningDetail_Dates")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LotId, "IX_PlanningDetail_FK_PlanningDetail_ContractLot");

                entity.HasIndex(e => e.ItemLocationId, "IX_PlanningDetail_FK_PlanningDetail_ItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_PlanningDetail_FK_PlanningDetail_ProductionProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_PlanningDetail_FK_PlanningDetail_ProductionWorkStation");

                entity.Property(e => e.PlanningDetailId).HasColumnName("PlanningDetailID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrderTypeId).HasColumnName("WorkOrderTypeID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.PlanningDetails)
                    .HasForeignKey(d => d.ItemLocationId)
                    .HasConstraintName("FK_PlanningDetail_ItemLocation");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.PlanningDetails)
                    .HasForeignKey(d => d.LotId)
                    .HasConstraintName("FK_PlanningDetail_ContractLot");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.PlanningDetails)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_PlanningDetail_ProductionProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.PlanningDetails)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_PlanningDetail_ProductionWorkStation");
            });

            modelBuilder.Entity<PlanningException>(entity =>
            {
                entity.HasKey(e => e.CalendarExceptionId)
                    .HasName("PK__PlanningExceptio__439189D5");

                entity.ToTable("PlanningException");

                entity.HasIndex(e => e.CalendarId, "IX_PlanningException_FK_CalendarException_Calendar");

                entity.HasIndex(e => e.TimePeriodId, "IX_PlanningException_FK_CalendarException_TimePeriod");

                entity.Property(e => e.CalendarExceptionId).HasColumnName("CalendarExceptionID");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TimePeriodId).HasColumnName("TimePeriodID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.PlanningExceptions)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_CalendarException_Calendar");

                entity.HasOne(d => d.TimePeriod)
                    .WithMany(p => p.PlanningExceptions)
                    .HasForeignKey(d => d.TimePeriodId)
                    .HasConstraintName("FK_CalendarException_TimePeriod");
            });

            modelBuilder.Entity<PlanningExceptionWorkingTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PlanningExceptionWorkingTime");

                entity.HasIndex(e => e.CalendarExceptionId, "IX_PlanningExceptionWorkingTime_FK_ExceptionWorkingTime_Exception");

                entity.HasIndex(e => e.WorkingTimeId, "IX_PlanningExceptionWorkingTime_FK_ExceptionWorkingTime_WorkingTime");

                entity.Property(e => e.CalendarExceptionId).HasColumnName("CalendarExceptionID");

                entity.Property(e => e.WorkingTimeId).HasColumnName("WorkingTimeID");

                entity.HasOne(d => d.CalendarException)
                    .WithMany()
                    .HasForeignKey(d => d.CalendarExceptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExceptionWorkingTime_Exception");

                entity.HasOne(d => d.WorkingTime)
                    .WithMany()
                    .HasForeignKey(d => d.WorkingTimeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExceptionWorkingTime_WorkingTime");
            });

            modelBuilder.Entity<PlanningLongRange>(entity =>
            {
                entity.ToTable("PlanningLongRange");

                entity.Property(e => e.PlanningLongRangeId).HasColumnName("PlanningLongRangeID");

                entity.Property(e => e.CapacityAvailable).HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubsectionId).HasColumnName("EstimateSubsectionID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Tempkey).HasColumnName("tempkey");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PlanningLongRangeLine>(entity =>
            {
                entity.ToTable("PlanningLongRangeLine");

                entity.HasIndex(e => e.PlanningLongRangeId, "IX_PlanningLongRangeLine_FK_PlanningLongRangeLine_PlanningLongRangeID");

                entity.Property(e => e.PlanningLongRangeLineId).HasColumnName("PlanningLongRangeLineID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.PlanningLongRangeId).HasColumnName("PlanningLongRangeID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.PlanningLongRange)
                    .WithMany(p => p.PlanningLongRangeLines)
                    .HasForeignKey(d => d.PlanningLongRangeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanningLongRangeLine_PlanningLongRangeID");
            });

            modelBuilder.Entity<PlanningLongRangeLineEvent>(entity =>
            {
                entity.ToTable("PlanningLongRangeLineEvent");

                entity.HasIndex(e => e.PlanningLongRangeLineId, "IX_PlanningLongRangeLineEvent_FK_PlanningLongRangeLineEvent_PlanningLongRangeLine");

                entity.Property(e => e.PlanningLongRangeLineEventId).HasColumnName("PlanningLongRangeLineEventID");

                entity.Property(e => e.EventTypeId).HasColumnName("EventTypeID");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.PlanningLongRangeLineId).HasColumnName("PlanningLongRangeLineID");

                entity.HasOne(d => d.PlanningLongRangeLine)
                    .WithMany(p => p.PlanningLongRangeLineEvents)
                    .HasForeignKey(d => d.PlanningLongRangeLineId)
                    .HasConstraintName("FK_PlanningLongRangeLineEvent_PlanningLongRangeLine");
            });

            modelBuilder.Entity<PlanningLongRangeLineLotLink>(entity =>
            {
                entity.ToTable("PlanningLongRangeLineLotLink");

                entity.HasIndex(e => e.LotId, "IX_PlanningLongRangeLineLotLink_FK_PlanningLongRangeLineLotLink_ContractLot");

                entity.HasIndex(e => e.PlanningLongRangeLineId, "IX_PlanningLongRangeLineLotLink_FK_PlanningLongRangeLineLotLink_PlanningLongRangeLine");

                entity.Property(e => e.PlanningLongRangeLineLotLinkId).HasColumnName("PlanningLongRangeLineLotLinkID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.PlanningDetailId).HasColumnName("PlanningDetailID");

                entity.Property(e => e.PlanningLongRangeLineId).HasColumnName("PlanningLongRangeLineID");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.PlanningLongRangeLineLotLinks)
                    .HasForeignKey(d => d.LotId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanningLongRangeLineLotLink_ContractLot");

                entity.HasOne(d => d.PlanningLongRangeLine)
                    .WithMany(p => p.PlanningLongRangeLineLotLinks)
                    .HasForeignKey(d => d.PlanningLongRangeLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanningLongRangeLineLotLink_PlanningLongRangeLine");
            });

            modelBuilder.Entity<PlanningTimePeriod>(entity =>
            {
                entity.HasKey(e => e.TimePeriodId)
                    .HasName("PK__PlanningTimePeri__4579D247");

                entity.ToTable("PlanningTimePeriod");

                entity.Property(e => e.TimePeriodId).HasColumnName("TimePeriodID");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PlanningWorkWeek>(entity =>
            {
                entity.HasKey(e => e.WorkWeekId)
                    .HasName("PK__PlanningWorkWeek__2A5BC7B7");

                entity.ToTable("PlanningWorkWeek");

                entity.HasIndex(e => e.CalendarId, "IX_PlanningWorkWeek_FK_WorkWeek_Calendar");

                entity.Property(e => e.WorkWeekId).HasColumnName("WorkWeekID");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.PlanningWorkWeeks)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_WorkWeek_Calendar");
            });

            modelBuilder.Entity<PlanningWorkWeekDay>(entity =>
            {
                entity.HasKey(e => e.WorkWeekDayId)
                    .HasName("PK__PlanningWorkWeek__009A9815");

                entity.ToTable("PlanningWorkWeekDay");

                entity.HasIndex(e => e.WorkWeekId, "IX_PlanningWorkWeekDay_FK_WorkWeekDay_WorkWeek");

                entity.Property(e => e.WorkWeekDayId).HasColumnName("WorkWeekDayID");

                entity.Property(e => e.WorkWeekId).HasColumnName("WorkWeekID");

                entity.HasOne(d => d.WorkWeek)
                    .WithMany(p => p.PlanningWorkWeekDays)
                    .HasForeignKey(d => d.WorkWeekId)
                    .HasConstraintName("FK_WorkWeekDay_WorkWeek");
            });

            modelBuilder.Entity<PlanningWorkWeekDayWorkingTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PlanningWorkWeekDayWorkingTime");

                entity.HasIndex(e => e.WorkWeekDayId, "IX_PlanningWorkWeekDayWorkingTime_FK_WorkWeekDayWorkingTime_WorkWeekDay");

                entity.HasIndex(e => e.WorkingTimeId, "IX_PlanningWorkWeekDayWorkingTime_FK_WorkWeekDayWorkingTime_WorkingTime");

                entity.Property(e => e.WorkWeekDayId).HasColumnName("WorkWeekDayID");

                entity.Property(e => e.WorkingTimeId).HasColumnName("WorkingTimeID");

                entity.HasOne(d => d.WorkWeekDay)
                    .WithMany()
                    .HasForeignKey(d => d.WorkWeekDayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkWeekDayWorkingTime_WorkWeekDay");

                entity.HasOne(d => d.WorkingTime)
                    .WithMany()
                    .HasForeignKey(d => d.WorkingTimeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkWeekDayWorkingTime_WorkingTime");
            });

            modelBuilder.Entity<PlanningWorkWeekTimePeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PlanningWorkWeekTimePeriod");

                entity.HasIndex(e => e.TimePeriodId, "IX_PlanningWorkWeekTimePeriod_FK_WorkWeekTimePeriod_TimePeriod");

                entity.HasIndex(e => e.WorkWeekId, "IX_PlanningWorkWeekTimePeriod_FK_WorkWeekTimePeriod_WorkWeek");

                entity.Property(e => e.TimePeriodId).HasColumnName("TimePeriodID");

                entity.Property(e => e.WorkWeekId).HasColumnName("WorkWeekID");

                entity.HasOne(d => d.TimePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.TimePeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkWeekTimePeriod_TimePeriod");

                entity.HasOne(d => d.WorkWeek)
                    .WithMany()
                    .HasForeignKey(d => d.WorkWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkWeekTimePeriod_WorkWeek");
            });

            modelBuilder.Entity<PlanningWorkingTime>(entity =>
            {
                entity.HasKey(e => e.WorkingTimeId)
                    .HasName("PK__PlanningWorkingT__0FDCDBA5");

                entity.ToTable("PlanningWorkingTime");

                entity.Property(e => e.WorkingTimeId).HasColumnName("WorkingTimeID");
            });

            modelBuilder.Entity<PostProcessor>(entity =>
            {
                entity.ToTable("PostProcessor");

                entity.Property(e => e.PostProcessorId).HasColumnName("PostProcessorID");

                entity.Property(e => e.Camformat).HasColumnName("CAMFormat");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParameterFile).HasMaxLength(100);

                entity.Property(e => e.Parameters)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'<%InputPath%> <%OutputPath%>')");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.ToTable("Process");

                entity.HasIndex(e => e.CostCodeId, "IX_Process_FK_Process_CostCode");

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessTypeId).HasColumnName("ProcessTypeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.Processes)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Process_CostCode");
            });

            modelBuilder.Entity<ProductionContainer>(entity =>
            {
                entity.ToTable("ProductionContainer");

                entity.HasIndex(e => e.FacilityId, "IX_ProductionContainer_FK_ProductionContainer_FacilityID");

                entity.HasIndex(e => e.ItemLocationAddressId, "IX_ProductionContainer_FK_ProductionContainer_ItemLocationAddressID");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionContainer_ItemLocationID");

                entity.HasIndex(e => e.TransactionId, "IX_ProductionContainer_TransactionID")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionContainerId)
                    .HasColumnName("ProductionContainerID")
                    .HasComment("The system ID of the Container.");

                entity.Property(e => e.Container)
                    .HasMaxLength(255)
                    .HasComment("The label of the Container.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The User who created the Container.");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the Container was created.");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasComment("The dispatch date of the Container.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("The Description of the Container.");

                entity.Property(e => e.Etadate)
                    .HasColumnType("datetime")
                    .HasColumnName("ETADate")
                    .HasComment("The arrival date of the ship transporting the Container.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasComment("The Faciltiy the Container is being dispatched from.");

                entity.Property(e => e.ItemLocationAddressId)
                    .HasColumnName("ItemLocationAddressID")
                    .HasComment("The Delivery Address.");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The Delivery Location.");

                entity.Property(e => e.ItemLocationTypeId)
                    .HasColumnName("ItemLocationTypeID")
                    .HasDefaultValueSql("((4))")
                    .HasComment("The Type of the Delivery Location.");

                entity.Property(e => e.List)
                    .HasMaxLength(255)
                    .HasComment("The List Reference of the Container.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The system name of the Container.");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the Container.");

                entity.Property(e => e.Reference)
                    .HasMaxLength(255)
                    .HasComment("The Reference of the Container.");

                entity.Property(e => e.SailDate)
                    .HasColumnType("datetime")
                    .HasComment("The sailing date of the ship transporting the Container.");

                entity.Property(e => e.Seal1)
                    .HasMaxLength(255)
                    .HasComment("The 1st seal code of the Container.");

                entity.Property(e => e.Seal2)
                    .HasMaxLength(255)
                    .HasComment("The second seal code of the Container.");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Status of the Container.");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last User to update the Container.");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the Container was last updated.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Vessel)
                    .HasMaxLength(255)
                    .HasComment("The ship transporting the Container.");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductionContainers)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ProductionContainer_FacilityID");

                entity.HasOne(d => d.ItemLocationAddress)
                    .WithMany(p => p.ProductionContainers)
                    .HasForeignKey(d => d.ItemLocationAddressId)
                    .HasConstraintName("FK_ProductionContainer_ItemLocationAddressID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionContainers)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionContainer_ItemLocationID");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ProductionContainers)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_ProductionContainer_ItemInventoryTransaction");
            });

            modelBuilder.Entity<ProductionContainerItem>(entity =>
            {
                entity.ToTable("ProductionContainerItem");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionContainerItem_FK_ProductionContainerItem_FromProductionProcess");

                entity.HasIndex(e => e.TransactionLineId, "IX_ProductionContainerItem_FK_ProductionContainerItem_ItemInventoryTransactionLine");

                entity.HasIndex(e => e.ToProductionProcessId, "IX_ProductionContainerItem_FK_ProductionContainerItem_ToProductionProcess");

                entity.HasIndex(e => e.ProductionContainerId, "IX_ProductionContainerItem_ProductionContainerID");

                entity.HasIndex(e => e.ProductionPackageId, "IX_ProductionContainerItem_ProductionPackageID");

                entity.HasIndex(e => e.ProductionProposedMovementId, "IX_ProductionContainerItem_ProductionProposedMovementID");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ProductionContainerItem_ProductionWorkOrderContractID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionContainerItem_ProductionWorkOrderID");

                entity.Property(e => e.ProductionContainerItemId).HasColumnName("ProductionContainerItemID");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("The Description of the Extra.");

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionContainerId).HasColumnName("ProductionContainerID");

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionProposedMovementId).HasColumnName("ProductionProposedMovementID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.Quantity)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Quantity of the Extra.");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.Weight).HasComment("The unit Weight of the Extra.");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionContainerItemFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionContainerItem_FromProductionProcess");

                entity.HasOne(d => d.ProductionContainer)
                    .WithMany(p => p.ProductionContainerItems)
                    .HasForeignKey(d => d.ProductionContainerId)
                    .HasConstraintName("FK_ProductionContainerItem_ProductionContainer");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionContainerItems)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionContainerItem_ProductionPackage");

                entity.HasOne(d => d.ProductionProposedMovement)
                    .WithMany(p => p.ProductionContainerItems)
                    .HasForeignKey(d => d.ProductionProposedMovementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionContainerItem_ProductionProposedMovement");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionContainerItems)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionContainerItem_ProductionWorkOrder");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionContainerItemToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionContainerItem_ToProductionProcess");

                entity.HasOne(d => d.TransactionLine)
                    .WithMany(p => p.ProductionContainerItems)
                    .HasForeignKey(d => d.TransactionLineId)
                    .HasConstraintName("FK_ProductionContainerItem_ItemInventoryTransactionLine");
            });

            modelBuilder.Entity<ProductionContainerItemArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionContainerItemId);

                entity.ToTable("ProductionContainerItemArchive");

                entity.Property(e => e.ProductionContainerItemId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionContainerItemID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionContainerId).HasColumnName("ProductionContainerID");

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionProposedMovementId).HasColumnName("ProductionProposedMovementID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionContainerItemArchiveFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .HasConstraintName("FK_ProductionContainerItemArchive_FromProductionProcess");

                entity.HasOne(d => d.ProductionContainer)
                    .WithMany(p => p.ProductionContainerItemArchives)
                    .HasForeignKey(d => d.ProductionContainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionContainerItemArchive_ProductionContainer");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionContainerItemArchives)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .HasConstraintName("FK_ProductionContainerItemArchive_ProductionPackage");

                entity.HasOne(d => d.ProductionProposedMovement)
                    .WithMany(p => p.ProductionContainerItemArchives)
                    .HasForeignKey(d => d.ProductionProposedMovementId)
                    .HasConstraintName("FK_ProductionContainerItemArchive_ProductionProposedMovement");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionContainerItemArchiveToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionContainerItemArchive_ToProductionProcess");
            });

            modelBuilder.Entity<ProductionPackage>(entity =>
            {
                entity.ToTable("ProductionPackage");

                entity.HasIndex(e => e.FacilityId, "IX_ProductionPackage_FK_ProductionPackage_FacilityID");

                entity.HasIndex(e => e.ItemLocationAddressId, "IX_ProductionPackage_FK_ProductionPackage_ItemLocationAddressID");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionPackage_ItemLocationID");

                entity.HasIndex(e => e.TransactionId, "IX_ProductionPackage_TransactionID")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionPackageId)
                    .HasColumnName("ProductionPackageID")
                    .HasComment("The system ID of the Package.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The User who created the Package.");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the Package was created.");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasComment("The dispatch date of the Package.");

                entity.Property(e => e.Depth).HasComment("The depth of the Package.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("The Description of the Package.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasComment("The Faciltiy the Package is being dispatched from.");

                entity.Property(e => e.ItemLocationAddressId)
                    .HasColumnName("ItemLocationAddressID")
                    .HasComment("The Delivery Address.");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The Delivery Location.");

                entity.Property(e => e.ItemLocationTypeId)
                    .HasColumnName("ItemLocationTypeID")
                    .HasDefaultValueSql("((4))")
                    .HasComment("The Type of the Delivery Location.");

                entity.Property(e => e.Length).HasComment("The length of the Package.");

                entity.Property(e => e.List)
                    .HasMaxLength(255)
                    .HasComment("The List Reference of the Package.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The system name of the Package.");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the Package.");

                entity.Property(e => e.ProductionPackageTypeId)
                    .HasColumnName("ProductionPackageTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Type of the Package.");

                entity.Property(e => e.Reference)
                    .HasMaxLength(255)
                    .HasComment("The Reference of the Package.");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Status of the Package.");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last User to update the Package.");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the Package was last updated.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Width).HasComment("The width of the Package.");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.ProductionPackages)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_ProductionPackage_FacilityID");

                entity.HasOne(d => d.ItemLocationAddress)
                    .WithMany(p => p.ProductionPackages)
                    .HasForeignKey(d => d.ItemLocationAddressId)
                    .HasConstraintName("FK_ProductionPackage_ItemLocationAddressID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionPackages)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionPackage_ItemLocationID");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ProductionPackages)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_ProductionPackage_ItemInventoryTransaction");
            });

            modelBuilder.Entity<ProductionPackageItem>(entity =>
            {
                entity.ToTable("ProductionPackageItem");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionPackageItem_FK_ProductionPackageItem_FromProductionProcess");

                entity.HasIndex(e => e.TransactionLineId, "IX_ProductionPackageItem_FK_ProductionPackageItem_ItemInventoryTransactionLine");

                entity.HasIndex(e => e.ToProductionProcessId, "IX_ProductionPackageItem_FK_ProductionPackageItem_ToProductionProcess");

                entity.HasIndex(e => e.ProductionPackageId, "IX_ProductionPackageItem_ProductionPackageID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionPackageItem_ProductionWorkOrderID");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "ProductionPackageItem_ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionPackageItemId).HasColumnName("ProductionPackageItemID");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("The Description of the Extra.");

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.Quantity)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Quantity of the Extra.");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.Weight).HasComment("The unit Weight of the Extra.");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionPackageItemFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionPackageItem_FromProductionProcess");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionPackageItems)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .HasConstraintName("FK_ProductionPackageItem_ProductionPackage");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionPackageItems)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionPackageItem_ProductionWorkOrder");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionPackageItemToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionPackageItem_ToProductionProcess");

                entity.HasOne(d => d.TransactionLine)
                    .WithMany(p => p.ProductionPackageItems)
                    .HasForeignKey(d => d.TransactionLineId)
                    .HasConstraintName("FK_ProductionPackageItem_ItemInventoryTransactionLine");
            });

            modelBuilder.Entity<ProductionPackageItemArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionPackageItemId);

                entity.ToTable("ProductionPackageItemArchive");

                entity.Property(e => e.ProductionPackageItemId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionPackageItemID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionPackageItemArchiveFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .HasConstraintName("FK_ProductionPackageItemArchive_FromProductionProcess");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionPackageItemArchives)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionPackageItemArchive_ProductionPackage");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionPackageItemArchiveToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionPackageItemArchive_ToProductionProcess");
            });

            modelBuilder.Entity<ProductionProcess>(entity =>
            {
                entity.ToTable("ProductionProcess");

                entity.HasIndex(e => e.CostCodeId, "IX_ProductionProcess_FK_ProductionProcess_CostCode");

                entity.HasIndex(e => e.DefaultItemLocationId, "IX_ProductionProcess_FK_ProductionProcess_ItemLocation");

                entity.HasIndex(e => e.ProductionStageId, "IX_ProductionProcess_FK_ProductionProcess_ProductionStage");

                entity.HasIndex(e => e.DefaultWorkStationId, "IX_ProductionProcess_FK_ProductionProcess_ProductionWorkStation");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.CamProcessId).HasColumnName("CamProcessID");

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultItemLocationId).HasColumnName("DefaultItemLocationID");

                entity.Property(e => e.DefaultLocationTransferReportId).HasColumnName("DefaultLocationTransferReportID");

                entity.Property(e => e.DefaultPrinter).HasMaxLength(50);

                entity.Property(e => e.DefaultWorkStationId)
                    .HasColumnName("DefaultWorkStationID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DisplayTimeUnitId)
                    .HasColumnName("DisplayTimeUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Minutes, Hours, Days");

                entity.Property(e => e.EstimateProcessId).HasColumnName("EstimateProcessID");

                entity.Property(e => e.FittingProcessId).HasColumnName("FittingProcessID");

                entity.Property(e => e.Inspection).HasComment("Used by RF Barcoding to indicate that the material needs inspecting.");

                entity.Property(e => e.ItemLocationTypeId)
                    .HasColumnName("ItemLocationTypeID")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionStageId).HasColumnName("ProductionStageID");

                entity.Property(e => e.Sort)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Used to define order that Process is displayed the Production Control tree");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.ProductionProcesses)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProcess_CostCode");

                entity.HasOne(d => d.DefaultItemLocation)
                    .WithMany(p => p.ProductionProcesses)
                    .HasForeignKey(d => d.DefaultItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProcess_ItemLocation");

                entity.HasOne(d => d.DefaultWorkStation)
                    .WithMany(p => p.ProductionProcesses)
                    .HasForeignKey(d => d.DefaultWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProcess_ProductionWorkStation");

                entity.HasOne(d => d.ProductionStage)
                    .WithMany(p => p.ProductionProcesses)
                    .HasForeignKey(d => d.ProductionStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProcess_ProductionStage");
            });

            modelBuilder.Entity<ProductionProcessCamcrossReference>(entity =>
            {
                entity.HasKey(e => e.ProductionProcessCamreferenceId);

                entity.ToTable("ProductionProcessCAMCrossReference");

                entity.HasIndex(e => e.CamprocessId, "IX_ProductionProcessCAMCrossReference_CAMProcessID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionProcessCAMCrossReference_FK_ProductionProcessCAMCrossReference_ProductionProcess");

                entity.Property(e => e.ProductionProcessCamreferenceId).HasColumnName("ProductionProcessCAMReferenceID");

                entity.Property(e => e.CamprocessId).HasColumnName("CAMProcessID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionProcessCamcrossReferences)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ProductionProcessCAMCrossReference_ProductionProcess");
            });

            modelBuilder.Entity<ProductionProcessRole>(entity =>
            {
                entity.ToTable("ProductionProcessRole");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionProcessRole_FK_ProductionProcessRole_ProductionProcess");

                entity.Property(e => e.ProductionProcessRoleId).HasColumnName("ProductionProcessRoleID");

                entity.Property(e => e.AllowMoveFrom)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionProcessRoles)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ProductionProcessRole_ProductionProcess");
            });

            modelBuilder.Entity<ProductionProcessSequence>(entity =>
            {
                entity.ToTable("ProductionProcessSequence");

                entity.HasIndex(e => e.NextProductionProcessId, "IX_ProductionProcessSequence_FK_ProductionProcessSequence_NextProductionProcess");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionProcessSequence_FK_ProductionProcessSequence_ProductionProcess");

                entity.Property(e => e.ProductionProcessSequenceId).HasColumnName("ProductionProcessSequenceID");

                entity.Property(e => e.NextProductionProcessId).HasColumnName("NextProductionProcessID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.HasOne(d => d.NextProductionProcess)
                    .WithMany(p => p.ProductionProcessSequenceNextProductionProcesses)
                    .HasForeignKey(d => d.NextProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProcessSequence_NextProductionProcess");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionProcessSequenceProductionProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ProductionProcessSequence_ProductionProcess");
            });

            modelBuilder.Entity<ProductionProposedMovement>(entity =>
            {
                entity.ToTable("ProductionProposedMovement");

                entity.HasIndex(e => e.EmployeeId, "IX_ProductionProposedMovement_FK_ProductionProposedMovement_Employee");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionProposedMovement_ItemLocationID");

                entity.HasIndex(e => e.Name, "IX_ProductionProposedMovement_Name");

                entity.HasIndex(e => e.TransactionId, "IX_ProductionProposedMovement_TransactionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProductionProposedMovementId, "ProductionProposedMovement_ProductionProposedMovementID_Name");

                entity.Property(e => e.ProductionProposedMovementId).HasColumnName("ProductionProposedMovementID");

                entity.Property(e => e.AddressContactId).HasColumnName("AddressContactID");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FromFacilityId).HasColumnName("FromFacilityID");

                entity.Property(e => e.ItemLocationAddressId).HasColumnName("ItemLocationAddressID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemLocationTypeId)
                    .HasColumnName("ItemLocationTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .HasComment("Enter any additional notes you may wish to add about the contract.");

                entity.Property(e => e.ReturnDate).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShippingAgentId).HasColumnName("ShippingAgentID");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Status of the Proposed Movement");

                entity.Property(e => e.Timbers).HasDefaultValueSql("((0))");

                entity.Property(e => e.TrailerId).HasColumnName("TrailerID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ProductionProposedMovements)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductionProposedMovement_Employee");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionProposedMovements)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProposedMovement_ItemLocation");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ProductionProposedMovements)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_ProductionProposedMovement_ItemInventoryTransaction");
            });

            modelBuilder.Entity<ProductionProposedMovementItem>(entity =>
            {
                entity.ToTable("ProductionProposedMovementItem");

                entity.HasIndex(e => e.TransactionLineId, "IX_ProductionProposedMovementItem_FK_ProductionProposedMovementItem_ItemInventoryTransactionLine");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionProposedMovementItem_FK_ProductionProposedMovementItem_ProductionProcess");

                entity.HasIndex(e => e.ToProductionProcessId, "IX_ProductionProposedMovementItem_FK_ProductionProposedMovementItem_ToProductionProcess");

                entity.HasIndex(e => e.ProductionPackageId, "IX_ProductionProposedMovementItem_ProductionPackageID");

                entity.HasIndex(e => e.ProductionProposedMovementId, "IX_ProductionProposedMovementItem_ProductionProposedMovementID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionProposedMovementItem_ProductionWorkOrderID");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "ProductionProposedMovementItem_ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionProposedMovementItemId).HasColumnName("ProductionProposedMovementItemID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionProposedMovementId).HasColumnName("ProductionProposedMovementID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionProposedMovementItemFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionProposedMovementItem_ProductionProcess");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionProposedMovementItems)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionProposedMovemntItem_ProductionPackage");

                entity.HasOne(d => d.ProductionProposedMovement)
                    .WithMany(p => p.ProductionProposedMovementItems)
                    .HasForeignKey(d => d.ProductionProposedMovementId)
                    .HasConstraintName("FK_ProductionProposedMovementItem_ProductionProposedMovement");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionProposedMovementItems)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductionProposedMovementItem_ProductionWorkOrder");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionProposedMovementItemToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionProposedMovementItem_ToProductionProcess");

                entity.HasOne(d => d.TransactionLine)
                    .WithMany(p => p.ProductionProposedMovementItems)
                    .HasForeignKey(d => d.TransactionLineId)
                    .HasConstraintName("FK_ProductionProposedMovementItem_ItemInventoryTransactionLine");
            });

            modelBuilder.Entity<ProductionProposedMovementItemArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionProposedMovementItemId);

                entity.ToTable("ProductionProposedMovementItemArchive");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionProposedMovementItemArchive_FK_ProductionProposedMovementItemArchive_ProductionProcess");

                entity.HasIndex(e => e.ProductionProposedMovementId, "IX_ProductionProposedMovementItemArchive_FK_ProductionProposedMovementItemArchive_ProductionProposedMovement");

                entity.HasIndex(e => e.ToProductionProcessId, "IX_ProductionProposedMovementItemArchive_FK_ProductionProposedMovementItemArchive_ToProductionProcess");

                entity.Property(e => e.ProductionProposedMovementItemId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionProposedMovementItemID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.ProductionPackageId).HasColumnName("ProductionPackageID");

                entity.Property(e => e.ProductionProposedMovementId).HasColumnName("ProductionProposedMovementID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ToProductionProcessId).HasColumnName("ToProductionProcessID");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionProposedMovementItemArchiveFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .HasConstraintName("FK_ProductionProposedMovementItemArchive_ProductionProcess");

                entity.HasOne(d => d.ProductionPackage)
                    .WithMany(p => p.ProductionProposedMovementItemArchives)
                    .HasForeignKey(d => d.ProductionPackageId)
                    .HasConstraintName("FK_ProductionProposedMovementItemArchive_ProductionPackage");

                entity.HasOne(d => d.ProductionProposedMovement)
                    .WithMany(p => p.ProductionProposedMovementItemArchives)
                    .HasForeignKey(d => d.ProductionProposedMovementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionProposedMovementItemArchive_ProductionProposedMovement");

                entity.HasOne(d => d.ToProductionProcess)
                    .WithMany(p => p.ProductionProposedMovementItemArchiveToProductionProcesses)
                    .HasForeignKey(d => d.ToProductionProcessId)
                    .HasConstraintName("FK_ProductionProposedMovementItemArchive_ToProductionProcess");
            });

            modelBuilder.Entity<ProductionRequiredTask>(entity =>
            {
                entity.ToTable("ProductionRequiredTask");

                entity.HasIndex(e => e.Name, "UC_ProductionRequiredTask_Name")
                    .IsUnique();

                entity.Property(e => e.ProductionRequiredTaskId)
                    .HasColumnName("ProductionRequiredTaskID")
                    .HasComment("Required Task Unique ID Number");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the Required Task");

                entity.Property(e => e.InstanceDescriptionMask)
                    .HasMaxLength(200)
                    .HasComment("Property Mask to Describe Task Instance");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Required Task");

                entity.Property(e => e.TrackInstancesInProduction).HasComment("Whether individual Instances of this Required Task must be completed before a Production Item can be progressed");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ProductionRequiredTaskExtractor>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskExtractor");

                entity.HasIndex(e => e.ProductionRequiredTaskExtractorTypeId, "IX_ProductionRequiredTaskExtractor_FK_ProductionRequiredTaskExtractor_ProductionRequiredTaskExtractorType");

                entity.Property(e => e.ProductionRequiredTaskExtractorId)
                    .HasColumnName("ProductionRequiredTaskExtractorID")
                    .HasComment("Required Task Extractor Unique ID Number");

                entity.Property(e => e.Active).HasComment("Whether the Required Task Extractor is available for use");

                entity.Property(e => e.CodeBaseId)
                    .HasColumnName("CodeBaseID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of the Required Task Extractor");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the Required Task Extractor");

                entity.Property(e => e.ProductionRequiredTaskExtractorTypeId)
                    .HasColumnName("ProductionRequiredTaskExtractorTypeID")
                    .HasComment("The Type of the Required Task Extractor");

                entity.Property(e => e.Script).IsRequired();

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrderTypeId)
                    .HasColumnName("WorkOrderTypeID")
                    .HasDefaultValueSql("((3))")
                    .HasComment("The Type of Work Order the Required Task Extractor relates to");

                entity.HasOne(d => d.ProductionRequiredTaskExtractorType)
                    .WithMany(p => p.ProductionRequiredTaskExtractors)
                    .HasForeignKey(d => d.ProductionRequiredTaskExtractorTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRequiredTaskExtractor_ProductionRequiredTaskExtractorType");
            });

            modelBuilder.Entity<ProductionRequiredTaskExtractorType>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskExtractorType");

                entity.Property(e => e.ProductionRequiredTaskExtractorTypeId).HasColumnName("ProductionRequiredTaskExtractorTypeID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ProductionRequiredTaskInstance>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskInstance");

                entity.HasIndex(e => e.MarkId, "IX_ProductionRequiredTaskInstance_FK_ProductionRequiredTaskInstance_ContractMark");

                entity.HasIndex(e => e.MarkInstanceId, "IX_ProductionRequiredTaskInstance_FK_ProductionRequiredTaskInstance_ContractMarkInstance");

                entity.HasIndex(e => e.MarkItemId, "IX_ProductionRequiredTaskInstance_FK_ProductionRequiredTaskInstance_ContractMarkItem");

                entity.HasIndex(e => e.MarkItemInstanceId, "IX_ProductionRequiredTaskInstance_FK_ProductionRequiredTaskInstance_ContractMarkItemInstance");

                entity.HasIndex(e => e.ProductionRequiredTaskId, "IX_ProductionRequiredTaskInstance_FK_ProductionRequiredTaskInstance_ProductionRequiredTask");

                entity.Property(e => e.ProductionRequiredTaskInstanceId).HasColumnName("ProductionRequiredTaskInstanceID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkInstanceId).HasColumnName("MarkInstanceID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.MarkItemInstanceId).HasColumnName("MarkItemInstanceID");

                entity.Property(e => e.ProductionRequiredTaskId).HasColumnName("ProductionRequiredTaskID");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ProductionRequiredTaskInstances)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstance_ContractMark");

                entity.HasOne(d => d.MarkInstance)
                    .WithMany(p => p.ProductionRequiredTaskInstances)
                    .HasForeignKey(d => d.MarkInstanceId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstance_ContractMarkInstance");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ProductionRequiredTaskInstances)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstance_ContractMarkItem");

                entity.HasOne(d => d.MarkItemInstance)
                    .WithMany(p => p.ProductionRequiredTaskInstances)
                    .HasForeignKey(d => d.MarkItemInstanceId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstance_ContractMarkItemInstance");

                entity.HasOne(d => d.ProductionRequiredTask)
                    .WithMany(p => p.ProductionRequiredTaskInstances)
                    .HasForeignKey(d => d.ProductionRequiredTaskId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstance_ProductionRequiredTask");
            });

            modelBuilder.Entity<ProductionRequiredTaskInstanceProperty>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskInstanceProperty");

                entity.HasIndex(e => e.ProductionRequiredTaskInstanceId, "IX_ProductionRequiredTaskInstanceProperty_FK_ProductionRequiredTaskInstanceProperty_ProductionRequiredTaskInstance");

                entity.HasIndex(e => e.ProductionRequiredTaskPropertyId, "IX_ProductionRequiredTaskInstanceProperty_FK_ProductionRequiredTaskInstanceProperty_ProductionRequiredTaskProperty");

                entity.Property(e => e.ProductionRequiredTaskInstancePropertyId).HasColumnName("ProductionRequiredTaskInstancePropertyID");

                entity.Property(e => e.ProductionRequiredTaskInstanceId).HasColumnName("ProductionRequiredTaskInstanceID");

                entity.Property(e => e.ProductionRequiredTaskPropertyId).HasColumnName("ProductionRequiredTaskPropertyID");

                entity.HasOne(d => d.ProductionRequiredTaskInstance)
                    .WithMany(p => p.ProductionRequiredTaskInstanceProperties)
                    .HasForeignKey(d => d.ProductionRequiredTaskInstanceId)
                    .HasConstraintName("FK_ProductionRequiredTaskInstanceProperty_ProductionRequiredTaskInstance");

                entity.HasOne(d => d.ProductionRequiredTaskProperty)
                    .WithMany(p => p.ProductionRequiredTaskInstanceProperties)
                    .HasForeignKey(d => d.ProductionRequiredTaskPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRequiredTaskInstanceProperty_ProductionRequiredTaskProperty");
            });

            modelBuilder.Entity<ProductionRequiredTaskProperty>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskProperty");

                entity.HasIndex(e => e.ProductionRequiredTaskExtractorId, "IX_ProductionRequiredTaskProperty_FK_ProductionRequiredTaskProperty_ProductionRequiredTaskExtractor");

                entity.HasIndex(e => new { e.ProductionRequiredTaskId, e.Name }, "UC_RequiredTaskProperty_Name_RequiredTaskID")
                    .IsUnique();

                entity.Property(e => e.ProductionRequiredTaskPropertyId)
                    .HasColumnName("ProductionRequiredTaskPropertyID")
                    .HasComment("Required Task Property Unique ID Number");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Required Task Property");

                entity.Property(e => e.ProductionRequiredTaskExtractorId)
                    .HasColumnName("ProductionRequiredTaskExtractorID")
                    .HasComment("The Extraction Routine to populate the Required Task Property");

                entity.Property(e => e.ProductionRequiredTaskExtractorProperty)
                    .HasMaxLength(100)
                    .HasComment("The Extraction Routine Property which maps to the Required Task Property");

                entity.Property(e => e.ProductionRequiredTaskId).HasColumnName("ProductionRequiredTaskID");

                entity.Property(e => e.PropertyType).HasComment("Data Type of the Required Task Property");

                entity.HasOne(d => d.ProductionRequiredTaskExtractor)
                    .WithMany(p => p.ProductionRequiredTaskProperties)
                    .HasForeignKey(d => d.ProductionRequiredTaskExtractorId)
                    .HasConstraintName("FK_ProductionRequiredTaskProperty_ProductionRequiredTaskExtractor");

                entity.HasOne(d => d.ProductionRequiredTask)
                    .WithMany(p => p.ProductionRequiredTaskProperties)
                    .HasForeignKey(d => d.ProductionRequiredTaskId)
                    .HasConstraintName("FK_ProductionRequiredTaskProperty_ProductionRequiredTask");
            });

            modelBuilder.Entity<ProductionRequiredTaskStrategy>(entity =>
            {
                entity.ToTable("ProductionRequiredTaskStrategy");

                entity.HasIndex(e => e.ProductionRequiredTaskId, "IX_ProductionRequiredTaskStrategy_FK_ProductionRequiredTaskStrategy_ProductionRequiredTask");

                entity.Property(e => e.ProductionRequiredTaskStrategyId)
                    .HasColumnName("ProductionRequiredTaskStrategyID")
                    .HasComment("Required Task Strategy Unique ID Number");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the Required Task Strategy");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Required Task Strategy");

                entity.Property(e => e.Priority).HasComment("The preference to use the Required Task Strategy");

                entity.Property(e => e.ProductionRequiredTaskId).HasColumnName("ProductionRequiredTaskID");

                entity.HasOne(d => d.ProductionRequiredTask)
                    .WithMany(p => p.ProductionRequiredTaskStrategies)
                    .HasForeignKey(d => d.ProductionRequiredTaskId)
                    .HasConstraintName("FK_ProductionRequiredTaskStrategy_ProductionRequiredTask");
            });

            modelBuilder.Entity<ProductionRequiredTaskStrategyProcess>(entity =>
            {
                entity.HasKey(e => new { e.ProductionRequiredTaskStrategyId, e.ProductionProcessId })
                    .HasName("PK_ProductionStrategyProcess");

                entity.ToTable("ProductionRequiredTaskStrategyProcess");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionRequiredTaskStrategyProcess_FK_ProductionRequiredTaskStrategyProcess_ProductionProcess");

                entity.Property(e => e.ProductionRequiredTaskStrategyId)
                    .HasColumnName("ProductionRequiredTaskStrategyID")
                    .HasComment("Required Task Strategy Unique ID Number");

                entity.Property(e => e.ProductionProcessId)
                    .HasColumnName("ProductionProcessID")
                    .HasComment("Production Process Unique ID Number");

                entity.Property(e => e.Rank).HasComment("The order in which the Processes are performed to achieve the Strategy");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionRequiredTaskStrategyProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ProductionRequiredTaskStrategyProcess_ProductionProcess");

                entity.HasOne(d => d.ProductionRequiredTaskStrategy)
                    .WithMany(p => p.ProductionRequiredTaskStrategyProcesses)
                    .HasForeignKey(d => d.ProductionRequiredTaskStrategyId)
                    .HasConstraintName("FK_ProductionRequiredTaskStrategyProcess_ProductionRequiredTaskStrategy");
            });

            modelBuilder.Entity<ProductionRule>(entity =>
            {
                entity.ToTable("ProductionRule");

                entity.HasIndex(e => e.ProductionRuleProcessorId, "IX_ProductionRule_FK_ProductionRule_ProductionRuleProcessor");

                entity.Property(e => e.ProductionRuleId)
                    .HasColumnName("ProductionRuleID")
                    .HasComment("Rule Unique ID Number");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the Rule");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of the Rule");

                entity.Property(e => e.ProductionRuleProcessorId)
                    .HasColumnName("ProductionRuleProcessorID")
                    .HasComment("The Processor used to execute the Rule");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ProductionRuleProcessor)
                    .WithMany(p => p.ProductionRules)
                    .HasForeignKey(d => d.ProductionRuleProcessorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRule_ProductionRuleProcessor");
            });

            modelBuilder.Entity<ProductionRuleParameter>(entity =>
            {
                entity.ToTable("ProductionRuleParameter");

                entity.HasIndex(e => e.ProductionRuleId, "IX_ProductionRuleParameter_FK_ProductionRuleParameter_ProductionRule");

                entity.Property(e => e.ProductionRuleParameterId).HasColumnName("ProductionRuleParameterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionRuleId).HasColumnName("ProductionRuleID");

                entity.HasOne(d => d.ProductionRule)
                    .WithMany(p => p.ProductionRuleParameters)
                    .HasForeignKey(d => d.ProductionRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRuleParameter_ProductionRule");
            });

            modelBuilder.Entity<ProductionRuleParameterRequiredTaskProperty>(entity =>
            {
                entity.HasKey(e => new { e.ProductionRuleParameterId, e.ProductionRequiredTaskPropertyId });

                entity.ToTable("ProductionRuleParameterRequiredTaskProperty");

                entity.HasIndex(e => e.ProductionRequiredTaskPropertyId, "IX_ProductionRuleParameterRequiredTaskProperty_FK_ProductionRuleParameterRequiredTaskProperty_ProductionRequiredTaskProperty");

                entity.Property(e => e.ProductionRuleParameterId).HasColumnName("ProductionRuleParameterID");

                entity.Property(e => e.ProductionRequiredTaskPropertyId).HasColumnName("ProductionRequiredTaskPropertyID");

                entity.HasOne(d => d.ProductionRequiredTaskProperty)
                    .WithMany(p => p.ProductionRuleParameterRequiredTaskProperties)
                    .HasForeignKey(d => d.ProductionRequiredTaskPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRuleParameterRequiredTaskProperty_ProductionRequiredTaskProperty");

                entity.HasOne(d => d.ProductionRuleParameter)
                    .WithMany(p => p.ProductionRuleParameterRequiredTaskProperties)
                    .HasForeignKey(d => d.ProductionRuleParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionRuleParameterRequiredTaskProperty_ProductionRuleParameter");
            });

            modelBuilder.Entity<ProductionRuleProcessor>(entity =>
            {
                entity.ToTable("ProductionRuleProcessor");

                entity.Property(e => e.ProductionRuleProcessorId)
                    .HasColumnName("ProductionRuleProcessorID")
                    .HasComment("RuleProcessor Unique ID Number");

                entity.Property(e => e.Active).HasComment("Whether the Rule Processor is available for use");

                entity.Property(e => e.CodeBaseId)
                    .HasColumnName("CodeBaseID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of the Rule Processor");

                entity.Property(e => e.IsLocationRule).HasComment("Whether the Rule Processor can be used for Locations");

                entity.Property(e => e.IsTemplateRule)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Whether the Rule Processor can be used for Production Templates");

                entity.Property(e => e.IsWorkStationRule).HasComment("Whether the Rule Processor can be used for Production Workstations");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the Rule Processor");

                entity.Property(e => e.Script).IsRequired();

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ProductionStage>(entity =>
            {
                entity.ToTable("ProductionStage");

                entity.Property(e => e.ProductionStageId).HasColumnName("ProductionStageID");

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StageNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ProductionTemplate>(entity =>
            {
                entity.ToTable("ProductionTemplate");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.Approved).HasComment("Approved Status");

                entity.Property(e => e.ApprovedBy)
                    .HasDefaultValueSql("('')")
                    .HasComment("User when the approved checkbox was checked.");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasComment("Date the approved checkbox was checked");

                entity.Property(e => e.AssemblyTypeId)
                    .HasColumnName("AssemblyTypeID")
                    .HasDefaultValueSql("((-1))")
                    .HasComment("Standalone Mark,  Shop Assembly Child Mark, Shop Assembly");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MarkItemTypeId)
                    .HasColumnName("MarkItemTypeID")
                    .HasDefaultValueSql("((-1))")
                    .HasComment("Shaft, Fitting, Other");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrderCategoryId).HasColumnName("WorkOrderCategoryID");

                entity.Property(e => e.WorkOrderTypeId)
                    .HasColumnName("WorkOrderTypeID")
                    .HasComment("Contract, Contract Mark, Contract Item, Item, Service / Non Productive");
            });

            modelBuilder.Entity<ProductionTemplateProcess>(entity =>
            {
                entity.ToTable("ProductionTemplateProcess");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionTemplateProcess_FK_ProductionTemplateProcess_ProductionProcess");

                entity.HasIndex(e => e.ProductionTemplateId, "IX_ProductionTemplateProcess_FK_ProductionTemplateProcess_ProductionTemplate");

                entity.Property(e => e.ProductionTemplateProcessId).HasColumnName("ProductionTemplateProcessID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionTemplateProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionTemplateProcess_ProductionProcess");

                entity.HasOne(d => d.ProductionTemplate)
                    .WithMany(p => p.ProductionTemplateProcesses)
                    .HasForeignKey(d => d.ProductionTemplateId)
                    .HasConstraintName("FK_ProductionTemplateProcess_ProductionTemplate");
            });

            modelBuilder.Entity<ProductionTemplateProcessTiming>(entity =>
            {
                entity.ToTable("ProductionTemplateProcessTiming");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionTemplateProcessTiming_FK_ProductionTemplateProcessTiming_ItemLocation");

                entity.HasIndex(e => e.ProductionTemplateProcessId, "IX_ProductionTemplateProcessTiming_FK_ProductionTemplateProcessTiming_ProductionTemplateProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionTemplateProcessTiming_FK_ProductionTemplateProcessTiming_ProductionWorkStation");

                entity.HasIndex(e => e.ProductionTemplateProcessId, "IX_ProductionTemplateProcessTiming_FK_ProductionTemplateProcessWorkStation_ProductionTemplateProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionTemplateProcessTiming_FK_ProductionTemplateProcessWorkStation_ProductionWorkStation");

                entity.Property(e => e.ProductionTemplateProcessTimingId).HasColumnName("ProductionTemplateProcessTimingID");

                entity.Property(e => e.DisplayTimeUnitId)
                    .HasColumnName("DisplayTimeUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Minutes, Hours, Days");

                entity.Property(e => e.FixedMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.PerUnitMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.PerUnitQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductionTemplateProcessId).HasColumnName("ProductionTemplateProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.To).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("UnitTypeID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionTemplateProcessTimings)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionTemplateProcessTiming_ItemLocation");

                entity.HasOne(d => d.ProductionTemplateProcess)
                    .WithMany(p => p.ProductionTemplateProcessTimings)
                    .HasForeignKey(d => d.ProductionTemplateProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionTemplateProcessTiming_ProductionTemplateProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionTemplateProcessTimings)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionTemplateProcessTiming_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionTemplateRule>(entity =>
            {
                entity.ToTable("ProductionTemplateRule");

                entity.HasIndex(e => e.ProductionTemplateId, "IX_ProductionTemplateRule_FK_ProductionTemplateRule_ProductionTemplate");

                entity.Property(e => e.ProductionTemplateRuleId).HasColumnName("ProductionTemplateRuleID");

                entity.Property(e => e.MaxValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.ProductionTemplate)
                    .WithMany(p => p.ProductionTemplateRules)
                    .HasForeignKey(d => d.ProductionTemplateId)
                    .HasConstraintName("FK_ProductionTemplateRule_ProductionTemplate");
            });

            modelBuilder.Entity<ProductionTemplateRuleItem>(entity =>
            {
                entity.ToTable("ProductionTemplateRuleItem");

                entity.HasIndex(e => e.ItemId, "IX_ProductionTemplateRuleItem_FK_ProductionTemplateRuleItem_Item");

                entity.HasIndex(e => e.ProductionTemplateRuleId, "IX_ProductionTemplateRuleItem_FK_ProductionTemplateRuleItem_ProductionTemplateRule");

                entity.HasIndex(e => e.SectionTypeId, "IX_ProductionTemplateRuleItem_FK_ProductionTemplateRuleItem_SectionType");

                entity.Property(e => e.ProductionTemplateRuleItemId).HasColumnName("ProductionTemplateRuleItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ProductionTemplateRuleId).HasColumnName("ProductionTemplateRuleID");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProductionTemplateRuleItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ProductionTemplateRuleItem_Item");

                entity.HasOne(d => d.ProductionTemplateRule)
                    .WithMany(p => p.ProductionTemplateRuleItems)
                    .HasForeignKey(d => d.ProductionTemplateRuleId)
                    .HasConstraintName("FK_ProductionTemplateRuleItem_ProductionTemplateRule");

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.ProductionTemplateRuleItems)
                    .HasForeignKey(d => d.SectionTypeId)
                    .HasConstraintName("FK_ProductionTemplateRuleItem_SectionType");
            });

            modelBuilder.Entity<ProductionTemplateRuleParameter>(entity =>
            {
                entity.ToTable("ProductionTemplateRuleParameter");

                entity.HasIndex(e => e.ProductionTemplateRuleId, "IX_ProductionTemplateRuleParameter_FK_ProductionTemplateRuleParameter_ProductionTemplateRuleVM");

                entity.Property(e => e.ProductionTemplateRuleParameterId).HasColumnName("ProductionTemplateRuleParameterID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ProductionTemplateRuleId).HasColumnName("ProductionTemplateRuleID");

                entity.HasOne(d => d.ProductionTemplateRule)
                    .WithMany(p => p.ProductionTemplateRuleParameters)
                    .HasForeignKey(d => d.ProductionTemplateRuleId)
                    .HasConstraintName("FK_ProductionTemplateRuleParameter_ProductionTemplateRuleVM");
            });

            modelBuilder.Entity<ProductionTemplateRuleVm>(entity =>
            {
                entity.HasKey(e => e.ProductionTemplateRuleId);

                entity.ToTable("ProductionTemplateRuleVM");

                entity.HasIndex(e => e.ProductionRuleId, "IX_ProductionTemplateRuleVM_FK_ProductionTemplateRuleVM_ProductionRule");

                entity.HasIndex(e => e.ProductionTemplateId, "IX_ProductionTemplateRuleVM_FK_ProductionTemplateRuleVM_ProductionTemplate");

                entity.Property(e => e.ProductionTemplateRuleId).HasColumnName("ProductionTemplateRuleID");

                entity.Property(e => e.ParentProductionTemplateRuleId).HasColumnName("ParentProductionTemplateRuleID");

                entity.Property(e => e.ProductionRuleId).HasColumnName("ProductionRuleID");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.HasOne(d => d.ProductionRule)
                    .WithMany(p => p.ProductionTemplateRuleVms)
                    .HasForeignKey(d => d.ProductionRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionTemplateRuleVM_ProductionRule");

                entity.HasOne(d => d.ProductionTemplate)
                    .WithMany(p => p.ProductionTemplateRuleVms)
                    .HasForeignKey(d => d.ProductionTemplateId)
                    .HasConstraintName("FK_ProductionTemplateRuleVM_ProductionTemplate");
            });

            modelBuilder.Entity<ProductionWorkOrder>(entity =>
            {
                entity.ToTable("ProductionWorkOrder");

                entity.HasIndex(e => e.ContractId, "IX_ProductionWorkOrder_ContractID");

                entity.HasIndex(e => e.ContractItemId, "IX_ProductionWorkOrder_ContractItemID");

                entity.HasIndex(e => e.ContractMarkId, "IX_ProductionWorkOrder_ContractMarkID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionWorkOrder_ProductionWorkOrderID");

                entity.HasIndex(e => new { e.StatusId, e.WorkOrderTypeId }, "IX_ProductionWorkOrder_StatusID_WorkOrderTypeID");

                entity.HasIndex(e => e.Tempkey, "IX_ProductionWorkOrder_Tempkey");

                entity.HasIndex(e => new { e.WorkOrderTypeId, e.ProductionWorkOrderId }, "IX_ProductionWorkOrder_WorkOrderTypeID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DrawingDescriptionId).HasColumnName("DrawingDescriptionID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 - Open 2 - Closed");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOrderTypeId)
                    .HasColumnName("WorkOrderTypeID")
                    .HasComment("Contract, Contract Mark, Contract Item, Item, Service / Non Productive");
            });

            modelBuilder.Entity<ProductionWorkOrderArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkOrderArchive");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateRequired).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderTypeId).HasColumnName("WorkOrderTypeID");
            });

            modelBuilder.Entity<ProductionWorkOrderArchiveLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkOrderArchiveLink");

                entity.HasIndex(e => new { e.ContractId, e.ProductionWorkOrderId }, "IX_ProductionWorkOrderArchiveLink")
                    .HasFillFactor(90);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");
            });

            modelBuilder.Entity<ProductionWorkOrderContract>(entity =>
            {
                entity.ToTable("ProductionWorkOrderContract");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ProductinWorkOrderContract_CMPLI")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ContractId, e.Instance, e.ProductionWorkOrderContractId, e.ProductionWorkOrderId }, "IX_ProductionWorkOrderContract_ContractID");

                entity.HasIndex(e => e.ContractItemId, "IX_ProductionWorkOrderContract_ContractItem");

                entity.HasIndex(e => e.ContractItemId, "IX_ProductionWorkOrderContract_ContractItemID")
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.ContractMarkPhaseLotItemId, e.LinkId }, "IX_ProductionWorkOrderContract_ContractMarkPhaseLotItemID")
                    .HasFillFactor(71);

                entity.HasIndex(e => new { e.ProductionWorkOrderContractId, e.ContractId, e.ContractItemId, e.MarkId, e.PhaseId, e.LotId }, "IX_ProductionWorkOrderContract_GetProcesses1");

                entity.HasIndex(e => new { e.LinkId, e.NestingResultItemListingId }, "IX_ProductionWorkOrderContract_LinkID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MarkId, "IX_ProductionWorkOrderContract_MarkID");

                entity.HasIndex(e => e.MarkItemId, "IX_ProductionWorkOrderContract_MarkItemID");

                entity.HasIndex(e => e.NestingResultItemListingId, "IX_ProductionWorkOrderContract_NestingResultItemListingID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionWorkOrderContract_ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.ContractItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ContractItem");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ContractMarkItem");

                entity.HasOne(d => d.NestingResultItemListing)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.NestingResultItemListingId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_NestingResultItemListing");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionWorkOrderContracts)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .HasConstraintName("FK_ProductionWorkOrderContract_ProductionWorkOrder");
            });

            modelBuilder.Entity<ProductionWorkOrderContractArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkOrderContractId);

                entity.ToTable("ProductionWorkOrderContractArchive");

                entity.HasIndex(e => e.ContractItemId, "IX_ProductionWorkOrderContractArchive_FK_ProductionWorkOrderContractArchive_ContractItem");

                entity.HasIndex(e => e.MarkId, "IX_ProductionWorkOrderContractArchive_FK_ProductionWorkOrderContractArchive_ContractMark");

                entity.HasIndex(e => e.MarkItemId, "IX_ProductionWorkOrderContractArchive_FK_ProductionWorkOrderContractArchive_ContractMarkItem");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_ProductionWorkOrderContractArchive_FK_ProductionWorkOrderContractArchive_ContractMarkPhaseLot");

                entity.HasIndex(e => e.ContractMarkPhaseLotItemId, "IX_ProductionWorkOrderContractArchive_FK_ProductionWorkOrderContractArchive_ContractMarkPhaseLotItem");

                entity.Property(e => e.ProductionWorkOrderContractId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ProductionWorkOrderContractArchives)
                    .HasForeignKey(d => d.ContractItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContractArchive_ContractItem");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.ProductionWorkOrderContractArchives)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_ProductionWorkOrderContractArchive_ContractMarkPhaseLot");

                entity.HasOne(d => d.ContractMarkPhaseLotItem)
                    .WithMany(p => p.ProductionWorkOrderContractArchives)
                    .HasForeignKey(d => d.ContractMarkPhaseLotItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContractArchive_ContractMarkPhaseLotItem");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ProductionWorkOrderContractArchives)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_ProductionWorkOrderContractArchive_ContractMark");

                entity.HasOne(d => d.MarkItem)
                    .WithMany(p => p.ProductionWorkOrderContractArchives)
                    .HasForeignKey(d => d.MarkItemId)
                    .HasConstraintName("FK_ProductionWorkOrderContractArchive_ContractMarkItem");
            });

            modelBuilder.Entity<ProductionWorkOrderProcess>(entity =>
            {
                entity.ToTable("ProductionWorkOrderProcess");

                entity.HasIndex(e => new { e.ProductionWorkOrderId, e.Rank, e.ProductionProcessId }, "IX_PProductionWorkOrderProcess_ProductionWorkOrderID_Rank");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_PWOP_ProductionWorkOrderProcessID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcess_FK_ProductionWorkOrderProcess_ItemLocation");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcess_FK_ProductionWorkOrderProcess_ProductionWorkStation");

                entity.HasIndex(e => e.ProcessNumber, "IX_ProductionWorkOrderProcess_ProcessNumber");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkOrderProcess_ProductionProcessID");

                entity.HasIndex(e => new { e.ProductionWorkOrderId, e.ProcessNumber, e.ProductionProcessId, e.ProductionWorkOrderProcessId }, "IX_ProductionWorkOrderProcess_ProductionWorkOrderID_ProcessNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Rank, e.ProcessNumber }, "IX_ProductionWorkOrderProcess_Rank_ProcessNumber");

                entity.HasIndex(e => new { e.ProductionWorkOrderId, e.ProductionProcessId, e.ProductionWorkStationId, e.ItemLocationId }, "IX_ProductionWorkorderProcess_Unique")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.DisplayTimeUnitId)
                    .HasColumnName("DisplayTimeUnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Minutes, Hours, Days");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkStationId)
                    .HasColumnName("ProductionWorkStationID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcess_ItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcess_ProductionProcess");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .HasConstraintName("FK_ProductionWorkOrderProcess_ProductionWorkOrder");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcess_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkOrderProcessId);

                entity.ToTable("ProductionWorkOrderProcessArchive");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcessArchive_FK_ProductionWorkOrderProcessArchive_ItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkOrderProcessArchive_FK_ProductionWorkOrderProcessArchive_ProductionProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcessArchive_FK_ProductionWorkOrderProcessArchive_ProductionWorkStation");

                entity.Property(e => e.ProductionWorkOrderProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DisplayTimeUnitId).HasColumnName("DisplayTimeUnitID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessArchives)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessArchive_ItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessArchives)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessArchive_ProductionProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessArchives)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessArchive_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessPriority>(entity =>
            {
                entity.ToTable("ProductionWorkOrderProcessPriority");

                entity.HasIndex(e => new { e.ProductionWorkOrderProcessId, e.LinkId, e.StartDate }, "IX_ProductionWorkOrderProcessPriority")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionWorkOrderProcessPriorityId).HasColumnName("ProductionWorkOrderProcessPriorityID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ProductionWorkOrderProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessPriorities)
                    .HasForeignKey(d => d.ProductionWorkOrderProcessId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessPriority_ProductionWorkOrderProcess");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessQuantity>(entity =>
            {
                entity.ToTable("ProductionWorkOrderProcessQuantity");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_PWOPQ_ProductionWorkOrderContractID")
                    .HasFillFactor(85);

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcessQuantity_FK_ProductionWorkOrderProcessQuantity_ItemLocation");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantity_FK_ProductionWorkOrderProcessQuantity_ProductionWorkStation");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ProductionWorkOrderProcessQuantity_ProductionWorkOrderContractID");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_ProductionWorkOrderProcessQuantity_ProductionWorkOrderProcessID");

                entity.HasIndex(e => e.Quantity, "IX_ProductionWorkOrderProcessQuantity_Quantity");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.EnteredDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantities)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantity_ItemLocation");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantities)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantity_ProductionWorkOrderContract");

                entity.HasOne(d => d.ProductionWorkOrderProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantities)
                    .HasForeignKey(d => d.ProductionWorkOrderProcessId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantity_ProductionWorkOrderProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantities)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantity_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessQuantityArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkOrderProcessQuantityArchive");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcessQuantityArchive_FK_ProductionWorkOrderProcessQuantityArchive_ItemLocation");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantityArchive_FK_ProductionWorkOrderProcessQuantityArchive_ProductionWorkStation");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.EnteredDate).HasColumnType("datetime");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany()
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityArchive_ItemLocation");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityArchive_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessQuantityHistory>(entity =>
            {
                entity.ToTable("ProductionWorkOrderProcessQuantityHistory");

                entity.HasIndex(e => e.MovedOn, "IX_PWOPQH_Movedon");

                entity.HasIndex(e => e.FromItemLocationId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_FromItemLocation");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_FromProductionProcess");

                entity.HasIndex(e => e.FromProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkStation");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_ToItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_ToProductionProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantityHistory_FK_ProductionWorkOrderProcessQuantityHistory_ToProductionWorkStation");

                entity.HasIndex(e => e.FromProductionWorkOrderContractId, "IX_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkOrderContract");

                entity.HasIndex(e => e.FromProductionWorkOrderProcessId, "IX_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkOrderProcess");

                entity.HasIndex(e => e.FromProductionWorkOrderProcessQuantityId, "IX_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkOrderProcessQuantityID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_ProductionWorkOrderProcessQuantityHistory_ProductionWorkOrder");

                entity.HasIndex(e => e.ProductionWorkOrderContractId, "IX_ProductionWorkOrderProcessQuantityHistory_ProductionWorkOrderContract");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_ProductionWorkOrderProcessQuantityHistory_ProductionWorkOrderProcess");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityHistoryId).HasColumnName("ProductionWorkOrderProcessQuantityHistoryID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FromItemLocationId).HasColumnName("FromItemLocationID");

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.FromProductionWorkOrderContractId).HasColumnName("FromProductionWorkOrderContractID");

                entity.Property(e => e.FromProductionWorkOrderProcessId).HasColumnName("FromProductionWorkOrderProcessID");

                entity.Property(e => e.FromProductionWorkOrderProcessQuantityId).HasColumnName("FromProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.FromProductionWorkStationId).HasColumnName("FromProductionWorkStationID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.MoveSource).HasComment("1 = Production Control, 2 = Production Console, 3 = Bar Coding");

                entity.Property(e => e.MovedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MovedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.FromItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryFromItemLocations)
                    .HasForeignKey(d => d.FromItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_FromItemLocation");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_FromProductionProcess");

                entity.HasOne(d => d.FromProductionWorkOrderContract)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryFromProductionWorkOrderContracts)
                    .HasForeignKey(d => d.FromProductionWorkOrderContractId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkOrderContract");

                entity.HasOne(d => d.FromProductionWorkOrderProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryFromProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.FromProductionWorkOrderProcessId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkOrderProcess");

                entity.HasOne(d => d.FromProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryFromProductionWorkStations)
                    .HasForeignKey(d => d.FromProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_FromProductionWorkStation");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryItemLocations)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ToItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryProductionProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ToProductionProcess");

                entity.HasOne(d => d.ProductionWorkOrderContract)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryProductionWorkOrderContracts)
                    .HasForeignKey(d => d.ProductionWorkOrderContractId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ToProductionWorkOrderContract");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistories)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ProductionWorkOrder");

                entity.HasOne(d => d.ProductionWorkOrderProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryProductionWorkOrderProcesses)
                    .HasForeignKey(d => d.ProductionWorkOrderProcessId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ToProductionWorkOrderProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryProductionWorkStations)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistory_ToProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessQuantityHistoryArchive>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkOrderProcessQuantityHistoryId);

                entity.ToTable("ProductionWorkOrderProcessQuantityHistoryArchive");

                entity.HasIndex(e => e.FromProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_PWOPQHA_FPWS");

                entity.HasIndex(e => e.FromItemLocationId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_ProductionWorkOrderProcessQuantityHistoryArchive_FromItemLocation");

                entity.HasIndex(e => e.FromProductionProcessId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_ProductionWorkOrderProcessQuantityHistoryArchive_FromProductionProcess");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToItemLocation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToProductionProcess");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkOrderProcessQuantityHistoryArchive_FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToProductionWorkStation");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityHistoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductionWorkOrderProcessQuantityHistoryID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FromItemLocationId).HasColumnName("FromItemLocationID");

                entity.Property(e => e.FromProductionProcessId).HasColumnName("FromProductionProcessID");

                entity.Property(e => e.FromProductionWorkOrderContractId).HasColumnName("FromProductionWorkOrderContractID");

                entity.Property(e => e.FromProductionWorkOrderProcessId).HasColumnName("FromProductionWorkOrderProcessID");

                entity.Property(e => e.FromProductionWorkOrderProcessQuantityId).HasColumnName("FromProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.FromProductionWorkStationId).HasColumnName("FromProductionWorkStationID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.MovedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MovedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.FromItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveFromItemLocations)
                    .HasForeignKey(d => d.FromItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_FromItemLocation");

                entity.HasOne(d => d.FromProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveFromProductionProcesses)
                    .HasForeignKey(d => d.FromProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_FromProductionProcess");

                entity.HasOne(d => d.FromProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveFromProductionWorkStations)
                    .HasForeignKey(d => d.FromProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_FromProductionWorkStation");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveItemLocations)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToItemLocation");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveProductionProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToProductionProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkOrderProcessQuantityHistoryArchiveProductionWorkStations)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityHistoryArchive_ToProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessQuantityRequiredTaskInstance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkOrderProcessQuantityRequiredTaskInstance");

                entity.HasIndex(e => e.ProductionRequiredTaskInstanceId, "IX_ProductionWorkOrderProcessQuantityRequiredTaskInstance_FK_PWOPQRTI_PRTI");

                entity.HasIndex(e => e.ProductionWorkOrderProcessQuantityId, "IX_ProductionWorkOrderProcessQuantityRequiredTaskInstance_FK_PWOPQRTI_PWOPQ");

                entity.HasIndex(e => e.EmployeeId, "IX_ProductionWorkOrderProcessQuantityRequiredTaskInstance_FK_ProductionWorkorderProcessQuantityRequiredTaskInstance_Employee");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProductionRequiredTaskInstanceId).HasColumnName("ProductionRequiredTaskInstanceID");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Wipbatch).HasColumnName("WIPBatch");

                entity.HasOne(d => d.Employee)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_ProductionWorkorderProcessQuantityRequiredTaskInstance_Employee");

                entity.HasOne(d => d.ProductionRequiredTaskInstance)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionRequiredTaskInstanceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityRequiredTaskInstance_ProductionRequiredTaskInstance");

                entity.HasOne(d => d.ProductionWorkOrderProcessQuantity)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionWorkOrderProcessQuantityId)
                    .HasConstraintName("FK_ProductionWorkOrderProcessQuantityRequiredTaskInstance_ProductionWorkOrderProcessQuantity");
            });

            modelBuilder.Entity<ProductionWorkOrderProcessRequiredTaskInstance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkOrderProcessRequiredTaskInstance");

                entity.HasIndex(e => e.ProductionWorkOrderProcessId, "IX_ProductionWorkOrderProcessRequiredTaskInstance_FK_ProductionWorkOrderProcessRequiredTaskInstance_ProductionWorkOrderProcess");

                entity.HasIndex(e => e.ProductionRequiredTaskInstanceId, "IX_ProductionWorkOrderProcessRequiredTaskInstance_PWOPRTI_PRTI");

                entity.Property(e => e.ProductionRequiredTaskInstanceId).HasColumnName("ProductionRequiredTaskInstanceID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.HasOne(d => d.ProductionRequiredTaskInstance)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionRequiredTaskInstanceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessRequiredTaskInstance_ProductionRequiredTaskInstance");

                entity.HasOne(d => d.ProductionWorkOrderProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionWorkOrderProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkOrderProcessRequiredTaskInstance_ProductionWorkOrderProcess");
            });

            modelBuilder.Entity<ProductionWorkStation>(entity =>
            {
                entity.ToTable("ProductionWorkStation");

                entity.HasIndex(e => e.ItemLocationId, "IX_ProductionWorkStation_FK_ProductionWorkStation_ItemLocation");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.AngleEngineId)
                    .HasColumnName("AngleEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.CamdrawingIdentification)
                    .HasColumnName("CAMDrawingIdentification")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CammarkItemIdentification)
                    .HasColumnName("CAMMarkItemIdentification")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.DefaultEmployeeId).HasColumnName("DefaultEmployeeID");

                entity.Property(e => e.DefaultPrinter).HasMaxLength(100);

                entity.Property(e => e.DefaultReportId)
                    .HasColumnName("DefaultReportID")
                    .HasComment("Lookup: Full List, Grouped List, Barcode Labels, Parent Bar Summary, Parent Bar List");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Emailaddress).HasMaxLength(100);

                entity.Property(e => e.FeedbackFileExtension).HasMaxLength(10);

                entity.Property(e => e.FeedbackPath).HasMaxLength(255);

                entity.Property(e => e.FenicePlusSettings).HasColumnType("xml");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.LinearEngineId)
                    .HasColumnName("LinearEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.MappingContract).HasMaxLength(100);

                entity.Property(e => e.MappingDuration).HasMaxLength(100);

                entity.Property(e => e.MappingEmployee).HasMaxLength(100);

                entity.Property(e => e.MappingLot).HasMaxLength(100);

                entity.Property(e => e.MappingMarkItem).HasMaxLength(100);

                entity.Property(e => e.MappingMarkItemGuid)
                    .HasMaxLength(100)
                    .HasColumnName("MappingMarkItemGUID");

                entity.Property(e => e.MappingPhase).HasMaxLength(100);

                entity.Property(e => e.MappingProcess).HasMaxLength(100);

                entity.Property(e => e.MappingQuantity).HasMaxLength(100);

                entity.Property(e => e.MappingStarttime).HasMaxLength(100);

                entity.Property(e => e.MappingStoptime).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NcfilePath)
                    .HasMaxLength(400)
                    .HasColumnName("NCFilePath")
                    .HasComment("Output paths can include runtime variables. Available variables are %Project%, %Contract%, %Phase%, %Lot%, %Drawing%, %Mark%, %MarkItem%, %MarkItemBundle%, %MarkBundle%, %CuttingPlan%, %Workstation%, %Facility%, %Location% and %BatchName%.");

                entity.Property(e => e.NestingMachineName).HasMaxLength(100);

                entity.Property(e => e.ParameterFile).HasMaxLength(100);

                entity.Property(e => e.PlateEngineId)
                    .HasColumnName("PlateEngineID")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.PlateEngineUnits).HasDefaultValueSql("((3))");

                entity.Property(e => e.PlatePromptEditNest).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlateShowApplication).HasDefaultValueSql("((0))");

                entity.Property(e => e.PostProcessorId)
                    .HasColumnName("PostProcessorID")
                    .HasComment("Link to PostProcessor Lookup");

                entity.Property(e => e.RoutingEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.StampText)
                    .HasMaxLength(100)
                    .HasComment("Stamp Text can include runtime variables, for example: %Project%-%Contract%-%Phase%-%Lot%-%Drawing%-%Mark%-%MarkItem%-%ProductionWorkOrderContract%-%MarkItemBundle%-%MarkBundle%-%CuttingPlan%-%Workstation%-%Facility%-%Location%-%BatchName%.");

                entity.Property(e => e.StampXlocation)
                    .HasColumnName("StampXLocation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StampYlocation)
                    .HasColumnName("StampYLocation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkshopAreaId).HasColumnName("WorkshopAreaID");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.ProductionWorkStations)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkStation_ItemLocation");
            });

            modelBuilder.Entity<ProductionWorkStationCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionWorkStationCalendar");

                entity.HasIndex(e => e.CalendarId, "IX_ProductionWorkStationCalendar_FK_ProductionWorkStationCalendar_Calendar");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkStationCalendar_FK_ProductionWorkStationCalendar_WorkStation");

                entity.Property(e => e.CalendarId).HasColumnName("CalendarID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.Calendar)
                    .WithMany()
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_ProductionWorkStationCalendar_Calendar");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionWorkStationCalendar_WorkStation");
            });

            modelBuilder.Entity<ProductionWorkStationRule>(entity =>
            {
                entity.ToTable("ProductionWorkStationRule");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkStationRule_FK_ProductionWorkStationRule_ProductionProcess");

                entity.HasIndex(e => e.RelatedProductionWorkstationId, "IX_ProductionWorkStationRule_FK_ProductionWorkStationRule_RelatedProductionWorkStation");

                entity.HasIndex(e => e.ProductionProcessId, "IX_ProductionWorkStationRule_FK_WorkStationRules_Process");

                entity.HasIndex(e => new { e.ProductionWorkStationId, e.ProductionProcessId }, "IX_ProductionWorkStationRule_ProductionWorkStationID_ProductionProcessID");

                entity.Property(e => e.ProductionWorkStationRuleId).HasColumnName("ProductionWorkStationRuleID");

                entity.Property(e => e.MaxValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinValue).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductionProcessId)
                    .HasColumnName("ProductionProcessID")
                    .HasComment("Any process specified...cutting, coping , notching, drilling, painting, treated...");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.RelatedProductionWorkstationId)
                    .HasColumnName("RelatedProductionWorkstationID")
                    .HasComment("The related workstation for send here rules");

                entity.Property(e => e.RuleId)
                    .HasColumnName("RuleID")
                    .HasComment("Link to the Routing Rule Table");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ProductionWorkStationRules)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_ProductionWorkStationRule_ProductionProcess");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkStationRuleProductionWorkStations)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionWorkStationRule_ProductionWorkStation");

                entity.HasOne(d => d.RelatedProductionWorkstation)
                    .WithMany(p => p.ProductionWorkStationRuleRelatedProductionWorkstations)
                    .HasForeignKey(d => d.RelatedProductionWorkstationId)
                    .HasConstraintName("FK_ProductionWorkStationRule_RelatedProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkStationRuleItem>(entity =>
            {
                entity.ToTable("ProductionWorkStationRuleItem");

                entity.HasIndex(e => e.ItemId, "IX_ProductionWorkStationRuleItem_ItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ProductionWorkStationRuleId, e.ItemId }, "IX_ProductionWorkStationRuleItem_PWSRItemID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SectionTypeId, "IX_ProductionWorkStationRuleItem_SectionTypeID")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionWorkStationRuleItemId).HasColumnName("ProductionWorkStationRuleItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ProductionWorkStationRuleId).HasColumnName("ProductionWorkStationRuleID");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProductionWorkStationRuleItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ProductionWorkStationRuleItem_Item");

                entity.HasOne(d => d.ProductionWorkStationRule)
                    .WithMany(p => p.ProductionWorkStationRuleItems)
                    .HasForeignKey(d => d.ProductionWorkStationRuleId)
                    .HasConstraintName("FK_ProductionWorkStationCapabilityItem_ProductionWorkStationCapability");

                entity.HasOne(d => d.SectionType)
                    .WithMany(p => p.ProductionWorkStationRuleItems)
                    .HasForeignKey(d => d.SectionTypeId)
                    .HasConstraintName("FK_ProductionWorkStationRuleItem_SectionType");
            });

            modelBuilder.Entity<ProductionWorkStationRuleParameter>(entity =>
            {
                entity.ToTable("ProductionWorkStationRuleParameter");

                entity.HasIndex(e => e.ProductionWorkStationRuleId, "IX_ProductionWorkStationRuleParameter_FK_ProductionWorkStationRuleParameter_ProductionWorkStationRuleVM");

                entity.Property(e => e.ProductionWorkStationRuleParameterId).HasColumnName("ProductionWorkStationRuleParameterID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ProductionWorkStationRuleId).HasColumnName("ProductionWorkStationRuleID");

                entity.HasOne(d => d.ProductionWorkStationRule)
                    .WithMany(p => p.ProductionWorkStationRuleParameters)
                    .HasForeignKey(d => d.ProductionWorkStationRuleId)
                    .HasConstraintName("FK_ProductionWorkStationRuleParameter_ProductionWorkStationRuleVM");
            });

            modelBuilder.Entity<ProductionWorkStationRuleVm>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkStationRuleId);

                entity.ToTable("ProductionWorkStationRuleVM");

                entity.HasIndex(e => e.ProductionRuleId, "IX_ProductionWorkStationRuleVM_FK_ProductionWorkStationRuleVM_ProductionRule");

                entity.HasIndex(e => e.ProductionWorkStationId, "IX_ProductionWorkStationRuleVM_FK_ProductionWorkStationRuleVM_ProductionWorkStation");

                entity.Property(e => e.ProductionWorkStationRuleId).HasColumnName("ProductionWorkStationRuleID");

                entity.Property(e => e.ParentProductionWorkStationRuleId).HasColumnName("ParentProductionWorkStationRuleID");

                entity.Property(e => e.ProductionRuleId).HasColumnName("ProductionRuleID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.HasOne(d => d.ProductionRule)
                    .WithMany(p => p.ProductionWorkStationRuleVms)
                    .HasForeignKey(d => d.ProductionRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductionWorkStationRuleVM_ProductionRule");

                entity.HasOne(d => d.ProductionWorkStation)
                    .WithMany(p => p.ProductionWorkStationRuleVms)
                    .HasForeignKey(d => d.ProductionWorkStationId)
                    .HasConstraintName("FK_ProductionWorkStationRuleVM_ProductionWorkStation");
            });

            modelBuilder.Entity<ProductionWorkstationWip>(entity =>
            {
                entity.ToTable("ProductionWorkstationWIP");

                entity.HasIndex(e => e.EmployeeId, "IX_ProductionWorkstationWIP_EmployeeID");

                entity.HasIndex(e => e.ProductionWorkOrderProcessQuantityId, "IX_ProductionWorkstationWIP_PWOPQ");

                entity.Property(e => e.ProductionWorkstationWipid).HasColumnName("ProductionWorkstationWIPID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Endtime)
                    .HasColumnType("datetime")
                    .HasComment("The date the transaction was finished, paused");

                entity.Property(e => e.ProductionWorkOrderProcessQuantityId).HasColumnName("ProductionWorkOrderProcessQuantityID");

                entity.Property(e => e.Starttime)
                    .HasColumnType("datetime")
                    .HasComment("The date the transaction was started - populated when the work is started");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 - Started, 2 - Completed, 0 - Paused");

                entity.Property(e => e.TotalDuration).HasComment("The total duration that the task took");

                entity.Property(e => e.Wipbatch).HasColumnName("WIPBatch");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("Project");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("ProjectID")
                    .HasComment("The unique Project ID number generated automatically.");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasComment("Give the Project a description.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Specify a name for the Project");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PurchaseInvoice>(entity =>
            {
                entity.ToTable("PurchaseInvoice");

                entity.HasIndex(e => e.FacilityId, "IX_PurchaseInvoice_FK_PurchaseInvoice_Facility");

                entity.HasIndex(e => e.InventoryUpdateTransactionId, "IX_PurchaseInvoice_FK_PurchaseInvoice_ItemInventoryTransaction");

                entity.HasIndex(e => e.SupplierId, "IX_PurchaseInvoice_SupplierID");

                entity.Property(e => e.PurchaseInvoiceId)
                    .HasColumnName("PurchaseInvoiceID")
                    .HasComment("Unique Identifier");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasComment("Invoice Currency");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasComment("Details of the Purchase Invoice");

                entity.Property(e => e.ExchangeRate).HasComment("Spot Rate to calculate the Value of the Invoice in the System Currency");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Exchange Rate");

                entity.Property(e => e.Exported).HasComment("Exported to External System");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasComment("Who performed the Export");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasComment("When the Export was performed");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InventoryUpdateTransactionId).HasColumnName("InventoryUpdateTransactionID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Invoice Document");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Unique Name");

                entity.Property(e => e.PaidBy).HasMaxLength(100);

                entity.Property(e => e.PaidOn).HasColumnType("datetime");

                entity.Property(e => e.PaymentTermsId)
                    .HasColumnName("PaymentTermsID")
                    .HasComment("Payment Terms for Invoice");

                entity.Property(e => e.PurchaseInvoiceTypeId)
                    .HasColumnName("PurchaseInvoiceTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RequisitionName)
                    .HasMaxLength(50)
                    .HasComment("Other reference");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Status of the Invoice 1) Preparation 2) Awaiting Approval 3) Approved");

                entity.Property(e => e.SupplierAddressId)
                    .HasColumnName("SupplierAddressID")
                    .HasComment("Payment Address details");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("Issuing Supplier");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasComment("Supplier Invoice Reference");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("Default Tax Code for the Invoice Items");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoice_Facility");

                entity.HasOne(d => d.InventoryUpdateTransaction)
                    .WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.InventoryUpdateTransactionId)
                    .HasConstraintName("FK_PurchaseInvoice_ItemInventoryTransaction");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoice_Supplier");
            });

            modelBuilder.Entity<PurchaseInvoiceCredit>(entity =>
            {
                entity.ToTable("PurchaseInvoiceCredit");

                entity.HasIndex(e => e.PurchaseInvoiceId, "IX_PurchaseInvoiceCredit_FK_PurchaseInvoiceCredit_PurchaseInvoice");

                entity.Property(e => e.PurchaseInvoiceCreditId).HasColumnName("PurchaseInvoiceCreditID");

                entity.Property(e => e.ApplyById)
                    .HasColumnName("ApplyByID")
                    .HasComment("Pro-rata application of this Credit - 1 = By Weight, 2 = By Value, 3 = By Quantity");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("The Contract this Credit belongs to");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasComment("Cost Code");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((5))")
                    .HasComment("Credit Type - 5 = General Credit, 6 = Line Credit");

                entity.Property(e => e.OriginalTaxValue).HasComment("Tax Value in Supplier Currency");

                entity.Property(e => e.OriginalValue).HasComment("Credit Value in Supplier Currency");

                entity.Property(e => e.PurchaseInvoiceId)
                    .HasColumnName("PurchaseInvoiceID")
                    .HasComment("The Source PurchaseInvoiceID");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.TaxPercent).HasComment("Tax Percentage");

                entity.Property(e => e.TaxValue).HasComment("Tax Value in Facility Currency");

                entity.Property(e => e.Value).HasComment("Credit Value in Facility Currency");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.PurchaseInvoiceCredits)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceCredit_PurchaseInvoice");
            });

            modelBuilder.Entity<PurchaseInvoiceCreditItem>(entity =>
            {
                entity.ToTable("PurchaseInvoiceCreditItem");

                entity.HasIndex(e => e.PurchaseInvoiceCreditId, "IX_PurchaseInvoiceCreditItem_FK_PurchaseInvoiceCreditItem_PurchaseInvoiceCredit");

                entity.HasIndex(e => e.PurchaseInvoiceItemId, "IX_PurchaseInvoiceCreditItem_Unique")
                    .IsUnique();

                entity.Property(e => e.PurchaseInvoiceCreditItemId).HasColumnName("PurchaseInvoiceCreditItemID");

                entity.Property(e => e.PurchaseInvoiceCreditId)
                    .HasColumnName("PurchaseInvoiceCreditID")
                    .HasComment("The Source PurchaseInvoiceCreditID");

                entity.Property(e => e.PurchaseInvoiceItemId)
                    .HasColumnName("PurchaseInvoiceItemID")
                    .HasComment("The linked PurchaseInvoiceItemID");

                entity.HasOne(d => d.PurchaseInvoiceCredit)
                    .WithMany(p => p.PurchaseInvoiceCreditItems)
                    .HasForeignKey(d => d.PurchaseInvoiceCreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceCreditItem_PurchaseInvoiceCredit");

                entity.HasOne(d => d.PurchaseInvoiceItem)
                    .WithOne(p => p.PurchaseInvoiceCreditItem)
                    .HasForeignKey<PurchaseInvoiceCreditItem>(d => d.PurchaseInvoiceItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceCreditItem_PurchaseInvoiceItem");
            });

            modelBuilder.Entity<PurchaseInvoiceItem>(entity =>
            {
                entity.ToTable("PurchaseInvoiceItem");

                entity.HasIndex(e => e.AdditionId, "IX_PurchaseInvoiceItem_FK__PurchaseInvoiceItem__Addition");

                entity.HasIndex(e => e.PurchaseInvoiceId, "IX_PurchaseInvoiceItem_PurchaseInvoice")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransActionLineId, "IX_PurchaseInvoiceItem_TransactionLineID")
                    .HasFillFactor(90);

                entity.Property(e => e.PurchaseInvoiceItemId).HasColumnName("PurchaseInvoiceItemID");

                entity.Property(e => e.AdditionId).HasColumnName("AdditionID");

                entity.Property(e => e.Area).HasComment("Area of Item Unit Invoiced");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("The Contract this Purchase Invoice Line Belongs");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Cost Code");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DiscountPercent)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Discount Percentage");

                entity.Property(e => e.DiscountValue).HasComment("Discount Value in System Currency");

                entity.Property(e => e.InvoicedQuantity).HasComment("Quantity On Invoice");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("Item Invoiced");

                entity.Property(e => e.Length).HasComment("Length of Item Unit Invoiced");

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1= Steel Item, 2 = Non-Steel Item, 3= Free Line Item");

                entity.Property(e => e.Notes).HasComment("Allows user notes or predefined notes (defaults to the Notes from the)");

                entity.Property(e => e.OrderUnitId)
                    .HasColumnName("OrderUnitID")
                    .HasDefaultValueSql("((7))")
                    .HasComment("The multiples in which the item is purchased");

                entity.Property(e => e.OriginalDiscountValue).HasComment("Discount Value in Document Currency Value");

                entity.Property(e => e.OriginalTaxValue).HasComment("Tax Value in Document Currency Value");

                entity.Property(e => e.OriginalValue).HasComment("Total Item Value in Document Currency Value");

                entity.Property(e => e.PurchaseInvoiceId)
                    .HasColumnName("PurchaseInvoiceID")
                    .HasComment("The Source PurchaseInvoiceID");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasComment("Suppliers Part Number / Reference (Defaults to Item Supplier Part Number)");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.TaxPercent).HasComment("Tax Percentage");

                entity.Property(e => e.TaxValue).HasComment("Tax Value in System Currency");

                entity.Property(e => e.TransActionLineId)
                    .HasColumnName("TransActionLineID")
                    .HasComment("The Purchase Order Receipt Line ID that the Invoice corresponds to");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasComment("Purchase Price Unit of Measure");

                entity.Property(e => e.UnitPrice).HasComment("Unit Price in System Currency");

                entity.Property(e => e.Value).HasComment("Total Item Value in System Currency");

                entity.Property(e => e.Weight).HasComment("Weight of Item Unit Invoiced");

                entity.Property(e => e.Width).HasComment("Width of Item Unit Invoiced");

                entity.HasOne(d => d.Addition)
                    .WithMany(p => p.PurchaseInvoiceItems)
                    .HasForeignKey(d => d.AdditionId)
                    .HasConstraintName("FK__PurchaseInvoiceItem__Addition");

                entity.HasOne(d => d.PurchaseInvoice)
                    .WithMany(p => p.PurchaseInvoiceItems)
                    .HasForeignKey(d => d.PurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceItem_PurchaseInvoice");

                entity.HasOne(d => d.TransActionLine)
                    .WithMany(p => p.PurchaseInvoiceItems)
                    .HasForeignKey(d => d.TransActionLineId)
                    .HasConstraintName("FK_PurchaseInvoiceItem_ItemInventoryTransactionLine");
            });

            modelBuilder.Entity<PurchaseInvoiceItemContract>(entity =>
            {
                entity.ToTable("PurchaseInvoiceItemContract");

                entity.HasIndex(e => e.ContractId, "IX_PurchaseInvoiceItemContract_FK_PurchaseInvoiceItemContract_Contract");

                entity.HasIndex(e => e.PurchaseInvoiceItemId, "IX_PurchaseInvoiceItemContract_FK_PurchaseInvoiceItemContract_PurchaseInvoiceItem");

                entity.Property(e => e.PurchaseInvoiceItemContractId)
                    .HasColumnName("PurchaseInvoiceItemContractID")
                    .HasComment("Unique Purchase Invoice Contract ID automatically generated by system.");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("Contract ID this entry refers to.");

                entity.Property(e => e.PurchaseInvoiceItemId)
                    .HasColumnName("PurchaseInvoiceItemID")
                    .HasComment("Purchase Invoice Item ID this entry is linked to.");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.PurchaseInvoiceItemContracts)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_PurchaseInvoiceItemContract_Contract");

                entity.HasOne(d => d.PurchaseInvoiceItem)
                    .WithMany(p => p.PurchaseInvoiceItemContracts)
                    .HasForeignKey(d => d.PurchaseInvoiceItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceItemContract_PurchaseInvoiceItem");
            });

            modelBuilder.Entity<PurchaseInvoiceItemInstance>(entity =>
            {
                entity.ToTable("PurchaseInvoiceItemInstance");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_PurchaseInvoiceItemInstanceInstance_ItemInventoryTrackingGUIDID");

                entity.HasIndex(e => e.PurchaseInvoiceItemId, "IX_PurchaseInvoioceItemInstance_PurchaseInvoiceItemID");

                entity.HasIndex(e => new { e.PurchaseInvoiceItemId, e.Instance }, "UC_PurchaseInvoiceItemInstance_Instance")
                    .IsUnique();

                entity.Property(e => e.PurchaseInvoiceItemInstanceId).HasColumnName("PurchaseInvoiceItemInstanceID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.PurchaseInvoiceItemId).HasColumnName("PurchaseInvoiceItemID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(1000);

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.PurchaseInvoiceItemInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .HasConstraintName("FK_PurchaseInvoiceItemInstance_ItemInventoryTrackingGuid");

                entity.HasOne(d => d.PurchaseInvoiceItem)
                    .WithMany(p => p.PurchaseInvoiceItemInstances)
                    .HasForeignKey(d => d.PurchaseInvoiceItemId)
                    .HasConstraintName("FK_PurchaseInvoiceItemInstance_PurchaseInvoiceItem");
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.ToTable("PurchaseOrder");

                entity.HasIndex(e => e.SupplierAddressId, "IX_PurchaseOrder_FK_PurchaseOrder_Address");

                entity.HasIndex(e => e.DeliveryAddressId, "IX_PurchaseOrder_FK_PurchaseOrder_DeliveryAddressID");

                entity.HasIndex(e => e.FacilityId, "IX_PurchaseOrder_FK_PurchaseOrder_Facility");

                entity.HasIndex(e => e.PaymentTermsId, "IX_PurchaseOrder_FK_PurchaseOrder_PaymentTerms");

                entity.HasIndex(e => e.Name, "IX_PurchaseOrder_Name")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrderDate, "IX_PurchaseOrder_OrderDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SupplierId, "IX_PurchaseOrder_SupplierID");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasComment("~The Currency table foreign key");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the purchase order");

                entity.Property(e => e.Ediacknowledgement)
                    .HasMaxLength(50)
                    .HasColumnName("EDIAcknowledgement")
                    .HasComment("EDI Acknowledgement number");

                entity.Property(e => e.Ediamendment)
                    .HasColumnName("EDIAmendment")
                    .HasComment("EDI Amendment number");

                entity.Property(e => e.ExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~The exchange rate if it is a foreign currency");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date to use to retrieve the exchange rate");

                entity.Property(e => e.Exported).HasComment("Exported to External System");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasComment("Who performed the Export");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasComment("When the Export was performed");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The default delivery location for the order");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the purchase order");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the purchase order");

                entity.Property(e => e.OrderDeliveryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PaymentTermsId)
                    .HasColumnName("PaymentTermsID")
                    .HasComment("The Payment terms agreed with the supplier for this order");

                entity.Property(e => e.RequisitionName).HasMaxLength(50);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((4))")
                    .HasComment("~The status of the order - 1 Preparation, 2 - Released, 3 - Closed");

                entity.Property(e => e.SupplierAddressId).HasColumnName("SupplierAddressID");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("~The Supplier table foreign key");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasComment("The suppliers' reference for this order");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.PurchaseOrderDeliveryAddresses)
                    .HasForeignKey(d => d.DeliveryAddressId)
                    .HasConstraintName("FK_PurchaseOrder_DeliveryAddressID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrder_Facility");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_PurchaseOrder_PaymentTerms");

                entity.HasOne(d => d.SupplierAddress)
                    .WithMany(p => p.PurchaseOrderSupplierAddresses)
                    .HasForeignKey(d => d.SupplierAddressId)
                    .HasConstraintName("FK_PurchaseOrder_Address");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrder_Supplier");
            });

            modelBuilder.Entity<PurchaseOrderAuthorisation>(entity =>
            {
                entity.ToTable("PurchaseOrderAuthorisation");

                entity.HasIndex(e => e.PurchaseOrderId, "IX_PurchaseOrderAuthorisation_FK_PurchaseOrderAuthorisation_PurchaseOrderID");

                entity.Property(e => e.PurchaseOrderAuthorisationId).HasColumnName("PurchaseOrderAuthorisationID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.PurchaseOrderGuid)
                    .IsRequired()
                    .HasColumnName("PurchaseOrderGUID");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderAuthorisations)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .HasConstraintName("FK_PurchaseOrderAuthorisation_PurchaseOrderID");
            });

            modelBuilder.Entity<PurchaseOrderItem>(entity =>
            {
                entity.ToTable("PurchaseOrderItem");

                entity.HasIndex(e => new { e.ItemReservationId, e.PurchaseOrderItemId, e.ItemId, e.PurchaseOrderId }, "IX_PurchaseOrderItem_COMPLEX")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CostCodeId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_CostCode");

                entity.HasIndex(e => e.DeliveryAddressId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_DeliveryAddressID");

                entity.HasIndex(e => e.ItemLocationId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_ItemLocation");

                entity.HasIndex(e => e.OrderUnitId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_OrderUnit");

                entity.HasIndex(e => e.RollReferenceLineId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_RollReferenceLineID");

                entity.HasIndex(e => e.TaxCodeId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_TaxCode");

                entity.HasIndex(e => e.UnitId, "IX_PurchaseOrderItem_FK_PurchaseOrderItem_Unit");

                entity.HasIndex(e => e.ItemReservationId, "IX_PurchaseOrderItem_ItemReservationID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PurchaseOrderId, "IX_PurchaseOrderItem_PurchaseOrderID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ItemId, e.ReceivedinFull }, "IX_PurchaseOrderItem_ReceivedInFull");

                entity.Property(e => e.PurchaseOrderItemId)
                    .HasColumnName("PurchaseOrderItemID")
                    .HasComment("Unique ID automatically generated");

                entity.Property(e => e.Area).HasComment("The total area that is ordered");

                entity.Property(e => e.CadweightArea)
                    .HasColumnName("CADWeightArea")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Cost Code of the Item");

                entity.Property(e => e.DeliveryAddressId).HasColumnName("DeliveryAddressID");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The agreed delivery date of this item");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("The line description");

                entity.Property(e => e.DiscountPercent)
                    .HasDefaultValueSql("((0))")
                    .HasComment("the percent discount for this item");

                entity.Property(e => e.DiscountValue).HasComment("The discount amount in the system currency");

                entity.Property(e => e.InvoicedQuantity).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The Item that must be ordered");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("The location where this item will be delivered to");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.Length).HasComment("The length that must be ordered if the item has a length");

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The type of line");

                entity.Property(e => e.MinQuantityExcessLine).HasComment("Purchase Order Line Automatically created to account for minimum order quantity/order multiple");

                entity.Property(e => e.Notes).HasDefaultValueSql("('')");

                entity.Property(e => e.OrderQuantity)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The quantity ordered");

                entity.Property(e => e.OrderUnitId)
                    .HasColumnName("OrderUnitID")
                    .HasDefaultValueSql("((7))")
                    .HasComment("The multiples in which the item is purchased");

                entity.Property(e => e.OriginalDiscountValue).HasComment("The discount amount in ordering currency");

                entity.Property(e => e.OriginalTaxValue).HasComment("The tax amount in the ordering currency");

                entity.Property(e => e.OriginalUnitPrice).HasComment("The unit price in the ordering currency");

                entity.Property(e => e.OriginalValue).HasComment("The net amount after discount and tax in the ordering currency");

                entity.Property(e => e.PurchaseOrderId)
                    .HasColumnName("PurchaseOrderID")
                    .HasComment("The ID of the Purchase Order");

                entity.Property(e => e.ReceivedQuantity).HasComment("the quantity that has been received for this item");

                entity.Property(e => e.ReceivedinFull).HasComment("Has this item been received in full");

                entity.Property(e => e.RollReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RollReferenceLineId).HasColumnName("RollReferenceLineID");

                entity.Property(e => e.Source)
                    .HasDefaultValueSql("((1))")
                    .HasComment("~1 - User, 2 - Nesting");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasComment("The part number that your supplier uses for this item");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("The tax code to use to get the tax percent");

                entity.Property(e => e.TaxPercent).HasComment("The tax percent to use to calculate the tax amount");

                entity.Property(e => e.TaxValue).HasComment("The tax amount in the system currency");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UnitPrice).HasComment("The unit price in the system currency");

                entity.Property(e => e.Value).HasComment("The net amount after discount and tax in the system currency");

                entity.Property(e => e.Weight).HasComment("The total weight that is ordered");

                entity.Property(e => e.Width).HasComment("The width that must be ordered if the item has a width");

                entity.Property(e => e.YardReference).HasMaxLength(50);

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItem_CostCode");

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.DeliveryAddressId)
                    .HasConstraintName("FK_PurchaseOrderItem_DeliveryAddressID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_PurchaseOrderItem_Item");

                entity.HasOne(d => d.ItemLocation)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.ItemLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItem_ItemLocation");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_PurchaseOrderItem_ItemReservation");

                entity.HasOne(d => d.OrderUnit)
                    .WithMany(p => p.PurchaseOrderItemOrderUnits)
                    .HasForeignKey(d => d.OrderUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItem_OrderUnit");

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItem_PurchaseOrder");

                entity.HasOne(d => d.RollReferenceLine)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.RollReferenceLineId)
                    .HasConstraintName("FK_PurchaseOrderItem_RollReferenceLineID");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.PurchaseOrderItems)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_PurchaseOrderItem_TaxCode");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.PurchaseOrderItemUnits)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItem_Unit");
            });

            modelBuilder.Entity<PurchaseOrderItemExchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PurchaseOrderItemExchange");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemInventoryTransactionId).HasColumnName("ItemInventoryTransactionID");

                entity.Property(e => e.OriginalReservationId).HasColumnName("OriginalReservationID");

                entity.Property(e => e.PurchaseOrderItemExchangeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PurchaseOrderItemExchangeID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");
            });

            modelBuilder.Entity<PurchaseOrderItemInstance>(entity =>
            {
                entity.ToTable("PurchaseOrderItemInstance");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_PurchaseOrderItemInstance_ItemInventoryTrackingGUIDID")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.ItemReservationId, "IX_PurchaseOrderItemInstance_ItemReservationID");

                entity.HasIndex(e => new { e.PurchaseOrderItemId, e.ItemInventoryTrackingGuidId, e.Instance }, "IX_PurchaseOrderItemInstance_Receipts")
                    .IsUnique();

                entity.HasIndex(e => new { e.PurchaseOrderItemId, e.Instance }, "UC_PurchaseOrderItemInstance_Instance")
                    .IsUnique();

                entity.HasIndex(e => new { e.PurchaseOrderItemInstanceId, e.ItemReservationId }, "UC_PurchaseOrderItemInstance_ItemReservation")
                    .IsUnique();

                entity.Property(e => e.PurchaseOrderItemInstanceId).HasColumnName("PurchaseOrderItemInstanceID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.MaterialSource).HasComment("~The source of material specified during nesting - 0 Supplier Lengths, 1 - Cut to Length, 2 - Mills Standard Length, 3 - Entered Lengths");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.PurchaseOrderItemInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderItemInstance_ItemInventoryTrackingGuidID");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.PurchaseOrderItemInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("KF_ItemReservation_ItemReservationID");

                entity.HasOne(d => d.PurchaseOrderItem)
                    .WithMany(p => p.PurchaseOrderItemInstances)
                    .HasForeignKey(d => d.PurchaseOrderItemId)
                    .HasConstraintName("KF_PurchaseOrderItemInstance_PurchaseOrderItemID");
            });

            modelBuilder.Entity<Qsanalysis>(entity =>
            {
                entity.ToTable("QSAnalysis");

                entity.Property(e => e.QsanalysisId).HasColumnName("QSAnalysisID");

                entity.Property(e => e.Area).HasComment("Total Area of all Categories");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("ContractID for Contract Category Analysis");

                entity.Property(e => e.CostValue).HasComment("Total Value of all Categories");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.EstimateId)
                    .HasColumnName("EstimateID")
                    .HasComment("EstimateID for Estimate Category Analysis");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Will default to the Name of the Estimate or Contract");

                entity.Property(e => e.Notes).HasComment("Enter any additional notes you may wish to add about the Analysis");

                entity.Property(e => e.QstypeId)
                    .HasColumnName("QSTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~~1=Contract, 2=Estimating");

                entity.Property(e => e.SellValue).HasComment("Total Value of all Categories");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasComment("Total Weight of all Categories");
            });

            modelBuilder.Entity<QsanalysisCategory>(entity =>
            {
                entity.ToTable("QSAnalysisCategory");

                entity.HasIndex(e => e.QsanalysisId, "IX_QSAnalysisCategory_FK_CategoryAnalysisCategory_CategoryAnalysis");

                entity.Property(e => e.QsanalysisCategoryId).HasColumnName("QSAnalysisCategoryID");

                entity.Property(e => e.Area).HasComment("The Area Weight of All Items that fall into the category");

                entity.Property(e => e.CategoryTypeId).HasColumnName("CategoryTypeID");

                entity.Property(e => e.CostValue).HasComment("Calculated Using the Category Unit and Unit Price");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasComment("Long Description of Category");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Category Name e.g. \"All Beams\"");

                entity.Property(e => e.QsanalysisId).HasColumnName("QSAnalysisID");

                entity.Property(e => e.SellValue).HasComment("Calculated Sell Value for the Category");

                entity.Property(e => e.SortOrder).HasComment("Order to be displayed and reported");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasComment("The Total Weight of All Items that fall into the category");

                entity.HasOne(d => d.Qsanalysis)
                    .WithMany(p => p.QsanalysisCategories)
                    .HasForeignKey(d => d.QsanalysisId)
                    .HasConstraintName("FK_CategoryAnalysisCategory_CategoryAnalysis");
            });

            modelBuilder.Entity<QsanalysisCategoryRule>(entity =>
            {
                entity.ToTable("QSAnalysisCategoryRule");

                entity.HasIndex(e => e.QsanalysisCategoryId, "IX_QSAnalysisCategoryRule_FK_QSAnalysisCategoryRule_QSAnalysisCategory");

                entity.Property(e => e.QsanalysisCategoryRuleId).HasColumnName("QSAnalysisCategoryRuleID");

                entity.Property(e => e.MainMember)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Whether to apply the rule to the Mark Main Member only");

                entity.Property(e => e.Maxvalue).HasComment("Upper Constraint Value for Rule Type - Zero is no limit");

                entity.Property(e => e.Minvalue).HasComment("Lower Constraint Value for Rule Type");

                entity.Property(e => e.QsanalysisCategoryId).HasColumnName("QSAnalysisCategoryID");

                entity.Property(e => e.RuleId)
                    .HasColumnName("RuleID")
                    .HasComment("The Rule");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.QsanalysisCategory)
                    .WithMany(p => p.QsanalysisCategoryRules)
                    .HasForeignKey(d => d.QsanalysisCategoryId)
                    .HasConstraintName("FK_QSAnalysisCategoryRule_QSAnalysisCategory");
            });

            modelBuilder.Entity<QsanalysisCategoryRuleItem>(entity =>
            {
                entity.ToTable("QSAnalysisCategoryRuleItem");

                entity.HasIndex(e => e.QsanalysisCategoryRuleId, "IX_QSAnalysisCategoryRuleItem_FK_QSAnalysisCategoryRuleItem_QSAnalysisCategoryRule");

                entity.Property(e => e.QsanalysisCategoryRuleItemId).HasColumnName("QSAnalysisCategoryRuleItemID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The ItemID that belongs to the Rule");

                entity.Property(e => e.QsanalysisCategoryRuleId).HasColumnName("QSAnalysisCategoryRuleID");

                entity.Property(e => e.SectionTypeId)
                    .HasColumnName("SectionTypeID")
                    .HasComment("The SectionTypeID that belongs to the Rule");

                entity.HasOne(d => d.QsanalysisCategoryRule)
                    .WithMany(p => p.QsanalysisCategoryRuleItems)
                    .HasForeignKey(d => d.QsanalysisCategoryRuleId)
                    .HasConstraintName("FK_QSAnalysisCategoryRuleItem_QSAnalysisCategoryRule");
            });

            modelBuilder.Entity<QsanalysisCategoryUnit>(entity =>
            {
                entity.ToTable("QSAnalysisCategoryUnit");

                entity.HasIndex(e => e.QsanalysisCategoryId, "IX_QSAnalysisCategoryUnit_FK_CategoryAnalysisCategoryUnit_CategoryAnalysisCategory");

                entity.HasIndex(e => e.ContractInvoiceScheduleId, "IX_QSAnalysisCategoryUnit_FK_QSAnalysisCategoryUnit_ContractInvoiceSchedule");

                entity.Property(e => e.QsanalysisCategoryUnitId).HasColumnName("QSAnalysisCategoryUnitID");

                entity.Property(e => e.ContractInvoiceScheduleId)
                    .HasColumnName("ContractInvoiceScheduleID")
                    .HasComment("The Contract Milestone ID of the QS Analysis Category");

                entity.Property(e => e.CostUnitId)
                    .HasColumnName("CostUnitID")
                    .HasComment("The Cost Price Unit");

                entity.Property(e => e.CostUnitPrice).HasComment("The Cost Unit Price");

                entity.Property(e => e.CostValue).HasComment("Calculated Using the Category Unit and Unit Price");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QsanalysisCategoryId).HasColumnName("QSAnalysisCategoryID");

                entity.Property(e => e.SellUnitId)
                    .HasColumnName("SellUnitID")
                    .HasComment("Sell Unit ID");

                entity.Property(e => e.SellUnitPrice).HasComment("The Sell Unit Price");

                entity.Property(e => e.SellValue).HasComment("Calculated Sell Value for the Category");

                entity.HasOne(d => d.ContractInvoiceSchedule)
                    .WithMany(p => p.QsanalysisCategoryUnits)
                    .HasForeignKey(d => d.ContractInvoiceScheduleId)
                    .HasConstraintName("FK_QSAnalysisCategoryUnit_ContractInvoiceSchedule");

                entity.HasOne(d => d.QsanalysisCategory)
                    .WithMany(p => p.QsanalysisCategoryUnits)
                    .HasForeignKey(d => d.QsanalysisCategoryId)
                    .HasConstraintName("FK_CategoryAnalysisCategoryUnit_CategoryAnalysisCategory");
            });

            modelBuilder.Entity<QsanalysisListing>(entity =>
            {
                entity.ToTable("QSAnalysisListing");

                entity.HasIndex(e => e.QsanalysisCategoryId, "IX_QSAnalysisListing_FK_QSAnalysisListing_QSAnalysisCategory");

                entity.Property(e => e.QsanalysisListingId).HasColumnName("QSAnalysisListingID");

                entity.Property(e => e.Area).HasComment("The Area of the Listed Item");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ListedItem)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ListingId)
                    .HasColumnName("ListingID")
                    .HasComment("The EstimateItemFittingID, ItemListingID or MarkItemID");

                entity.Property(e => e.ListingTypeId)
                    .HasColumnName("ListingTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("~~(1=Detail Listing, 2=Estimate Item, 3 = Estimate Fitting)");

                entity.Property(e => e.ManuallyCategorised).HasComment("Signifies that the User Manually Categorised the Listing Item");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkItemCutType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MarkItemPrelimMark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaintFinish)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.QsanalysisCategoryId).HasColumnName("QSAnalysisCategoryID");

                entity.Property(e => e.Quantity).HasComment("The Quantity of Listed Items");

                entity.Property(e => e.Weight).HasComment("The Weight of the listed Item");

                entity.HasOne(d => d.QsanalysisCategory)
                    .WithMany(p => p.QsanalysisListings)
                    .HasForeignKey(d => d.QsanalysisCategoryId)
                    .HasConstraintName("FK_QSAnalysisListing_QSAnalysisCategory");
            });

            modelBuilder.Entity<Qscategory>(entity =>
            {
                entity.ToTable("QSCategory");

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.CategoryTypeId).HasColumnName("CategoryTypeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("Long Description of Category");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Category Name e.g. \"All Beams\"");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.QstypeId)
                    .HasColumnName("QSTypeID")
                    .HasComment("Category for Estimating (1) or Contract (2)");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Order to appear in");
            });

            modelBuilder.Entity<QscategoryRule>(entity =>
            {
                entity.ToTable("QSCategoryRule");

                entity.HasIndex(e => e.QscategoryId, "IX_QSCategoryRule_FK_CategoryAnalysisCategorySetItem_CategoryAnalysisCategorySet");

                entity.Property(e => e.QscategoryRuleId).HasColumnName("QSCategoryRuleID");

                entity.Property(e => e.MainMember)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Whether to apply the rule to the Mark Main Member only");

                entity.Property(e => e.Maxvalue).HasComment("Minimum Value for the Rule if applicable to the Rule");

                entity.Property(e => e.Minvalue).HasComment("Minimum Value for the Rule if applicable to the Rule");

                entity.Property(e => e.QscategoryId)
                    .HasColumnName("QSCategoryID")
                    .HasComment("");

                entity.Property(e => e.RuleId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("RuleID")
                    .HasComment("The rule type");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .HasComment("The Value for the Rule if applicable to the Rule");

                entity.HasOne(d => d.Qscategory)
                    .WithMany(p => p.QscategoryRules)
                    .HasForeignKey(d => d.QscategoryId)
                    .HasConstraintName("FK_CategoryAnalysisCategorySetItem_CategoryAnalysisCategorySet");
            });

            modelBuilder.Entity<QscategoryRuleItem>(entity =>
            {
                entity.ToTable("QSCategoryRuleItem");

                entity.HasIndex(e => e.QscategoryRuleId, "IX_QSCategoryRuleItem_FK_CategoryRuleItem_CategoryRule");

                entity.Property(e => e.QscategoryRuleItemId).HasColumnName("QSCategoryRuleItemID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("The Item that is associated with the Category Rule");

                entity.Property(e => e.QscategoryRuleId).HasColumnName("QSCategoryRuleID");

                entity.Property(e => e.SectionTypeId)
                    .HasColumnName("SectionTypeID")
                    .HasComment("The SectionType that is associated with the Category Rule");

                entity.HasOne(d => d.QscategoryRule)
                    .WithMany(p => p.QscategoryRuleItems)
                    .HasForeignKey(d => d.QscategoryRuleId)
                    .HasConstraintName("FK_CategoryRuleItem_CategoryRule");
            });

            modelBuilder.Entity<QscategorySet>(entity =>
            {
                entity.ToTable("QSCategorySet");

                entity.Property(e => e.QscategorySetId).HasColumnName("QSCategorySetID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("The Description of the Category Set");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The Name of the Category Set");

                entity.Property(e => e.QstypeId)
                    .HasColumnName("QSTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Category for Estimating (1) or Contract (2)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<QscategorySetCategory>(entity =>
            {
                entity.ToTable("QSCategorySetCategory");

                entity.HasIndex(e => e.QscategorySetId, "IX_QSCategorySetCategory_FK_CategoryAnalysisSetItem_CategoryAnalysisSet");

                entity.HasIndex(e => e.QscategoryId, "IX_QSCategorySetCategory_FK_CategorySetCategory_Category");

                entity.Property(e => e.QscategorySetCategoryId).HasColumnName("QSCategorySetCategoryID");

                entity.Property(e => e.QscategoryId)
                    .HasColumnName("QSCategoryID")
                    .HasComment("The category belonging to the set");

                entity.Property(e => e.QscategorySetId)
                    .HasColumnName("QSCategorySetID")
                    .HasComment("Unique Subsection Set ID number.");

                entity.HasOne(d => d.Qscategory)
                    .WithMany(p => p.QscategorySetCategories)
                    .HasForeignKey(d => d.QscategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CategorySetCategory_Category");

                entity.HasOne(d => d.QscategorySet)
                    .WithMany(p => p.QscategorySetCategories)
                    .HasForeignKey(d => d.QscategorySetId)
                    .HasConstraintName("FK_CategoryAnalysisSetItem_CategoryAnalysisSet");
            });

            modelBuilder.Entity<QscategoryUnit>(entity =>
            {
                entity.ToTable("QSCategoryUnit");

                entity.HasIndex(e => e.QscategoryId, "IX_QSCategoryUnit_FK_CategoryUnit_Category");

                entity.Property(e => e.QscategoryUnitId).HasColumnName("QSCategoryUnitID");

                entity.Property(e => e.CostUnitId)
                    .HasColumnName("CostUnitID")
                    .HasComment("The Cost Price Unit");

                entity.Property(e => e.CostUnitPrice).HasComment("The Cost Unit Price");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.SellUnitId)
                    .HasColumnName("SellUnitID")
                    .HasComment("Sell Unit ID");

                entity.Property(e => e.SellUnitPrice).HasComment("The Sell Unit Price");

                entity.HasOne(d => d.Qscategory)
                    .WithMany(p => p.QscategoryUnits)
                    .HasForeignKey(d => d.QscategoryId)
                    .HasConstraintName("FK_CategoryUnit_Category");
            });

            modelBuilder.Entity<Qsunit>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.ToTable("QSUnit");

                entity.Property(e => e.UnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("UnitID");

                entity.Property(e => e.Enabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.QtyText).HasMaxLength(100);

                entity.Property(e => e.RateText).HasMaxLength(100);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.ToTable("Region");

                entity.HasIndex(e => new { e.RegionId, e.Name }, "IX_Region_Name");

                entity.HasIndex(e => e.Code, "UC_Region_Code")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UC_Region_Name")
                    .IsUnique();

                entity.Property(e => e.RegionId)
                    .HasColumnName("RegionID")
                    .HasComment("The unique Region ID number generated automatically");

                entity.Property(e => e.Code)
                    .HasMaxLength(8)
                    .HasComment("Region Code");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("(0)")
                    .HasComment("Enabled flag determines if Region is enabled or not.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Description or Name of Region");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("Report");

                entity.Property(e => e.ReportId)
                    .ValueGeneratedNever()
                    .HasColumnName("ReportID");

                entity.Property(e => e.ApplyTemplate).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(2000);

                entity.Property(e => e.ReportGroupId)
                    .HasColumnName("ReportGroupID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StoredProcedure).HasMaxLength(100);

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.Visible).HasComment("Display in Search Yes or No");
            });

            modelBuilder.Entity<ReportBatch>(entity =>
            {
                entity.ToTable("ReportBatch");

                entity.Property(e => e.ReportBatchId).HasColumnName("ReportBatchID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportBatchGroup>(entity =>
            {
                entity.ToTable("ReportBatchGroup");

                entity.Property(e => e.ReportBatchGroupId).HasColumnName("ReportBatchGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ReportBatchId).HasColumnName("ReportBatchID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportBatchLink>(entity =>
            {
                entity.ToTable("ReportBatchLink");

                entity.Property(e => e.ReportBatchLinkId).HasColumnName("ReportBatchLinkID");

                entity.Property(e => e.DefaultPrinter).HasMaxLength(255);

                entity.Property(e => e.ReportBatchId).HasColumnName("ReportBatchID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ReportBatchParameter>(entity =>
            {
                entity.ToTable("ReportBatchParameter");

                entity.Property(e => e.ReportBatchParameterId).HasColumnName("ReportBatchParameterID");

                entity.Property(e => e.DefaultValue).HasMaxLength(100);

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ReportBatchId).HasColumnName("ReportBatchID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ReportGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportGroup");

                entity.HasIndex(e => e.ReportGroupId, "IX_ReportGroup")
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ReportGroupId).HasColumnName("ReportGroupID");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");
            });

            modelBuilder.Entity<ReportParameter>(entity =>
            {
                entity.ToTable("ReportParameter");

                entity.HasIndex(e => new { e.ReportId, e.ReportParameterId }, "IX_ReportParameter_ReportID_ReportParameterID")
                    .HasFillFactor(71);

                entity.Property(e => e.ReportParameterId).HasColumnName("ReportParameterID");

                entity.Property(e => e.DefaultValue).HasMaxLength(100);

                entity.Property(e => e.LookupColumnWidths).HasMaxLength(50);

                entity.Property(e => e.LookupDependant).HasMaxLength(50);

                entity.Property(e => e.LookupDependant2).HasMaxLength(50);

                entity.Property(e => e.LookupName).HasMaxLength(50);

                entity.Property(e => e.ParameterDataType).HasMaxLength(50);

                entity.Property(e => e.ParameterName).HasMaxLength(255);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportParameters)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportParameter_Report");
            });

            modelBuilder.Entity<ReportView>(entity =>
            {
                entity.ToTable("ReportView");

                entity.HasIndex(e => e.Name, "IX_ReportView")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ReportViewId).HasColumnName("ReportViewID");

                entity.Property(e => e.DatabaseViewName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");
            });

            modelBuilder.Entity<ReportViewColumn>(entity =>
            {
                entity.ToTable("ReportViewColumn");

                entity.HasIndex(e => e.ReportViewId, "IX_ReportViewColumn_FK_ReportViewColumn_ReportView")
                    .HasFillFactor(71);

                entity.Property(e => e.ReportViewColumnId).HasColumnName("ReportViewColumnID");

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DefaultColumnWidth).HasDefaultValueSql("((50))");

                entity.Property(e => e.LookupName).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReportViewId).HasColumnName("ReportViewID");

                entity.Property(e => e.ViewColumnName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ReportView)
                    .WithMany(p => p.ReportViewColumns)
                    .HasForeignKey(d => d.ReportViewId)
                    .HasConstraintName("FK_ReportViewColumn_ReportView");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasComment("Unique role ID number");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the role");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<RoleObject>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.SystemObjectId })
                    .HasName("PK_RoleObjects");

                entity.ToTable("RoleObject");

                entity.HasIndex(e => e.SystemObjectId, "IX_RoleObject_FK_RoleObject_SystemObject");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.RoleObjectId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RoleObjectID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleObjects)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_RoleObjects_Role");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.RoleObjects)
                    .HasForeignKey(d => d.SystemObjectId)
                    .HasConstraintName("FK_RoleObject_SystemObject");
            });

            modelBuilder.Entity<RoleObjectAction>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.SystemObjectId, e.SystemActionId });

                entity.ToTable("RoleObjectAction");

                entity.HasIndex(e => e.SystemActionId, "IX_RoleObjectAction_FK_RoleObjectAction_SystemAction");

                entity.HasIndex(e => e.SystemObjectId, "IX_RoleObjectAction_FK_RoleObjectAction_SystemObject");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.SystemActionId).HasColumnName("SystemActionID");

                entity.Property(e => e.RoleObjectActionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RoleObjectActionID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleObjectActions)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_RoleObjectAction_Role");

                entity.HasOne(d => d.SystemAction)
                    .WithMany(p => p.RoleObjectActions)
                    .HasForeignKey(d => d.SystemActionId)
                    .HasConstraintName("FK_RoleObjectAction_SystemAction");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.RoleObjectActions)
                    .HasForeignKey(d => d.SystemObjectId)
                    .HasConstraintName("FK_RoleObjectAction_SystemObject");
            });

            modelBuilder.Entity<RoleReport>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.ReportType, e.ReportId });

                entity.ToTable("RoleReport");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.RoleReportId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RoleReportID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleReports)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_RoleReport_Role");
            });

            modelBuilder.Entity<RollReference>(entity =>
            {
                entity.ToTable("RollReference");

                entity.HasIndex(e => new { e.SupplierId, e.Name }, "IX_RollReference_Name")
                    .HasFillFactor(90);

                entity.Property(e => e.RollReferenceId).HasColumnName("RollReferenceID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RollReferenceItem>(entity =>
            {
                entity.ToTable("RollReferenceItem");

                entity.HasIndex(e => e.ItemId, "IX_RollReferenceItem_FK_RollReferenceItems_Item");

                entity.HasIndex(e => e.ItemSupplierId, "IX_RollReferenceItem_FK_RollReferenceItems_ItemSupplier");

                entity.HasIndex(e => e.RollReferenceId, "IX_RollReferenceItem_FK_RollReferenceItems_RollReference");

                entity.Property(e => e.RollReferenceItemId).HasColumnName("RollReferenceItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemSupplierId).HasColumnName("ItemSupplierID");

                entity.Property(e => e.RollReferenceId).HasColumnName("RollReferenceID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RollReferenceItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RollReferenceItems_Item");

                entity.HasOne(d => d.ItemSupplier)
                    .WithMany(p => p.RollReferenceItems)
                    .HasForeignKey(d => d.ItemSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RollReferenceItems_ItemSupplier");

                entity.HasOne(d => d.RollReference)
                    .WithMany(p => p.RollReferenceItems)
                    .HasForeignKey(d => d.RollReferenceId)
                    .HasConstraintName("FK_RollReferenceItems_RollReference");
            });

            modelBuilder.Entity<RollReferenceLine>(entity =>
            {
                entity.ToTable("RollReferenceLine");

                entity.HasIndex(e => e.RollReferenceId, "IX_RollReferenceLine_FK_RollReferenceLineID_RollReference");

                entity.Property(e => e.RollReferenceLineId).HasColumnName("RollReferenceLineID");

                entity.Property(e => e.RollDate).HasColumnType("datetime");

                entity.Property(e => e.RollReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RollReferenceId).HasColumnName("RollReferenceID");

                entity.HasOne(d => d.RollReferenceNavigation)
                    .WithMany(p => p.RollReferenceLines)
                    .HasForeignKey(d => d.RollReferenceId)
                    .HasConstraintName("FK_RollReferenceLineID_RollReference");
            });

            modelBuilder.Entity<SalesInvoice>(entity =>
            {
                entity.ToTable("SalesInvoice");

                entity.HasIndex(e => e.ApplicationForPaymentId, "IX_SalesInvoice_FK_SalesInvoice_ApplicationForPayment");

                entity.HasIndex(e => e.ContractId, "IX_SalesInvoice_FK_SalesInvoice_Contract");

                entity.HasIndex(e => e.CustomerId, "IX_SalesInvoice_FK_SalesInvoice_Customer");

                entity.Property(e => e.SalesInvoiceId).HasColumnName("SalesInvoiceID");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasComment("Currency");

                entity.Property(e => e.CustomerBillingAddressId)
                    .HasColumnName("CustomerBillingAddressID")
                    .HasComment("Address to send Invoice to");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasComment("Customer Name");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasComment("Customers Purchase Order Number or Reference");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.ExchangeRate).HasComment("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Exchange Rate");

                entity.Property(e => e.Exported).HasComment("Exported to External System");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasComment("Who performed the Export");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasComment("When the Export was performed");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of Invoice Document");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderCategory).HasComment("Order Category from Sales Order");

                entity.Property(e => e.PaymentDueBy)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Calculated from terms");

                entity.Property(e => e.PaymentReceivedBy).HasMaxLength(100);

                entity.Property(e => e.PaymentReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.SalesInvoiceTypeId)
                    .HasColumnName("SalesInvoiceTypeID")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("FK Tax Code");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ApplicationForPayment)
                    .WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.ApplicationForPaymentId)
                    .HasConstraintName("FK_SalesInvoice_ApplicationForPayment");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_SalesInvoice_Contract");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoice_Customer");
            });

            modelBuilder.Entity<SalesInvoiceItem>(entity =>
            {
                entity.ToTable("SalesInvoiceItem");

                entity.HasIndex(e => e.ApplicationForPaymentAgreedItemId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_ApplicationForPaymentAgreedItemID");

                entity.HasIndex(e => e.ChangeOrderId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_ChangeOrder");

                entity.HasIndex(e => e.ContractId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_Contract");

                entity.HasIndex(e => e.ContractInvoiceScheduleId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_ContractInvoiceSchedule");

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_ContractMarkPhaseLot");

                entity.HasIndex(e => e.TransActionLineId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_ItemInventoryTransactionLine");

                entity.HasIndex(e => e.QsanalysisCategoryId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_QSAnalysisCategory");

                entity.HasIndex(e => e.SalesInvoiceId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_SalesInvoice");

                entity.HasIndex(e => e.SalesOrderItemId, "IX_SalesInvoiceItem_FK_SalesInvoiceItem_SalesOrderItem");

                entity.HasIndex(e => e.TransactionId, "IX_SalesInvoiceItem_TransactionID")
                    .HasFillFactor(100);

                entity.Property(e => e.SalesInvoiceItemId).HasColumnName("SalesInvoiceItemID");

                entity.Property(e => e.ApplicationForPaymentAgreedItemId).HasColumnName("ApplicationForPaymentAgreedItemID");

                entity.Property(e => e.Area).HasComment("Area of Item Unit Invoiced");

                entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Cost Code");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasComment("Customers Part Number / Reference (Defaults to Item Customer Part Number)");

                entity.Property(e => e.DeliveredInFull).HasComment("If the Sales Order was delivered in Full");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Actual Date of the Delivery Document");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DiscountPercent)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Discount Percentage");

                entity.Property(e => e.DiscountValue).HasComment("Discount Value in System Currency");

                entity.Property(e => e.InvoicedQuantity)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Quantity to Invoice");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("Item Invoiced");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Storage Location that the Goods were delivered from");

                entity.Property(e => e.Length).HasComment("Length of Item Unit Invoiced");

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1= Steel Item, 2 = Non-Steel Item, 3= Free Line Item");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Notes).HasComment("Allows user notes or predefined notes (defaults to the Notes from the)");

                entity.Property(e => e.OriginalDiscountValue).HasComment("Discount Value in Document Currency Value");

                entity.Property(e => e.OriginalTaxValue).HasComment("Tax Value in Document Currency Value");

                entity.Property(e => e.OriginalUnitPrice).HasComment("Unit Price in Document Currency Value");

                entity.Property(e => e.OriginalValue).HasComment("Total Item Value in Document Currency Value");

                entity.Property(e => e.QsanalysisCategoryId).HasColumnName("QSAnalysisCategoryID");

                entity.Property(e => e.SalesInvoiceId)
                    .HasColumnName("SalesInvoiceID")
                    .HasComment("FK SalesInvoice.SalesInvoiceID");

                entity.Property(e => e.SalesOrderItemId)
                    .HasColumnName("SalesOrderItemID")
                    .HasComment("The Source SalesInvoiceLineID");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.TaxPercent).HasComment("Tax Percentage");

                entity.Property(e => e.TaxValue).HasComment("Tax Value in System Currency");

                entity.Property(e => e.TransActionLineId)
                    .HasColumnName("TransActionLineID")
                    .HasComment("The Source Inventory Transaction LineID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sales Price Unit of Measure");

                entity.Property(e => e.UnitPrice).HasComment("Unit Price in System Currency");

                entity.Property(e => e.Value).HasComment("Total Item Value in System Currency");

                entity.Property(e => e.Weight).HasComment("Weight of Item Unit Invoiced");

                entity.Property(e => e.Width).HasComment("Width of Item Unit Invoiced");

                entity.HasOne(d => d.ApplicationForPaymentAgreedItem)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.ApplicationForPaymentAgreedItemId)
                    .HasConstraintName("FK_SalesInvoiceItem_ApplicationForPaymentAgreedItem");

                entity.HasOne(d => d.ChangeOrder)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.ChangeOrderId)
                    .HasConstraintName("FK_SalesInvoiceItem_ChangeOrder");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_SalesInvoiceItem_Contract");

                entity.HasOne(d => d.ContractInvoiceSchedule)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.ContractInvoiceScheduleId)
                    .HasConstraintName("FK_SalesInvoiceItem_ContractInvoiceSchedule");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_SalesInvoiceItem_ContractMarkPhaseLot");

                entity.HasOne(d => d.QsanalysisCategory)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.QsanalysisCategoryId)
                    .HasConstraintName("FK_SalesInvoiceItem_QSAnalysisCategory");

                entity.HasOne(d => d.SalesInvoice)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.SalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceItem_SalesInvoice");

                entity.HasOne(d => d.SalesOrderItem)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.SalesOrderItemId)
                    .HasConstraintName("FK_SalesInvoiceItem_SalesOrderItem");

                entity.HasOne(d => d.TransActionLine)
                    .WithMany(p => p.SalesInvoiceItems)
                    .HasForeignKey(d => d.TransActionLineId)
                    .HasConstraintName("FK_SalesInvoiceItem_ItemInventoryTransactionLine");
            });

            modelBuilder.Entity<SalesInvoiceItemInstance>(entity =>
            {
                entity.ToTable("SalesInvoiceItemInstance");

                entity.HasIndex(e => e.ContractMarkInstanceId, "IX_SalesInvoiceItemInstance_ContractMarkInstanceID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ContractMarkPhaseLotId, "IX_SalesInvoiceItemInstance_ContractMarkPhaseLotID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_SalesInvoiceItemInstance_ItemInventoryTrackingGUIDID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SalesInvoiceItemId, "IX_SalesInvoiceItemInstance_SalesInvoiceItemID")
                    .HasFillFactor(100);

                entity.Property(e => e.SalesInvoiceItemInstanceId).HasColumnName("SalesInvoiceItemInstanceID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.SalesInvoiceItemId).HasColumnName("SalesInvoiceItemID");

                entity.HasOne(d => d.ContractMarkInstance)
                    .WithMany(p => p.SalesInvoiceItemInstances)
                    .HasForeignKey(d => d.ContractMarkInstanceId)
                    .HasConstraintName("FK_SalesInvoiceItemInstance_ContractMarkInstance");

                entity.HasOne(d => d.ContractMarkPhaseLot)
                    .WithMany(p => p.SalesInvoiceItemInstances)
                    .HasForeignKey(d => d.ContractMarkPhaseLotId)
                    .HasConstraintName("FK_SalesInvoiceItemInstance_ContractMarkPhaseLot");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.SalesInvoiceItemInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .HasConstraintName("FK_SalesInvoiceItemInstance_ItemInventoryTrackingGuid");

                entity.HasOne(d => d.SalesInvoiceItem)
                    .WithMany(p => p.SalesInvoiceItemInstances)
                    .HasForeignKey(d => d.SalesInvoiceItemId)
                    .HasConstraintName("FK_SalesInvoiceItemInstance_SalesInvoiceItem");
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.ToTable("SalesOrder");

                entity.HasIndex(e => e.CustomerAddressId, "IX_SalesOrder_FK_SalesOrder_Address");

                entity.HasIndex(e => e.CustomerId, "IX_SalesOrder_FK_SalesOrder_Customer");

                entity.HasIndex(e => e.FacilityId, "IX_SalesOrder_FK_SalesOrder_Facility");

                entity.HasIndex(e => e.PaymentTermsId, "IX_SalesOrder_FK_SalesOrder_PaymentTerms");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.ContractId)
                    .HasColumnName("ContractID")
                    .HasComment("The Contract associated with the Sales Order");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The Currency table foreign key");

                entity.Property(e => e.CustomerAddressId).HasColumnName("CustomerAddressID");

                entity.Property(e => e.CustomerBillingAddressId)
                    .HasColumnName("CustomerBillingAddressID")
                    .HasComment("Address to send Invoice to");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasComment("The Customer table foreign key");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasComment("The Customers' reference for this order");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("Description of the Sales order");

                entity.Property(e => e.ExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasComment("The exchange rate if it is a foreign currency");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date to use to retrieve the exchange rate");

                entity.Property(e => e.FacilityId)
                    .HasColumnName("FacilityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The default delivery location for the order");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Specify a name for the Sales order");

                entity.Property(e => e.Notes).HasComment("Allows user notes or predefined notes");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the Sales order");

                entity.Property(e => e.OrderDeliveryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderTakenBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.PaymentTermsId)
                    .HasColumnName("PaymentTermsID")
                    .HasComment("The Payment terms agreed with the Customer for this order");

                entity.Property(e => e.SalesOrderTypeId)
                    .HasColumnName("SalesOrderTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 = Sales Order (default), 2 = Sales Quotation, 3 = Contract Sales Order");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("The status of the order - 1 Preparation, 2 - Released, 3 - Closed");

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CustomerAddress)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.CustomerAddressId)
                    .HasConstraintName("FK_SalesOrder_Address");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrder_Customer");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrder_Facility");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_SalesOrder_PaymentTerms");
            });

            modelBuilder.Entity<SalesOrderItem>(entity =>
            {
                entity.ToTable("SalesOrderItem");

                entity.HasIndex(e => e.ContractId, "IX_SalesOrderItem_FK_SalesOrderItem_Contract");

                entity.HasIndex(e => e.ContractInvoiceScheduleId, "IX_SalesOrderItem_FK_SalesOrderItem_ContractInvoiceSchedule");

                entity.HasIndex(e => e.ItemReservationId, "IX_SalesOrderItem_FK_SalesOrderItem_ItemReservation");

                entity.HasIndex(e => e.SalesOrderId, "IX_SalesOrderItem_SalesOrderID")
                    .HasFillFactor(90);

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.Area).HasComment("Area of Item Unit Ordered / Quoted");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractInvoiceScheduleId)
                    .HasColumnName("ContractInvoiceScheduleID")
                    .HasComment("The Invoice Schedule to Associate to the Contract assigned in the Sales Order Header");

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Cost Code (Defaults to Item Cost Code)");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasComment("Customers Part Number / Reference (Defaults to Item Customer Part Number)");

                entity.Property(e => e.DeliveredInFull).HasComment("If the Sales Order has been delivered in Full");

                entity.Property(e => e.DeliveredQuantity).HasComment("Quantity Delivered");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date to be Delivered (Defaults to Sales Order Delivery Date)");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DiscountPercent)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Discount Percentage (Defaults to Item Customer Discount)");

                entity.Property(e => e.DiscountValue).HasComment("Discount Value in System Currency");

                entity.Property(e => e.InvoicedQuantity).HasComment("Quantity Delivered and Invoiced");

                entity.Property(e => e.ItemId)
                    .HasColumnName("ItemID")
                    .HasComment("Item Ordered / Quoted");

                entity.Property(e => e.ItemLocationId)
                    .HasColumnName("ItemLocationID")
                    .HasComment("Storage Location that the Goods were delivered from (Defaults to Sales Order Header Location)");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.Length).HasComment("Length of Item Unit Ordered / Quoted");

                entity.Property(e => e.LineTypeId)
                    .HasColumnName("LineTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1= Steel Item, 2 = Non-Steel Item, 3= Free Line Item");

                entity.Property(e => e.Notes).HasComment("Allows user notes or predefined notes");

                entity.Property(e => e.OrderQuantity)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Quantity Ordered");

                entity.Property(e => e.OriginalDiscountValue).HasComment("Discount Value in Document Currency Value");

                entity.Property(e => e.OriginalTaxValue).HasComment("Tax Value in Document Currency Value");

                entity.Property(e => e.OriginalUnitPrice).HasComment("Unit Price in Document Currency");

                entity.Property(e => e.OriginalValue).HasComment("Total Item Value in Document Currency Value");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.Source).HasDefaultValueSql("((1))");

                entity.Property(e => e.SuggestedItemInventoryId)
                    .HasColumnName("SuggestedItemInventoryID")
                    .HasComment("Used as a guide to populate select the Inventory for the Delivery.");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("FK Tax Code (Defaults to Item Customer Tax Code)");

                entity.Property(e => e.TaxPercent).HasComment("Tax Percentage");

                entity.Property(e => e.TaxValue).HasComment("Tax Value in System Currency");

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sales Price Unit of Measure  (Defaults to Item Customer Unit)");

                entity.Property(e => e.UnitPrice).HasComment("Unit Price in Local Currency Value");

                entity.Property(e => e.Value).HasComment("Total Item Value in System Currency");

                entity.Property(e => e.Weight).HasComment("Weight of Item Unit Ordered / Quoted");

                entity.Property(e => e.Width).HasComment("Width of Item Unit Ordered / Quoted");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.SalesOrderItems)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_SalesOrderItem_Contract");

                entity.HasOne(d => d.ContractInvoiceSchedule)
                    .WithMany(p => p.SalesOrderItems)
                    .HasForeignKey(d => d.ContractInvoiceScheduleId)
                    .HasConstraintName("FK_SalesOrderItem_ContractInvoiceSchedule");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.SalesOrderItems)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_SalesOrderItem_ItemReservation");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderItems)
                    .HasForeignKey(d => d.SalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_SalesOrder");
            });

            modelBuilder.Entity<SalesOrderItemInstance>(entity =>
            {
                entity.ToTable("SalesOrderItemInstance");

                entity.HasIndex(e => e.ItemInventoryTrackingGuidId, "IX_SalesOrderItemInstance_ItemInventoryTrackingGUIDID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ItemReservationId, "IX_SalesOrderItemInstance_ItemReservationID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SalesOrderItemId, "IX_SalesOrderItemInstance_SalesOrderItemID")
                    .HasFillFactor(100);

                entity.Property(e => e.SalesOrderItemInstanceId).HasColumnName("SalesOrderItemInstanceID");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.HasOne(d => d.ItemInventoryTrackingGuid)
                    .WithMany(p => p.SalesOrderItemInstances)
                    .HasForeignKey(d => d.ItemInventoryTrackingGuidId)
                    .HasConstraintName("FK_SalesOrderItemInstance_ItemInventoryTrackingGuid");

                entity.HasOne(d => d.ItemReservation)
                    .WithMany(p => p.SalesOrderItemInstances)
                    .HasForeignKey(d => d.ItemReservationId)
                    .HasConstraintName("FK_SalesOrderItemInstance_ItemReservation");

                entity.HasOne(d => d.SalesOrderItem)
                    .WithMany(p => p.SalesOrderItemInstances)
                    .HasForeignKey(d => d.SalesOrderItemId)
                    .HasConstraintName("FK_SalesOrderItemInstance_SalesOrderItem");
            });

            modelBuilder.Entity<SectionCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_SectionCat");

                entity.Property(e => e.Alpha).HasColumnName("ALPHA");

                entity.Property(e => e.Bd).HasColumnName("bd");

                entity.Property(e => e.Bdx).HasColumnName("bdx");

                entity.Property(e => e.Bdy).HasColumnName("bdy");

                entity.Property(e => e.Beta).HasColumnName("BETA");

                entity.Property(e => e.Bp).HasColumnName("BP");

                entity.Property(e => e.Cb).HasColumnName("CB");

                entity.Property(e => e.Cbl).HasColumnName("CBL");

                entity.Property(e => e.Cbr).HasColumnName("CBR");

                entity.Property(e => e.Cd).HasColumnName("CD");

                entity.Property(e => e.Cdl).HasColumnName("CDL");

                entity.Property(e => e.Cdr).HasColumnName("CDR");

                entity.Property(e => e.H).HasColumnName("h");

                entity.Property(e => e.Hd).HasColumnName("hd");

                entity.Property(e => e.Kgm)
                    .HasMaxLength(100)
                    .HasColumnName("kgm");

                entity.Property(e => e.R).HasColumnName("r");

                entity.Property(e => e.R1).HasColumnName("r1");

                entity.Property(e => e.R2).HasColumnName("r2");

                entity.Property(e => e.RegionCode).HasMaxLength(100);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.Rolltype).HasMaxLength(100);

                entity.Property(e => e.S1).HasColumnName("s1");

                entity.Property(e => e.S1x).HasColumnName("s1x");

                entity.Property(e => e.S1y).HasColumnName("s1y");

                entity.Property(e => e.S2).HasColumnName("s2");

                entity.Property(e => e.S2x).HasColumnName("s2x");

                entity.Property(e => e.S2y).HasColumnName("s2y");

                entity.Property(e => e.S4).HasColumnName("s4");

                entity.Property(e => e.SectionGroup).HasMaxLength(100);

                entity.Property(e => e.SectionGroupId).HasColumnName("SectionGroupID");

                entity.Property(e => e.SectionType).HasMaxLength(200);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.Shape).HasMaxLength(100);

                entity.Property(e => e.Stock).HasMaxLength(100);

                entity.Property(e => e.Surfacearea).HasColumnName("surfacearea");

                entity.Property(e => e.Tp).HasColumnName("TP");

                entity.Property(e => e.Tweb).HasColumnName("tweb");
            });

            modelBuilder.Entity<SectionRollType>(entity =>
            {
                entity.ToTable("SectionRollType");

                entity.Property(e => e.SectionRollTypeId).HasColumnName("SectionRollTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SectionType>(entity =>
            {
                entity.ToTable("SectionType");

                entity.HasComment("Hot Formed, Cold Formed, Cold Rolled, Misc");

                entity.HasIndex(e => e.Enabled, "IX_SectionType_Enabled");

                entity.HasIndex(e => e.RegionId, "IX_SectionType_FK_SectionType_Region");

                entity.HasIndex(e => e.SectionRollTypeId, "IX_SectionType_FK_SectionType_SectionRollType");

                entity.HasIndex(e => e.SectionTypeId, "IX_SectionType_SectiontypeID_Name");

                entity.HasIndex(e => e.SectionTypeId, "IX_SectionType_WeightInfo");

                entity.HasIndex(e => new { e.Name, e.RegionId }, "UC_SectionType_Name_RegionID")
                    .IsUnique();

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.BackFlush)
                    .HasDefaultValueSql("((0))")
                    .HasComment("");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CostCodeId)
                    .HasColumnName("CostCodeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.CreateProductionWorkOrder)
                    .HasDefaultValueSql("((0))")
                    .HasComment("");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.FlipTeeForDstv).HasColumnName("FlipTeeForDSTV");

                entity.Property(e => e.Grades).HasDefaultValueSql("(1)");

                entity.Property(e => e.Linear).HasDefaultValueSql("(1)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriceUnitId)
                    .HasColumnName("PriceUnitID")
                    .HasDefaultValueSql("(2)");

                entity.Property(e => e.ProductionTypeId)
                    .HasColumnName("ProductionTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RegionId)
                    .HasColumnName("RegionID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ScrapType).HasDefaultValueSql("((0))");

                entity.Property(e => e.SectionNameMask).HasMaxLength(100);

                entity.Property(e => e.SectionRollTypeId)
                    .HasColumnName("SectionRollTypeID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ShapeId)
                    .HasColumnName("ShapeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StruCadheadingId).HasColumnName("StruCADHeadingID");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.Property(e => e.WeightCalcTypeId)
                    .HasColumnName("WeightCalcTypeID")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.SectionTypes)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SectionType_Region");

                entity.HasOne(d => d.SectionRollType)
                    .WithMany(p => p.SectionTypes)
                    .HasForeignKey(d => d.SectionRollTypeId)
                    .HasConstraintName("FK_SectionType_SectionRollType");
            });

            modelBuilder.Entity<SectionTypeGrade>(entity =>
            {
                entity.HasKey(e => new { e.SectionTypeId, e.GradeId })
                    .HasName("PK_SectionGrades");

                entity.ToTable("SectionTypeGrade");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");
            });

            modelBuilder.Entity<Shape>(entity =>
            {
                entity.ToTable("_Shape");

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RawContents).HasColumnType("ntext");

                entity.Property(e => e.ShapeType).HasComment("~1 - POLYGON, 2 - CIRCLE");

                entity.Property(e => e.SurfaceAreaFormula).HasColumnType("ntext");
            });

            modelBuilder.Entity<Shape1>(entity =>
            {
                entity.HasKey(e => e.ShapeId);

                entity.ToTable("Shape");

                entity.Property(e => e.ShapeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ShapeID");

                entity.Property(e => e.DimensionImage).HasColumnType("ntext");

                entity.Property(e => e.Dstvcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("DSTVCode")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.System).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ShapeDimension>(entity =>
            {
                entity.ToTable("ShapeDimension");

                entity.HasIndex(e => e.ShapeId, "IX_ShapeDimension_FK_ShapeDimension_Shape");

                entity.Property(e => e.ShapeDimensionId).HasColumnName("ShapeDimensionID");

                entity.Property(e => e.DstvdimensionId)
                    .HasColumnName("DSTVDimensionID")
                    .HasComment("~Length=0, Profile Height=1, Flange Width = 2, Flange Thickness = 3, Web Thickness = 4, Radius = 5");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Shape)
                    .WithMany(p => p.ShapeDimensions)
                    .HasForeignKey(d => d.ShapeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShapeDimension_Shape");
            });

            modelBuilder.Entity<SplitMarkItem>(entity =>
            {
                entity.ToTable("SplitMarkItem");

                entity.HasIndex(e => e.FromMarkItemId, "IX_SplitMarkItem_FK_SplitMarkItemContractMarkItem");

                entity.Property(e => e.SplitMarkItemId).HasColumnName("SplitMarkItemID");

                entity.Property(e => e.FromMarkItemId).HasColumnName("FromMarkItemID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.HasOne(d => d.FromMarkItem)
                    .WithMany(p => p.SplitMarkItems)
                    .HasForeignKey(d => d.FromMarkItemId)
                    .HasConstraintName("FK_SplitMarkItemContractMarkItem");
            });

            modelBuilder.Entity<StruMisSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StruMIS_Sessions");

                entity.Property(e => e.Cid)
                    .HasMaxLength(100)
                    .HasColumnName("CID");

                entity.Property(e => e.Dib).HasColumnName("DIB");

                entity.Property(e => e.Dte).HasColumnType("datetime");

                entity.Property(e => e.Lid)
                    .HasMaxLength(400)
                    .HasColumnName("LID");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(200)
                    .HasColumnName("SessionID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<StrumItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_StrumItems");

                entity.Property(e => e.Cadsize)
                    .HasMaxLength(255)
                    .HasColumnName("cadsize");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code");

                entity.Property(e => e.Depth).HasColumnName("depth");

                entity.Property(e => e.Kgm).HasColumnName("kgm");

                entity.Property(e => e.Sarea).HasColumnName("sarea");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .HasColumnName("serial");

                entity.Property(e => e.Size)
                    .HasMaxLength(255)
                    .HasColumnName("size");

                entity.Property(e => e.Tflan).HasColumnName("tflan");

                entity.Property(e => e.Tweb).HasColumnName("tweb");

                entity.Property(e => e.Width).HasColumnName("width");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.ToTable("Supplier");

                entity.HasIndex(e => e.CurrencyId, "IX_Supplier_FK_Supplier_Currency");

                entity.HasIndex(e => e.EdiinterfaceIn, "IX_Supplier_FK_Supplier_EDIInterfaceIn");

                entity.HasIndex(e => e.EdiinterfaceOut, "IX_Supplier_FK_Supplier_EDIInterfaceOut");

                entity.HasIndex(e => e.FacilityId, "IX_Supplier_FK_Supplier_Facility");

                entity.HasIndex(e => e.PoediinterfaceIn, "IX_Supplier_FK_Supplier_POEDIInterfaceIn");

                entity.HasIndex(e => e.PoediinterfaceOut, "IX_Supplier_FK_Supplier_POEDIInterfaceOut");

                entity.HasIndex(e => e.PaymentTermsId, "IX_Supplier_FK_Supplier_PaymentTerms");

                entity.HasIndex(e => e.RollReferenceInterface, "IX_Supplier_FK_Supplier_RollReferenceInterface");

                entity.HasIndex(e => e.TaxCodeId, "IX_Supplier_FK_Supplier_TaxCode");

                entity.HasIndex(e => new { e.Name, e.FacilityId }, "IX_Supplier_Unique")
                    .IsUnique();

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasComment("Supplier Unique ID Number");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Default currency of supplier");

                entity.Property(e => e.Ediemail)
                    .HasMaxLength(50)
                    .HasColumnName("EDIEMail");

                entity.Property(e => e.EdifileFormat).HasColumnName("EDIFileFormat");

                entity.Property(e => e.EdiinterfaceIn).HasColumnName("EDIInterfaceIn");

                entity.Property(e => e.EdiinterfaceOut).HasColumnName("EDIInterfaceOut");

                entity.Property(e => e.Edireference)
                    .HasMaxLength(4)
                    .HasColumnName("EDIReference");

                entity.Property(e => e.EdisubjectHeaderSuffix)
                    .HasMaxLength(255)
                    .HasColumnName("EDISubjectHeaderSuffix");

                entity.Property(e => e.ExternalReference).HasMaxLength(100);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("Supplier name");

                entity.Property(e => e.PaymentTermsId)
                    .HasColumnName("PaymentTermsID")
                    .HasComment("Unique ID for the payment term");

                entity.Property(e => e.Poediemail)
                    .HasMaxLength(50)
                    .HasColumnName("POEDIEmail");

                entity.Property(e => e.PoediemailReturn)
                    .HasMaxLength(50)
                    .HasColumnName("POEDIEmailReturn");

                entity.Property(e => e.PoediinterfaceIn).HasColumnName("POEDIInterfaceIn");

                entity.Property(e => e.PoediinterfaceOut).HasColumnName("POEDIInterfaceOut");

                entity.Property(e => e.Poedireference)
                    .HasMaxLength(100)
                    .HasColumnName("POEDIReference");

                entity.Property(e => e.PoedireferenceReturn)
                    .HasMaxLength(100)
                    .HasColumnName("POEDIReferenceReturn");

                entity.Property(e => e.RollRefEdiemail)
                    .HasMaxLength(50)
                    .HasColumnName("RollRefEDIEmail");

                entity.Property(e => e.RollRefReference).HasMaxLength(100);

                entity.Property(e => e.SupplierTypeId)
                    .HasColumnName("SupplierTypeID")
                    .HasComment("Type of supplier");

                entity.Property(e => e.SystemKey).HasComment("Internal Key to Identity Suppliers required by the StruMIS System");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("The default tax code to use for this supplier");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Currency");

                entity.HasOne(d => d.EdiinterfaceInNavigation)
                    .WithMany(p => p.SupplierEdiinterfaceInNavigations)
                    .HasForeignKey(d => d.EdiinterfaceIn)
                    .HasConstraintName("FK_Supplier_EDIInterfaceIn");

                entity.HasOne(d => d.EdiinterfaceOutNavigation)
                    .WithMany(p => p.SupplierEdiinterfaceOutNavigations)
                    .HasForeignKey(d => d.EdiinterfaceOut)
                    .HasConstraintName("FK_Supplier_EDIInterfaceOut");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Supplier_Facility");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("FK_Supplier_PaymentTerms");

                entity.HasOne(d => d.PoediinterfaceInNavigation)
                    .WithMany(p => p.SupplierPoediinterfaceInNavigations)
                    .HasForeignKey(d => d.PoediinterfaceIn)
                    .HasConstraintName("FK_Supplier_POEDIInterfaceIn");

                entity.HasOne(d => d.PoediinterfaceOutNavigation)
                    .WithMany(p => p.SupplierPoediinterfaceOutNavigations)
                    .HasForeignKey(d => d.PoediinterfaceOut)
                    .HasConstraintName("FK_Supplier_POEDIInterfaceOut");

                entity.HasOne(d => d.RollReferenceInterfaceNavigation)
                    .WithMany(p => p.SupplierRollReferenceInterfaceNavigations)
                    .HasForeignKey(d => d.RollReferenceInterface)
                    .HasConstraintName("FK_Supplier_RollReferenceInterface");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.TaxCodeId)
                    .HasConstraintName("FK_Supplier_TaxCode");
            });

            modelBuilder.Entity<SupplierType>(entity =>
            {
                entity.ToTable("SupplierType");

                entity.Property(e => e.SupplierTypeId).HasColumnName("SupplierTypeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Sysdiagram>(entity =>
            {
                entity.HasKey(e => e.DiagramId)
                    .HasName("PK_sysdiagrams_diagram_id");

                entity.ToTable("sysdiagrams");

                entity.HasIndex(e => new { e.PrincipalId, e.Name }, "UK_principal_name")
                    .IsUnique();

                entity.Property(e => e.DiagramId).HasColumnName("diagram_id");

                entity.Property(e => e.Definition).HasColumnName("definition");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.PrincipalId).HasColumnName("principal_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SystemAction>(entity =>
            {
                entity.ToTable("SystemAction");

                entity.Property(e => e.SystemActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("SystemActionID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SystemActivitylog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SystemActivitylog");

                entity.HasIndex(e => e.AccessDate, "IX_SystemActivitylog_AccessDate")
                    .IsClustered()
                    .HasFillFactor(71);

                entity.Property(e => e.AccessDate).HasColumnType("datetime");

                entity.Property(e => e.Action).HasMaxLength(50);

                entity.Property(e => e.Object).HasMaxLength(50);

                entity.Property(e => e.ProcedureName).HasMaxLength(200);

                entity.Property(e => e.Username).HasMaxLength(100);
            });

            modelBuilder.Entity<SystemDataPort>(entity =>
            {
                entity.ToTable("SystemDataPort");

                entity.Property(e => e.SystemDataPortId)
                    .ValueGeneratedNever()
                    .HasColumnName("SystemDataPortID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FileExtention)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'*.xml')");

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<SystemFieldPrecision>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SystemFieldPrecision");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PrecisionKey)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SystemFieldPrecisionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SystemFieldPrecisionID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<SystemInstallationLog>(entity =>
            {
                entity.ToTable("SystemInstallationLog");

                entity.Property(e => e.SystemInstallationLogId).HasColumnName("SystemInstallationLogID");

                entity.Property(e => e.HotfixVersion)
                    .HasMaxLength(50)
                    .HasComment("The name of the hotfix that was loaded");

                entity.Property(e => e.InstalledOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the upgrade was run");

                entity.Property(e => e.IsHotfix).HasComment("1 = This is a hotfix, 0 - This is not  a hotfix");

                entity.Property(e => e.ScriptVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The version of the script file");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("The version that the database has been upgraded to");
            });

            modelBuilder.Entity<SystemModule>(entity =>
            {
                entity.ToTable("SystemModule");

                entity.Property(e => e.SystemModuleId)
                    .ValueGeneratedNever()
                    .HasColumnName("SystemModuleID");

                entity.Property(e => e.MenuName).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.System).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SystemModuleGroup>(entity =>
            {
                entity.ToTable("SystemModuleGroup");

                entity.Property(e => e.SystemModuleGroupId).HasColumnName("SystemModuleGroupID");

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SystemModuleGroupModule>(entity =>
            {
                entity.ToTable("SystemModuleGroupModule");

                entity.HasIndex(e => e.SystemModuleId, "IX_SystemModuleGroupModule_FK_SystemModuleGroupModule_SystemModule");

                entity.HasIndex(e => e.SystemModuleGroupId, "IX_SystemModuleGroupModule_FK_SystemModuleGroupModule_SystemModuleGroup");

                entity.Property(e => e.SystemModuleGroupModuleId).HasColumnName("SystemModuleGroupModuleID");

                entity.Property(e => e.SystemModuleGroupId).HasColumnName("SystemModuleGroupID");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.HasOne(d => d.SystemModuleGroup)
                    .WithMany(p => p.SystemModuleGroupModules)
                    .HasForeignKey(d => d.SystemModuleGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemModuleGroupModule_SystemModuleGroup");

                entity.HasOne(d => d.SystemModule)
                    .WithMany(p => p.SystemModuleGroupModules)
                    .HasForeignKey(d => d.SystemModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemModuleGroupModule_SystemModule");
            });

            modelBuilder.Entity<SystemModuleGroupObject>(entity =>
            {
                entity.ToTable("SystemModuleGroupObject");

                entity.HasIndex(e => e.SystemModuleGroupId, "IX_SystemModuleGroupObject_FK_SystemModuleGroupObject_SystemModuleGroup");

                entity.HasIndex(e => e.SystemObjectId, "IX_SystemModuleGroupObject_FK_SystemModuleGroupObject_SystemObject");

                entity.Property(e => e.SystemModuleGroupObjectId).HasColumnName("SystemModuleGroupObjectID");

                entity.Property(e => e.SystemModuleGroupId).HasColumnName("SystemModuleGroupID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.HasOne(d => d.SystemModuleGroup)
                    .WithMany(p => p.SystemModuleGroupObjects)
                    .HasForeignKey(d => d.SystemModuleGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemModuleGroupObject_SystemModuleGroup");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.SystemModuleGroupObjects)
                    .HasForeignKey(d => d.SystemObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemModuleGroupObject_SystemObject");
            });

            modelBuilder.Entity<SystemModuleObject>(entity =>
            {
                entity.ToTable("SystemModuleObject");

                entity.HasIndex(e => e.SystemObjectId, "IX_SystemModuleObject_FK_SystemModuleObject_SystemObject");

                entity.HasIndex(e => new { e.SystemModuleId, e.SystemObjectId }, "IX_SystemModuleObject_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.SystemModuleObjectId).HasColumnName("SystemModuleObjectID");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.HasOne(d => d.SystemModule)
                    .WithMany(p => p.SystemModuleObjects)
                    .HasForeignKey(d => d.SystemModuleId)
                    .HasConstraintName("FK_SystemModuleObject_SystemModule");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.SystemModuleObjects)
                    .HasForeignKey(d => d.SystemObjectId)
                    .HasConstraintName("FK_SystemModuleObject_SystemObject");
            });

            modelBuilder.Entity<SystemNotificationMessage>(entity =>
            {
                entity.HasKey(e => e.MessageId)
                    .HasName("PK_SystemNotificationMessageQueue");

                entity.ToTable("SystemNotificationMessage");

                entity.HasIndex(e => e.CreatedOn, "IX_SystemNotificationMessage_CreatedOn");

                entity.HasIndex(e => e.Processed, "IX_SystemNotificationMessage_Processed");

                entity.HasIndex(e => e.SourceSystemObjectId, "IX_SystemNotificationMessage_SourceSystemObjectID");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventType).HasComment("Insert = 1, Update = 2, Delete = 3");

                entity.Property(e => e.Failed).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedBy).HasMaxLength(50);

                entity.Property(e => e.ProcessedOn).HasColumnType("datetime");

                entity.Property(e => e.SourceSystemObjectId).HasColumnName("SourceSystemObjectID");

                entity.Property(e => e.Xml)
                    .HasColumnType("xml")
                    .HasColumnName("XML");
            });

            modelBuilder.Entity<SystemObject>(entity =>
            {
                entity.ToTable("SystemObject");

                entity.Property(e => e.SystemObjectId)
                    .ValueGeneratedNever()
                    .HasColumnName("SystemObjectID");

                entity.Property(e => e.DialogFormName).HasMaxLength(50);

                entity.Property(e => e.FacilityRestricted)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MenuName).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NavigationFormCaption).HasMaxLength(255);

                entity.Property(e => e.ParentSystemObjectId).HasColumnName("ParentSystemObjectID");

                entity.Property(e => e.SearchFormName).HasMaxLength(50);

                entity.Property(e => e.Searchable).HasDefaultValueSql("(1)");

                entity.Property(e => e.System).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<SystemObjectAction>(entity =>
            {
                entity.HasKey(e => new { e.SystemObjectId, e.SystemActionId });

                entity.ToTable("SystemObjectAction");

                entity.HasIndex(e => e.SystemActionId, "IX_SystemObjectAction_FK_SystemObjectAction_SystemAction")
                    .HasFillFactor(71);

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.SystemActionId).HasColumnName("SystemActionID");

                entity.Property(e => e.SystemObjectActionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SystemObjectActionID");

                entity.HasOne(d => d.SystemAction)
                    .WithMany(p => p.SystemObjectActions)
                    .HasForeignKey(d => d.SystemActionId)
                    .HasConstraintName("FK_SystemObjectAction_SystemAction");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.SystemObjectActions)
                    .HasForeignKey(d => d.SystemObjectId)
                    .HasConstraintName("FK_SystemObjectAction_SystemObject");
            });

            modelBuilder.Entity<SystemObjectAttachment>(entity =>
            {
                entity.HasKey(e => e.AttachmentId);

                entity.ToTable("SystemObjectAttachment");

                entity.HasIndex(e => e.SystemObjectId, "IX_SystemObjectAttachment_FK_SystemObjectAttachment_SystemObject");

                entity.Property(e => e.AttachmentId).HasColumnName("AttachmentID");

                entity.Property(e => e.FileImage).HasColumnType("ntext");

                entity.Property(e => e.FilePath).HasColumnType("ntext");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.SystemObjectAttachments)
                    .HasForeignKey(d => d.SystemObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemObjectAttachment_SystemObject");
            });

            modelBuilder.Entity<SystemObjectHiddenField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SystemObjectHiddenField");

                entity.Property(e => e.OverrideSystemObjectId).HasColumnName("OverrideSystemObjectID");

                entity.Property(e => e.SystemObjectHiddenFieldId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SystemObjectHiddenFieldID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");
            });

            modelBuilder.Entity<SystemObjectNote>(entity =>
            {
                entity.ToTable("SystemObjectNote");

                entity.Property(e => e.SystemObjectNoteId).HasColumnName("SystemObjectNoteID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SystemObjectReport>(entity =>
            {
                entity.ToTable("SystemObjectReport");

                entity.Property(e => e.SystemObjectReportId).HasColumnName("SystemObjectReportID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.ReportType).HasDefaultValueSql("((1))");

                entity.Property(e => e.System).HasDefaultValueSql("((0))");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");
            });

            modelBuilder.Entity<SystemObjectUserField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SystemObjectUserField");

                entity.HasIndex(e => new { e.SystemObjectId, e.SystemObjectUserFieldId }, "IX_SystemObjectUserfield_Both");

                entity.HasIndex(e => e.SystemObjectId, "IX_SystemObjectUserfield_SystemObjectID");

                entity.HasIndex(e => e.SystemObjectUserFieldId, "IX_SystemObjectUserfield_SystemObjectUserFieldID");

                entity.Property(e => e.Bool1Label).HasMaxLength(255);

                entity.Property(e => e.Bool1Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bool2Label).HasMaxLength(255);

                entity.Property(e => e.Bool2Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bool3Label).HasMaxLength(255);

                entity.Property(e => e.Bool3Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bool4Label).HasMaxLength(255);

                entity.Property(e => e.Bool4Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime1Label).HasMaxLength(255);

                entity.Property(e => e.DateTime1Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime2Label).HasMaxLength(255);

                entity.Property(e => e.DateTime2Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime3Label).HasMaxLength(255);

                entity.Property(e => e.DateTime3Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime4Label).HasMaxLength(255);

                entity.Property(e => e.DateTime4Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime5Label).HasMaxLength(255);

                entity.Property(e => e.DateTime5Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTime6Label).HasMaxLength(255);

                entity.Property(e => e.DateTime6Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float1Label).HasMaxLength(255);

                entity.Property(e => e.Float1Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float2Label).HasMaxLength(255);

                entity.Property(e => e.Float2Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float3Label).HasMaxLength(255);

                entity.Property(e => e.Float3Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float4Label).HasMaxLength(255);

                entity.Property(e => e.Float4Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float5Label).HasMaxLength(255);

                entity.Property(e => e.Float5Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float6Label).HasMaxLength(255);

                entity.Property(e => e.Float6Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float7Label).HasMaxLength(255);

                entity.Property(e => e.Float7Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Float8Label).HasMaxLength(255);

                entity.Property(e => e.Float8Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String10Label).HasMaxLength(255);

                entity.Property(e => e.String10Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String11Label).HasMaxLength(255);

                entity.Property(e => e.String11Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String12Label).HasMaxLength(255);

                entity.Property(e => e.String12Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String13Label).HasMaxLength(255);

                entity.Property(e => e.String13Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String14Label).HasMaxLength(255);

                entity.Property(e => e.String14Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String15Label).HasMaxLength(255);

                entity.Property(e => e.String15Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String16Label).HasMaxLength(255);

                entity.Property(e => e.String16Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String17Label).HasMaxLength(255);

                entity.Property(e => e.String17Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String18Label).HasMaxLength(255);

                entity.Property(e => e.String18Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String19Label).HasMaxLength(255);

                entity.Property(e => e.String19Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String1Label).HasMaxLength(255);

                entity.Property(e => e.String1Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String20Label).HasMaxLength(255);

                entity.Property(e => e.String20Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String21Label).HasMaxLength(255);

                entity.Property(e => e.String21Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String22Label).HasMaxLength(255);

                entity.Property(e => e.String22Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String2Label).HasMaxLength(255);

                entity.Property(e => e.String2Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String3Label).HasMaxLength(255);

                entity.Property(e => e.String3Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String4Label).HasMaxLength(255);

                entity.Property(e => e.String4Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String5Label).HasMaxLength(255);

                entity.Property(e => e.String5Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String6Label).HasMaxLength(255);

                entity.Property(e => e.String6Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String7Label).HasMaxLength(255);

                entity.Property(e => e.String7Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String8Label).HasMaxLength(255);

                entity.Property(e => e.String8Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.String9Label).HasMaxLength(255);

                entity.Property(e => e.String9Mandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.SystemObjectUserFieldId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SystemObjectUserFieldID");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SystemObjectUserFieldDatum>(entity =>
            {
                entity.HasKey(e => e.SystemObjectUserFieldDataId);

                entity.HasIndex(e => e.SystemObjectId, "IX_SystemObjectUserFieldData_SystemObjectID");

                entity.HasIndex(e => e.SystemObjectKey, "IX_SystemObjectUserFieldData_SystemObjectKey");

                entity.Property(e => e.SystemObjectUserFieldDataId).HasColumnName("SystemObjectUserFieldDataID");

                entity.Property(e => e.DateTime1).HasColumnType("datetime");

                entity.Property(e => e.DateTime2).HasColumnType("datetime");

                entity.Property(e => e.DateTime3).HasColumnType("datetime");

                entity.Property(e => e.DateTime4).HasColumnType("datetime");

                entity.Property(e => e.DateTime5).HasColumnType("datetime");

                entity.Property(e => e.DateTime6).HasColumnType("datetime");

                entity.Property(e => e.String1).HasMaxLength(255);

                entity.Property(e => e.String10).HasMaxLength(255);

                entity.Property(e => e.String11).HasMaxLength(255);

                entity.Property(e => e.String12).HasMaxLength(255);

                entity.Property(e => e.String13).HasMaxLength(255);

                entity.Property(e => e.String14).HasMaxLength(255);

                entity.Property(e => e.String15).HasMaxLength(255);

                entity.Property(e => e.String16).HasMaxLength(255);

                entity.Property(e => e.String17).HasMaxLength(255);

                entity.Property(e => e.String18).HasMaxLength(255);

                entity.Property(e => e.String19).HasMaxLength(255);

                entity.Property(e => e.String2).HasMaxLength(255);

                entity.Property(e => e.String20).HasMaxLength(255);

                entity.Property(e => e.String21).HasMaxLength(255);

                entity.Property(e => e.String22).HasMaxLength(255);

                entity.Property(e => e.String3).HasMaxLength(255);

                entity.Property(e => e.String4).HasMaxLength(255);

                entity.Property(e => e.String5).HasMaxLength(255);

                entity.Property(e => e.String6).HasMaxLength(255);

                entity.Property(e => e.String7).HasMaxLength(255);

                entity.Property(e => e.String8).HasMaxLength(255);

                entity.Property(e => e.String9).HasMaxLength(255);

                entity.Property(e => e.SystemChildObjectId).HasColumnName("SystemChildObjectID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.Version).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SystemObjectUserRestriction>(entity =>
            {
                entity.ToTable("SystemObjectUserRestriction");

                entity.HasIndex(e => new { e.SystemObjectId, e.SystemObjectKey }, "IX_SystemObjectUserRestriction")
                    .HasFillFactor(90);

                entity.Property(e => e.SystemObjectUserRestrictionId).HasColumnName("SystemObjectUserRestrictionID");

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.HasOne(d => d.SystemObject)
                    .WithMany(p => p.SystemObjectUserRestrictions)
                    .HasForeignKey(d => d.SystemObjectId)
                    .HasConstraintName("FK_SystemObjectUserRestriction_SystemObject");
            });

            modelBuilder.Entity<SystemObjectUserRestrictionUser>(entity =>
            {
                entity.ToTable("SystemObjectUserRestrictionUser");

                entity.HasIndex(e => new { e.UserId, e.SystemObjectUserRestrictionId }, "IX_SystemObjectUserRestrictionUser")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SystemObjectUserRestrictionId, "IX_SystemObjectUserRestrictionUser_FK_SystemObjectUserRestrictionUser_SystemObjectUserRestriction");

                entity.Property(e => e.SystemObjectUserRestrictionUserId).HasColumnName("SystemObjectUserRestrictionUserID");

                entity.Property(e => e.SystemObjectUserRestrictionId).HasColumnName("SystemObjectUserRestrictionID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.SystemObjectUserRestriction)
                    .WithMany(p => p.SystemObjectUserRestrictionUsers)
                    .HasForeignKey(d => d.SystemObjectUserRestrictionId)
                    .HasConstraintName("FK_SystemObjectUserRestrictionUser_SystemObjectUserRestriction");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SystemObjectUserRestrictionUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_SystemObjectUserRestrictionUser_User");
            });

            modelBuilder.Entity<SystemOption>(entity =>
            {
                entity.ToTable("SystemOption");

                entity.HasIndex(e => e.SystemOptionGroupId, "IX_SystemOption_FK_SystemOption_SystemOptionGroup");

                entity.Property(e => e.SystemOptionId)
                    .ValueGeneratedNever()
                    .HasColumnName("SystemOptionID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(2000);

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.Property(e => e.SystemOptionGroupId)
                    .HasColumnName("SystemOptionGroupID")
                    .HasDefaultValueSql("(1)")
                    .HasComment("~Foreign Key from System Options Group table.");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.ValueControlType).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.SystemOptionGroup)
                    .WithMany(p => p.SystemOptions)
                    .HasForeignKey(d => d.SystemOptionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SystemOption_SystemOptionGroup");
            });

            modelBuilder.Entity<SystemOptionGroup>(entity =>
            {
                entity.ToTable("SystemOptionGroup");

                entity.Property(e => e.SystemOptionGroupId)
                    .HasColumnName("SystemOptionGroupID")
                    .HasComment("Unique ID automatically generated");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasComment("Description");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("System Option Group Name");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.System).HasComment("System Field");
            });

            modelBuilder.Entity<SystemTask>(entity =>
            {
                entity.ToTable("SystemTask");

                entity.Property(e => e.SystemTaskId).HasColumnName("SystemTaskID");

                entity.Property(e => e.Backuplocation).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Enabled).HasDefaultValueSql("(1)");

                entity.Property(e => e.ExcelTemplate).HasMaxLength(500);

                entity.Property(e => e.Friday).HasDefaultValueSql("(0)");

                entity.Property(e => e.MeasureDenominator).HasComment("Half,Quarter,Eighth,Sixteenth,ThirtySecondth");

                entity.Property(e => e.MeasureUnit).HasComment("Imperial,Metric,ImperialInch");

                entity.Property(e => e.Monday).HasDefaultValueSql("(0)");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.NextRunDate).HasColumnType("datetime");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.ReportPath).HasMaxLength(500);

                entity.Property(e => e.ReportTemplateFacilityId).HasColumnName("ReportTemplateFacilityID");

                entity.Property(e => e.RunFromDate).HasColumnType("datetime");

                entity.Property(e => e.RunInterval).HasDefaultValueSql("(1)");

                entity.Property(e => e.RunMonthDay).HasDefaultValueSql("(1)");

                entity.Property(e => e.RunMonthType)
                    .HasDefaultValueSql("(1)")
                    .HasComment("~1 - Specific day of the month; 2 - End of month");

                entity.Property(e => e.RunTime).HasColumnType("datetime");

                entity.Property(e => e.RunToDate).HasColumnType("datetime");

                entity.Property(e => e.RunType)
                    .HasDefaultValueSql("(1)")
                    .HasComment("~1 - Once, 2 - Daily,3 - Weekly,4 - Monthly");

                entity.Property(e => e.Saturday).HasDefaultValueSql("(0)");

                entity.Property(e => e.ScriptText).HasColumnType("ntext");

                entity.Property(e => e.Sunday).HasDefaultValueSql("(0)");

                entity.Property(e => e.System).HasDefaultValueSql("(0)");

                entity.Property(e => e.TaskType).HasDefaultValueSql("(1)");

                entity.Property(e => e.Thursday).HasDefaultValueSql("(0)");

                entity.Property(e => e.TransactionInterfaceId).HasColumnName("TransactionInterfaceID");

                entity.Property(e => e.Tuesday).HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");

                entity.Property(e => e.Wednesday).HasDefaultValueSql("(0)");

                entity.Property(e => e.WeightUnit).HasComment("(Kg) Kilograms,(T) Metric Tonnes,(lb) Pounds,(t) Tons");
            });

            modelBuilder.Entity<SystemTaskExecution>(entity =>
            {
                entity.HasIndex(e => e.SystemTaskId, "IX_SystemTaskExecutions_FK_SystemTaskExecutions_SystemTask")
                    .HasFillFactor(71);

                entity.Property(e => e.SystemTaskExecutionId).HasColumnName("SystemTaskExecutionID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Message).HasMaxLength(4000);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status).HasComment("~1 - Running , 2 - Sucess , 3 - Error");

                entity.Property(e => e.SystemTaskId).HasColumnName("SystemTaskID");

                entity.HasOne(d => d.SystemTask)
                    .WithMany(p => p.SystemTaskExecutions)
                    .HasForeignKey(d => d.SystemTaskId)
                    .HasConstraintName("FK_SystemTaskExecutions_SystemTask");
            });

            modelBuilder.Entity<SystemUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.File).HasColumnType("image");

                entity.Property(e => e.Installed).HasComment("~0 - False , 1 - True");

                entity.Property(e => e.SystemUpdateId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SystemUpdateID");

                entity.Property(e => e.UpdateType)
                    .HasDefaultValueSql("(2)")
                    .HasComment("~1 - Server Only, 2 - Server and Client ");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<Tally>(entity =>
            {
                entity.HasKey(e => e.RwInt)
                    .HasName("PK__TALLY__449B55D844BC4EE6");

                entity.ToTable("TALLY");

                entity.HasIndex(e => e.Rwfloat, "IX_Tally_Float");

                entity.Property(e => e.RwInt)
                    .ValueGeneratedNever()
                    .HasColumnName("RwINT");

                entity.Property(e => e.Rwfloat).HasColumnName("RWFLOAT");
            });

            modelBuilder.Entity<TaxCode>(entity =>
            {
                entity.ToTable("TaxCode");

                entity.Property(e => e.TaxCodeId)
                    .HasColumnName("TaxCodeID")
                    .HasComment("Unique ID for the tax code");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created. ");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("Description of the tax code");

                entity.Property(e => e.ExternalReference).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the tax code");

                entity.Property(e => e.TaxPercentage).HasComment("the percentage tax to use");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TempFileUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_FileUploads");

                entity.HasIndex(e => e.FileUploadId, "IX_Temp_FileUploads_ID")
                    .HasFillFactor(100);

                entity.Property(e => e.FileContents).IsRequired();

                entity.Property(e => e.FileUploadId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TempNestingResultAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_NestingResultAllocation");

                entity.Property(e => e.AlternateItemId).HasColumnName("AlternateItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SessionID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<TempNestingResultItemListing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_NestingResultItemListing");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.SequenceId).HasColumnName("SequenceID");

                entity.Property(e => e.SessionId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SessionID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TempNestingResultLength>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_NestingResultLengths");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.SessionId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SessionID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<TempProductionWorkOrder>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkOrderId);

                entity.ToTable("temp_ProductionWorkOrder");

                entity.HasIndex(e => new { e.ContractItemId, e.MarkId, e.LinkId }, "IX_temp_ProductionWorkOrder_MarkItem")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkInstanceId).HasColumnName("ContractMarkInstanceID");

                entity.Property(e => e.ContractMarkItemInstanceId).HasColumnName("ContractMarkItemInstanceID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.GroupPwoId)
                    .HasColumnName("_group_pwo_id")
                    .HasComment("This column is used to group work orders together by their (MarkID, TransactionID, BundleID, CuttingPlanID)");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.ProductionWorkOrderTemplateId).HasColumnName("ProductionWorkOrderTemplateID");

                entity.Property(e => e.SessionGuid)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UseCam)
                    .HasColumnName("UseCAM")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TempProductionWorkOrderTemplate>(entity =>
            {
                entity.HasKey(e => e.ProductionWorkOrderTemplateId);

                entity.ToTable("temp_ProductionWorkOrderTemplate");

                entity.HasIndex(e => new { e.Active, e.GroupPwotId }, "IX_temp_ProductionWorkOrderTemplate_Active");

                entity.HasIndex(e => e.FailedRuleId, "IX_temp_ProductionWorkOrderTemplate_FailedRuleID");

                entity.HasIndex(e => e.ProductionWorkOrderId, "IX_temp_ProductionWorkOrderTemplate_ProductionWorkOrderID");

                entity.HasIndex(e => e.GroupPwotId, "IX_temp_ProductionWorkOrderTemplate_group_pwot_id_Includes")
                    .HasFillFactor(100);

                entity.Property(e => e.ProductionWorkOrderTemplateId).HasColumnName("ProductionWorkOrderTemplateID");

                entity.Property(e => e.FailedItemLocationId).HasColumnName("FailedItemLocationID");

                entity.Property(e => e.FailedProcessId).HasColumnName("FailedProcessID");

                entity.Property(e => e.FailedRuleId).HasColumnName("FailedRuleID");

                entity.Property(e => e.GroupPwoId)
                    .HasColumnName("_group_pwo_id")
                    .HasComment("This column is used to group work orders together by their (MarkID, TransactionID, BundleID, CuttingPlanID)");

                entity.Property(e => e.GroupPwotId)
                    .HasColumnName("_group_pwot_id")
                    .HasComment("This column is used to group work order templates together by their (MarkID, TransactionID, BundleID, CuttingPlanID)");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.HasOne(d => d.ProductionWorkOrder)
                    .WithMany(p => p.TempProductionWorkOrderTemplates)
                    .HasForeignKey(d => d.ProductionWorkOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_temp_ProductionWorkOrderTemplate_temp_ProductionWorkOrder");
            });

            modelBuilder.Entity<TempProductionWorkOrderTemplateProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_ProductionWorkOrderTemplateProcess");

                entity.HasIndex(e => e.GroupPwotId, "IX_Temp_ProductionWorkOrderTemplateProcess_PWOTID");

                entity.HasIndex(e => new { e.ProductionWorkOrderTemplateId, e.ProductionProcessId }, "IX_temp_ProductionWorkOrderTemplateProcess_CompoundPK")
                    .IsClustered();

                entity.HasIndex(e => e.ProductionProcessId, "IX_temp_ProductionWorkOrderTemplateProcess_ProductionProcessID");

                entity.HasIndex(e => new { e.ProductionWorkOrderTemplateId, e.GroupPwotId }, "IX_temp_ProductionWorkOrderTemplateProcess_ProductionWorkOrderTemplateID");

                entity.Property(e => e.DefaultItemLocationId).HasColumnName("DefaultItemLocationID");

                entity.Property(e => e.DefaultProductionWorkStationId).HasColumnName("DefaultProductionWorkStationID");

                entity.Property(e => e.DisplayTimeUnitId).HasColumnName("DisplayTimeUnitID");

                entity.Property(e => e.GroupPwotId)
                    .HasColumnName("_group_pwot_id")
                    .HasComment("This column is used to group work order templates together by their (MarkID, TransactionID, BundleID, CuttingPlanID)");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemLocationTypeId).HasColumnName("ItemLocationTypeID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionStage).HasMaxLength(100);

                entity.Property(e => e.ProductionTemplateProcessId).HasColumnName("ProductionTemplateProcessID");

                entity.Property(e => e.ProductionWorkOrderTemplateId).HasColumnName("ProductionWorkOrderTemplateID");

                entity.Property(e => e.WorkStation).HasMaxLength(100);

                entity.HasOne(d => d.ProductionWorkOrderTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.ProductionWorkOrderTemplateId)
                    .HasConstraintName("FK_temp_ProductionWorkOrderTemplateProcess_temp_ProductionWorkOrderTemplate");
            });

            modelBuilder.Entity<TransactionImport>(entity =>
            {
                entity.ToTable("TransactionImport");

                entity.Property(e => e.TransactionImportId)
                    .HasColumnName("TransactionImportID")
                    .HasComment("Unique ID for the transaction import");

                entity.Property(e => e.DateProcessed)
                    .HasColumnType("datetime")
                    .HasComment("Date the imported data was processed");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasComment("Date the file was received");

                entity.Property(e => e.File)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasComment("The transformed XML data of the imported file");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The name of the imported file");

                entity.Property(e => e.ImportTypeId)
                    .HasColumnName("ImportTypeID")
                    .HasComment("The transaction import type (e.g. 5=Purchase Order, 6=Roll Reference)");

                entity.Property(e => e.ReferenceId)
                    .HasColumnName("ReferenceID")
                    .HasComment("The object ID to which the import refers");

                entity.Property(e => e.ReferenceId2)
                    .HasColumnName("ReferenceID2")
                    .HasComment("The related object ID for the import");
            });

            modelBuilder.Entity<TransactionInterface>(entity =>
            {
                entity.ToTable("TransactionInterface");

                entity.Property(e => e.TransactionInterfaceId)
                    .HasColumnName("TransactionInterfaceID")
                    .HasComment("Transaction Interface Unique ID Number");

                entity.Property(e => e.CodeBaseId)
                    .HasColumnName("CodeBaseID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasComment("Description of the Transaction Interface");

                entity.Property(e => e.ExecutableFileName)
                    .HasMaxLength(1000)
                    .HasComment("The file location of the accounting system");

                entity.Property(e => e.FileExtension)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The extension of the file you wish to export");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of the Transaction Interface");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasComment("The password of the user with permission to connect to the accounting system");

                entity.Property(e => e.RunAsX86).HasComment("Whether to shell the Transaction Interface to run as a 32-bit process on a 64-bit OS");

                entity.Property(e => e.Script).IsRequired();

                entity.Property(e => e.TargetApplicationFileName)
                    .HasMaxLength(1000)
                    .HasComment("The file location of the accounting system company file");

                entity.Property(e => e.TargetFolder)
                    .HasMaxLength(1000)
                    .HasComment("The folder you wish to export the file to");

                entity.Property(e => e.TransactionInterfaceTypeId)
                    .HasColumnName("TransactionInterfaceTypeID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Type of Transaction Interface");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasComment("The name of the user with permission to connect to the accounting system");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TransactionInterfaceLog>(entity =>
            {
                entity.ToTable("TransactionInterfaceLog");

                entity.HasIndex(e => e.TransactionInterfaceId, "IX_TransactionInterfaceLog_FK_TransactionInterfaceLog_TransactionInterface");

                entity.Property(e => e.TransactionInterfaceLogId).HasColumnName("TransactionInterfaceLogID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogDetails).HasComment("Details of the Transaction Interface record processed");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("LogTypeID")
                    .HasComment("Whether the Transaction Interface record processed was successful, failed or for information");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("The Name of the Transaction Interface Log");

                entity.Property(e => e.TransactionInterfaceId).HasColumnName("TransactionInterfaceID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.TransactionInterface)
                    .WithMany(p => p.TransactionInterfaceLogs)
                    .HasForeignKey(d => d.TransactionInterfaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionInterfaceLog_TransactionInterface");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.ToTable("Unit");

                entity.Property(e => e.UnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("UnitID");

                entity.Property(e => e.BaseUnitId).HasColumnName("BaseUnitID");

                entity.Property(e => e.Conversion).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.EdiunitCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("EDIUnitCode");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.System).HasDefaultValueSql("(1)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Updated>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_Updated");

                entity.HasIndex(e => e.UpdatedId, "IX_updated_UpdatedID")
                    .IsClustered()
                    .HasFillFactor(100);

                entity.Property(e => e.IdentityId).HasColumnName("IdentityID");

                entity.Property(e => e.UpdatedId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UpdatedID");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Xml)
                    .HasColumnType("xml")
                    .HasColumnName("XML");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User");

                entity.HasIndex(e => e.FacilityId, "IX_User_FK_User_Facility");

                entity.HasIndex(e => e.Name, "IX_User_Name")
                    .HasFillFactor(90);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasComment("Unique user ID number");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.Expires)
                    .HasColumnType("datetime")
                    .HasComment("Enter the date the users profile expires.");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.LanguageId)
                    .HasColumnName("LanguageID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify the users preferred language.");

                entity.Property(e => e.LastRequest).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Enter a unique name for the user.");

                entity.Property(e => e.Notes).HasMaxLength(2000);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('xhsmCaOX/x0=')")
                    .HasComment("Set the password for the user.");

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Specify the users role within the system.");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SessionId)
                    .HasMaxLength(200)
                    .HasColumnName("SessionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The last updater");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date of the last update.");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_User_Facility");
            });

            modelBuilder.Entity<UserAuthorisation>(entity =>
            {
                entity.ToTable("UserAuthorisation");

                entity.Property(e => e.UserAuthorisationId).HasColumnName("UserAuthorisationID");

                entity.Property(e => e.AuthoriserUserId).HasColumnName("AuthoriserUserID");

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserAuthorisationLimit>(entity =>
            {
                entity.ToTable("UserAuthorisationLimit");

                entity.HasIndex(e => e.CostCodeId, "IX_UserAuthorisationLimit_FK_UserAuthorisationLimit_CostCodeID");

                entity.HasIndex(e => e.UserId, "IX_UserAuthorisationLimit_FK_UserAuthorisationLimit_UserID");

                entity.Property(e => e.UserAuthorisationLimitId).HasColumnName("UserAuthorisationLimitID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.CostCode)
                    .WithMany(p => p.UserAuthorisationLimits)
                    .HasForeignKey(d => d.CostCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAuthorisationLimit_CostCodeID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserAuthorisationLimits)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAuthorisationLimit_UserID");
            });

            modelBuilder.Entity<UserLoginHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserLoginHistory");

                entity.HasIndex(e => e.SessionId, "IX_UserLoginHistory_SessionID");

                entity.Property(e => e.LastPulseTime).HasColumnType("datetime");

                entity.Property(e => e.LoginDateTime).HasColumnType("datetime");

                entity.Property(e => e.LoginError).HasMaxLength(255);

                entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SessionId).HasColumnName("SessionID");

                entity.Property(e => e.UserLoginHistoryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UserLoginHistoryID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserMyReport>(entity =>
            {
                entity.HasKey(e => e.UserMyReport1);

                entity.ToTable("UserMyReport");

                entity.Property(e => e.UserMyReport1).HasColumnName("UserMyReport");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(user_name())")
                    .HasComment("The record creator");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record was created.");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.ReportType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1=System, 2=User");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserRecentlyUsed>(entity =>
            {
                entity.ToTable("UserRecentlyUsed");

                entity.HasIndex(e => new { e.UserId, e.SystemObjectId, e.SystemObjectKey }, "IX_UserRecentlyUsed_Unique")
                    .IsUnique();

                entity.Property(e => e.UserRecentlyUsedId).HasColumnName("UserRecentlyUsedID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.SystemObjectId).HasColumnName("SystemObjectID");

                entity.Property(e => e.UsedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserReport>(entity =>
            {
                entity.ToTable("UserReport");

                entity.Property(e => e.UserReportId).HasColumnName("UserReportID");

                entity.Property(e => e.Completed).HasComment("Only display completed reports from the wizard");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.MainReportViewId).HasColumnName("MainReportViewID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Orientation)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 = Portrait, 2 = Landscape");

                entity.Property(e => e.SecondaryReportViewId).HasColumnName("SecondaryReportViewID");

                entity.Property(e => e.SqlwhereStatement)
                    .HasColumnName("SQLWhereStatement")
                    .HasDefaultValueSql("('<Report></Report>')");

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserReportColumn>(entity =>
            {
                entity.ToTable("UserReportColumn");

                entity.Property(e => e.UserReportColumnId).HasColumnName("UserReportColumnID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupBy).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsVisible)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OrderById)
                    .HasColumnName("OrderByID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReportViewColumnId).HasColumnName("ReportViewColumnID");

                entity.Property(e => e.SummaryId)
                    .HasColumnName("SummaryID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserReportId).HasColumnName("UserReportID");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<UserReportParameter>(entity =>
            {
                entity.ToTable("UserReportParameter");

                entity.HasIndex(e => e.ReportViewColumnId, "IX_UserReportParameter_FK_UserReportParameter_ReportViewColumn");

                entity.HasIndex(e => e.UserReportId, "IX_UserReportParameter_FK_UserReportParameter_UserReport");

                entity.Property(e => e.UserReportParameterId).HasColumnName("UserReportParameterID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DatabaseName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParameterFunctionId).HasColumnName("ParameterFunctionID");

                entity.Property(e => e.ParameterTypeId).HasColumnName("ParameterTypeID");

                entity.Property(e => e.ParameterValue).HasMaxLength(100);

                entity.Property(e => e.ReportViewColumnId).HasColumnName("ReportViewColumnID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserReportId).HasColumnName("UserReportID");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ReportViewColumn)
                    .WithMany(p => p.UserReportParameters)
                    .HasForeignKey(d => d.ReportViewColumnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserReportParameter_ReportViewColumn");

                entity.HasOne(d => d.UserReport)
                    .WithMany(p => p.UserReportParameters)
                    .HasForeignKey(d => d.UserReportId)
                    .HasConstraintName("FK_UserReportParameter_UserReport");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.FacilityId, e.RoleId });

                entity.ToTable("UserRole");

                entity.HasIndex(e => new { e.UserId, e.RoleId, e.FacilityId }, "IX_UserRole_COMPLEX")
                    .IsUnique();

                entity.HasIndex(e => e.FacilityId, "IX_UserRole_FK_UserRole_Facility");

                entity.HasIndex(e => e.RoleId, "IX_UserRole_FK_UserRole_Role");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserRoleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UserRoleID");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_UserRole_Facility");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserRole_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRole_User");
            });

            modelBuilder.Entity<VwAdditionSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_addition_search");

                entity.Property(e => e.AdditionId).HasColumnName("AdditionID");

                entity.Property(e => e.AdditionTemplateFacilityId).HasColumnName("AdditionTemplateFacilityID");

                entity.Property(e => e.AdditionTemplateId).HasColumnName("AdditionTemplateID");

                entity.Property(e => e.AdditionTemplateName).HasMaxLength(100);

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CostCode).HasMaxLength(50);

                entity.Property(e => e.CostCodeDescription).HasMaxLength(50);

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");

                entity.Property(e => e.ItemInventoryTrackingGuidId).HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.Line1).HasMaxLength(255);

                entity.Property(e => e.Line2).HasMaxLength(255);

                entity.Property(e => e.Line3).HasMaxLength(255);

                entity.Property(e => e.Line4).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ParentTypeId).HasColumnName("ParentTypeID");

                entity.Property(e => e.PaymentTerms).HasMaxLength(50);

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.Postcode).HasMaxLength(50);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TaxCode).HasMaxLength(50);

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");
            });

            modelBuilder.Entity<VwAdditiontemplateSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_additiontemplate_search");

                entity.Property(e => e.AdditionTemplateId).HasColumnName("AdditionTemplateID");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CostCode).HasMaxLength(50);

                entity.Property(e => e.CostCodeDescription).HasMaxLength(50);

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FacilityName).HasMaxLength(50);

                entity.Property(e => e.Line1).HasMaxLength(255);

                entity.Property(e => e.Line2).HasMaxLength(255);

                entity.Property(e => e.Line3).HasMaxLength(255);

                entity.Property(e => e.Line4).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaymentTerms).HasMaxLength(50);

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.Postcode).HasMaxLength(50);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TaxCode).HasMaxLength(50);

                entity.Property(e => e.TaxCodeId).HasColumnName("TaxCodeID");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwApplicationforpaymentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_applicationforpayment_search");

                entity.Property(e => e.ApplicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Application Date");

                entity.Property(e => e.ApplicationDue)
                    .HasColumnType("datetime")
                    .HasColumnName("Application Due");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.ApplicationNo).HasColumnName("Application No");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesInvoice)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Invoice");

                entity.Property(e => e.SalesInvoiceId).HasColumnName("SalesInvoiceID");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TotalClaimThisPeriod).HasColumnName("Total Claim this Period");

                entity.Property(e => e.TotalMaterialsStored).HasColumnName("Total Materials Stored");

                entity.Property(e => e.TotalRetentionThisPeriod).HasColumnName("Total Retention this Period");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwBarcodeinterfaceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_barcodeinterface_search");

                entity.Property(e => e.ArchiveFilePath)
                    .HasMaxLength(100)
                    .HasColumnName("Archive File Path");

                entity.Property(e => e.BarcodeinterfaceId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("barcodeinterfaceID");

                entity.Property(e => e.DefaultFilePath)
                    .HasMaxLength(100)
                    .HasColumnName("Default File Path");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FileExtention)
                    .HasMaxLength(10)
                    .HasColumnName("File Extention");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwCadinterfaceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cadinterface_search");

                entity.Property(e => e.ArchiveFilePath)
                    .HasMaxLength(100)
                    .HasColumnName("Archive File Path");

                entity.Property(e => e.CadinterfaceId).HasColumnName("CADInterfaceID");

                entity.Property(e => e.DefaultFilePath)
                    .HasMaxLength(100)
                    .HasColumnName("Default File Path");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FileExtention)
                    .HasMaxLength(50)
                    .HasColumnName("File Extention");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VwCategorySetSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_category_set_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QscategorySetId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QSCategorySetID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwContactSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contact_search");

                entity.Property(e => e.AddressSourceTypeId).HasColumnName("AddressSourceTypeID");

                entity.Property(e => e.AlternativeEmail)
                    .HasMaxLength(100)
                    .HasColumnName("Alternative Email");

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultMaxEmailSize).HasColumnName("Default Max Email Size");

                entity.Property(e => e.DefaultReason)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EmailPriority)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Email Priority");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasColumnName("First Name");

                entity.Property(e => e.HomeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Home Number");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Job Title");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Mobile Number");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PriorityId).HasColumnName("PriorityID");

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwContractBudgetItemInventoryTransactionLineByContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ContractBudget_ItemInventoryTransactionLine_ByContract");

                entity.Property(e => e.Area).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Ident).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.KeyContractId).HasColumnName("KeyContractID");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<VwContractDetailedMarkAndParent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_detailed_mark_and_parent");

                entity.Property(e => e.CadFile).HasMaxLength(500);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.ParentDrawingId).HasColumnName("ParentDrawingID");

                entity.Property(e => e.ParentDrawingName).HasMaxLength(100);

                entity.Property(e => e.ParentMarkId).HasColumnName("ParentMarkID");

                entity.Property(e => e.ParentMarkName).HasMaxLength(100);
            });

            modelBuilder.Entity<VwContractDetailedlistingGetMark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_detailedlisting_get_marks");

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DrawingDescription).HasMaxLength(255);

                entity.Property(e => e.DrawingName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.ParentMark).HasMaxLength(100);

                entity.Property(e => e.ParentMarkId).HasColumnName("ParentMarkID");
            });

            modelBuilder.Entity<VwContractDetailedlistingGetMarkitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_detailedlisting_get_markitems");

                entity.Property(e => e.AltName).HasMaxLength(255);

                entity.Property(e => e.BottomFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.BottomFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.MarkItemTypeId).HasColumnName("MarkItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(100);

                entity.Property(e => e.PrelimMark).HasMaxLength(100);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.TopFlangeGrade).HasMaxLength(100);

                entity.Property(e => e.TopFlangeWeld).HasMaxLength(100);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WebGrade).HasMaxLength(100);
            });

            modelBuilder.Entity<VwContractDetailedlistingMarksOnHold>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_detailedlisting_marks_on_hold");

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItem).HasMaxLength(100);

                entity.Property(e => e.ParentMark).HasMaxLength(100);
            });

            modelBuilder.Entity<VwContractDetailedlistingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_detailedlisting_search");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NoOfDrawings).HasColumnName("No Of Drawings");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwContractMarkSequenceOverview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_mark_sequence_overview");

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkDescription).HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItem).HasMaxLength(100);

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwContractPrelimlistingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_prelimlisting_search");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OutstandingWeight).HasColumnName("Outstanding Weight");

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwContractPriority>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_priority");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");
            });

            modelBuilder.Entity<VwContractSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contract_search");

                entity.Property(e => e.BalanceToFinish).HasColumnName("Balance To Finish");

                entity.Property(e => e.BimreviewDocumentManagement).HasColumnName("BIMReview - Document Management");

                entity.Property(e => e.CadDocumentManagement).HasColumnName("CAD - Document Management");

                entity.Property(e => e.CamDocumentManagement).HasColumnName("CAM - Document Management");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractTypeId).HasColumnName("ContractTypeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Enquiry).HasMaxLength(50);

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.GrandTotalInvoices).HasColumnName("Grand Total Invoices");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.PrelimArea).HasColumnName("Prelim Area");

                entity.Property(e => e.PrelimWeight).HasColumnName("Prelim Weight");

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.RetentionDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retention Due Date");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TotalCompletedPlusMaterialsStored).HasColumnName("Total Completed Plus Materials Stored");

                entity.Property(e => e.TotalLessRetention).HasColumnName("Total Less Retention");

                entity.Property(e => e.TotalRetention).HasColumnName("Total Retention");

                entity.Property(e => e.TotalScheduleInvoices).HasColumnName("Total Schedule Invoices");

                entity.Property(e => e.TotalScheduleValue).HasColumnName("Total Schedule Value");

                entity.Property(e => e.Type).HasMaxLength(200);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwContractbudgetSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_contractbudget_search");

                entity.Property(e => e.ContractBudgetId).HasColumnName("ContractBudgetID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCostcentreSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_costcentre_search");

                entity.Property(e => e.CostCentreId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CostCentreID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwCostcodeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_costcode_search");

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCentreDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre Description");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwCurrencySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_currency_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrencyId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CurrencyID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCurrencyconversionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_currencyconversion_list");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FromCurrencyId).HasColumnName("FromCurrencyID");

                entity.Property(e => e.ToCurrencyId).HasColumnName("ToCurrencyID");
            });

            modelBuilder.Entity<VwCurrencyconversionSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_currencyconversion_search");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion Factor");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.CurrencyConversionId).HasColumnName("CurrencyConversionID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FromCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("From Currency")
                    .IsFixedLength();

                entity.Property(e => e.FromCurrencyId).HasColumnName("From Currency ID");

                entity.Property(e => e.ToCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("To Currency")
                    .IsFixedLength();

                entity.Property(e => e.ToCurrencyId).HasColumnName("To Currency ID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwCurrentItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_current_items");

                entity.Property(e => e.AltName).HasMaxLength(255);

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefaultCostUnitId).HasColumnName("DefaultCostUnitID");

                entity.Property(e => e.DefaultInventoryUnitId).HasColumnName("DefaultInventoryUnitID");

                entity.Property(e => e.DefaultSellUnitId).HasColumnName("DefaultSellUnitID");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.ItemClassId).HasColumnName("ItemClassID");

                entity.Property(e => e.ItemGroupId).HasColumnName("ItemGroupID");

                entity.Property(e => e.ItemId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ItemID");

                entity.Property(e => e.ItemPartNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(3000);

                entity.Property(e => e.ProductionTypeId).HasColumnName("ProductionTypeID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.SectionSize).HasMaxLength(100);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.Shape).HasMaxLength(50);

                entity.Property(e => e.Tflange).HasColumnName("TFlange");

                entity.Property(e => e.TrackNumberMask).HasMaxLength(50);

                entity.Property(e => e.TrackingTypeId).HasColumnName("TrackingTypeID");

                entity.Property(e => e.Tweb).HasColumnName("TWeb");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCustomerListingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_customer_listing_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.ListingDetailId).HasColumnName("ListingDetailID");

                entity.Property(e => e.ListingType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCustomerSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_customer_search");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Customer Type");

                entity.Property(e => e.Ediemail)
                    .HasMaxLength(50)
                    .HasColumnName("EDIEMail");

                entity.Property(e => e.EdifileFormat)
                    .HasMaxLength(200)
                    .HasColumnName("EDIFileFormat");

                entity.Property(e => e.Edireference)
                    .HasMaxLength(4)
                    .HasColumnName("EDIReference");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("External Reference");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SubjectHeaderSuffix)
                    .HasMaxLength(255)
                    .HasColumnName("Subject Header Suffix");

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentDistributionListSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_distribution_list_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DocumentDistributionListId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentDistributionListID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwDocumentInterfaceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_interface_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DocumentKind)
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DrawingDate)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Date");

                entity.Property(e => e.DrawingDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Description");

                entity.Property(e => e.DrawingFormat)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Format");

                entity.Property(e => e.DrawingIssue)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Issue");

                entity.Property(e => e.DrawingLength)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Length");

                entity.Property(e => e.DrawingMark)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Mark");

                entity.Property(e => e.DrawingModified)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Modified");

                entity.Property(e => e.DrawingNested)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Nested");

                entity.Property(e => e.DrawingPrintFlag)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Print Flag");

                entity.Property(e => e.DrawingQuantity)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Quantity");

                entity.Property(e => e.DrawingRevision)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Revision");

                entity.Property(e => e.DrawingScale)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Scale");

                entity.Property(e => e.DrawingStamp)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Stamp");

                entity.Property(e => e.DrawingType)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Type");

                entity.Property(e => e.DrawingViewerStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Drawing Viewer Status");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(255)
                    .HasColumnName("File Path");

                entity.Property(e => e.MapDependantFile)
                    .HasMaxLength(100)
                    .HasColumnName("Map Dependant File");

                entity.Property(e => e.MapDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Map Description");

                entity.Property(e => e.MapDocStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Map Doc Status");

                entity.Property(e => e.MapDocType)
                    .HasMaxLength(100)
                    .HasColumnName("Map Doc Type");

                entity.Property(e => e.MapFileCreated)
                    .HasMaxLength(100)
                    .HasColumnName("Map File Created");

                entity.Property(e => e.MapFileName)
                    .HasMaxLength(100)
                    .HasColumnName("Map FileName");

                entity.Property(e => e.MapFileSize)
                    .HasMaxLength(100)
                    .HasColumnName("Map File Size");

                entity.Property(e => e.MapFileUpdated)
                    .HasMaxLength(100)
                    .HasColumnName("Map File Updated");

                entity.Property(e => e.MapName)
                    .HasMaxLength(100)
                    .HasColumnName("Map Name");

                entity.Property(e => e.MapRevision)
                    .HasMaxLength(100)
                    .HasColumnName("Map Revision");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentLatestRevisonsUsingSequence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_latest_revisons_using_sequence");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");
            });

            modelBuilder.Entity<VwDocumentPackageSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_package_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentPendingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_pending_list");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");
            });

            modelBuilder.Entity<VwDocumentPendingListDisabled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_pending_list_disabled");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");
            });

            modelBuilder.Entity<VwDocumentRevisionCodeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_revision_code_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.DocumentRevisionCodeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentRevisionCodeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .HasColumnName("Update By");

                entity.Property(e => e.UpdateOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Update On");
            });

            modelBuilder.Entity<VwDocumentRevisionSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_revision_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DocumentRevisionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentRevisionID");

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .HasColumnName("Update By");

                entity.Property(e => e.UpdateOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Update On");
            });

            modelBuilder.Entity<VwDocumentRfiSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_rfi_search");

                entity.Property(e => e.AcknowledgementReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Acknowledgement Received On");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DocumentRevisionCodeId).HasColumnName("DocumentRevisionCodeID");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalRevisionId).HasColumnName("DocumentTransmittalRevisionID");

                entity.Property(e => e.DocumentTransmittalTypeId).HasColumnName("DocumentTransmittalTypeID");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Label).HasMaxLength(200);

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Recipients).HasMaxLength(4000);

                entity.Property(e => e.RequireResponseBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Require Response By");

                entity.Property(e => e.ResponseId).HasColumnName("ResponseID");

                entity.Property(e => e.ResponseInstructions)
                    .HasMaxLength(200)
                    .HasColumnName("Response Instructions");

                entity.Property(e => e.ResponseReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Received On");

                entity.Property(e => e.Revision).HasMaxLength(50);

                entity.Property(e => e.SentBy)
                    .HasMaxLength(100)
                    .HasColumnName("Sent By");

                entity.Property(e => e.SentVia)
                    .HasMaxLength(200)
                    .HasColumnName("Sent Via");

                entity.Property(e => e.SentViaId).HasColumnName("SentViaID");

                entity.Property(e => e.Subject).HasMaxLength(255);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.VariationId).HasColumnName("VariationID");
            });

            modelBuilder.Entity<VwDocumentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_search");

                entity.Property(e => e.AltName)
                    .HasMaxLength(500)
                    .HasColumnName("Alt Name");

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Category).HasMaxLength(200);

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.DependantFile)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Discipline).HasMaxLength(200);

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentKind)
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DocumentKindId).HasColumnName("DocumentKindID");

                entity.Property(e => e.DocumentPhase)
                    .HasMaxLength(100)
                    .HasColumnName("Document Phase");

                entity.Property(e => e.DocumentRevisionCodeId).HasColumnName("DocumentRevisionCodeID");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentStatusId).HasColumnName("DocumentStatusID");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.DrawingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Drawing Date");

                entity.Property(e => e.DrawingDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Description");

                entity.Property(e => e.DrawingFormat)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Format");

                entity.Property(e => e.DrawingIssue)
                    .HasColumnType("datetime")
                    .HasColumnName("Drawing Issue");

                entity.Property(e => e.DrawingLength)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Length");

                entity.Property(e => e.DrawingMark)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Mark");

                entity.Property(e => e.DrawingModified)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Modified");

                entity.Property(e => e.DrawingNested)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Nested");

                entity.Property(e => e.DrawingPrintFlag)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Print Flag");

                entity.Property(e => e.DrawingQuantity).HasColumnName("Drawing Quantity");

                entity.Property(e => e.DrawingRevision)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Revision");

                entity.Property(e => e.DrawingScale)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Scale");

                entity.Property(e => e.DrawingStamp)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Stamp");

                entity.Property(e => e.DrawingType)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Type");

                entity.Property(e => e.DrawingViewerStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Drawing Viewer Status");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.ImportNumber).HasColumnName("Import Number");

                entity.Property(e => e.Key1).HasColumnName("key1");

                entity.Property(e => e.Key2).HasColumnName("key2");

                entity.Property(e => e.Key3).HasColumnName("key3");

                entity.Property(e => e.Label).HasMaxLength(200);

                entity.Property(e => e.LabelId).HasColumnName("LabelID");

                entity.Property(e => e.LatestRevision)
                    .HasMaxLength(50)
                    .HasColumnName("Latest Revision");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Owner).HasMaxLength(100);

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(500)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.Revision).HasMaxLength(50);

                entity.Property(e => e.RevisionSequence).HasColumnName("Revision Sequence");

                entity.Property(e => e.Status).HasColumnName("Status %");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(500)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.VariationId).HasColumnName("VariationID");
            });

            modelBuilder.Entity<VwDocumentStatusSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_status_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DocumentStatusId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentStatusID");

                entity.Property(e => e.IsApproved).HasColumnName("Is Approved");

                entity.Property(e => e.IsCompleted).HasColumnName("Is Completed");

                entity.Property(e => e.IsReviewed).HasColumnName("Is Reviewed");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentTestcertGroupMill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_testcert_group_mill");

                entity.Property(e => e.CastReference).IsRequired();

                entity.Property(e => e.DocumentAdditionalDataId).HasColumnName("DocumentAdditionalDataID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwDocumentTestcertGroupNomill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_testcert_group_nomill");

                entity.Property(e => e.CastReference).IsRequired();

                entity.Property(e => e.DocumentAdditionalDataId).HasColumnName("DocumentAdditionalDataID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwDocumentTestcertInstance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_testcert_instance");

                entity.Property(e => e.CastReference).IsRequired();

                entity.Property(e => e.DocumentAdditionalDataId).HasColumnName("DocumentAdditionalDataID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwDocumentTransmittalReasonSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_transmittal_reason_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DocumentTransmittalReasonId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentTransmittalReasonID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentTransmittalSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_transmittal_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalRevisionId).HasColumnName("DocumentTransmittalRevisionID");

                entity.Property(e => e.DocumentTransmittalTypeId).HasColumnName("DocumentTransmittalTypeID");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.ReceivedAcknowledgement)
                    .HasColumnType("datetime")
                    .HasColumnName("Received Acknowledgement");

                entity.Property(e => e.Recipients).HasMaxLength(4000);

                entity.Property(e => e.RequestAcknowledgement).HasColumnName("Request Acknowledgement");

                entity.Property(e => e.RespondBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Respond By");

                entity.Property(e => e.ResponseOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Response On");

                entity.Property(e => e.SentBy)
                    .HasMaxLength(100)
                    .HasColumnName("Sent By");

                entity.Property(e => e.SentById).HasColumnName("SentByID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentTypeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_document_type_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DefaultFileType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Default File Type");

                entity.Property(e => e.DefaultSize)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Default Size");

                entity.Property(e => e.DefaultStorageLocation)
                    .HasMaxLength(255)
                    .HasColumnName("Default Storage Location");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwDocumentmanagementPendingDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_documentmanagement_pending_documents");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            });

            modelBuilder.Entity<VwEmployeeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_employee_search");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CostCodeDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Description");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.EmployeeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Process).HasMaxLength(4000);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwEnquirySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_enquiry_search");

                entity.Property(e => e.Address1).HasMaxLength(255);

                entity.Property(e => e.Address2).HasMaxLength(255);

                entity.Property(e => e.Address3).HasMaxLength(255);

                entity.Property(e => e.Address4).HasMaxLength(255);

                entity.Property(e => e.AddressType)
                    .HasMaxLength(255)
                    .HasColumnName("Address Type");

                entity.Property(e => e.AdjustedValue).HasColumnName("Adjusted Value");

                entity.Property(e => e.AdjustedWeight).HasColumnName("Adjusted Weight");

                entity.Property(e => e.Architect).HasMaxLength(200);

                entity.Property(e => e.BidDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Bid Date");

                entity.Property(e => e.BidStatus)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Bid Status");

                entity.Property(e => e.BuildingType)
                    .HasMaxLength(200)
                    .HasColumnName("Building Type");

                entity.Property(e => e.Contact).HasMaxLength(102);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.DateWon)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Won");

                entity.Property(e => e.DeclinedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Declined Date");

                entity.Property(e => e.DesignFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Design Finish Date");

                entity.Property(e => e.DesignStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Design Start Date");

                entity.Property(e => e.DesignType)
                    .HasMaxLength(200)
                    .HasColumnName("Design Type");

                entity.Property(e => e.Designer).HasMaxLength(200);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Engineer).HasMaxLength(200);

                entity.Property(e => e.EnquiryAdminBidBond)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Bid Bond");

                entity.Property(e => e.EnquiryAdminCertifiedPayroll)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Certified Payroll");

                entity.Property(e => e.EnquiryAdminLdSPenalties)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin LD's/Penalties");

                entity.Property(e => e.EnquiryAdminOcipCcip)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin OCIP/CCIP");

                entity.Property(e => e.EnquiryAdminOtherTaxes)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Other Taxes");

                entity.Property(e => e.EnquiryAdminPaymentTerms)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Payment Terms");

                entity.Property(e => e.EnquiryAdminPerfBond)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Perf Bond");

                entity.Property(e => e.EnquiryAdminRetentionTerms)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Retention Terms");

                entity.Property(e => e.EnquiryAdminSalesTax)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Sales Tax");

                entity.Property(e => e.EnquiryAdminWarrantyPeriod)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Admin Warranty Period");

                entity.Property(e => e.EnquiryCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Category");

                entity.Property(e => e.EnquiryFabErectorCert)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab Erector Cert");

                entity.Property(e => e.EnquiryFabLocalParticipation)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab Local Participation");

                entity.Property(e => e.EnquiryFabMWSbeParticipation)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab M/W/SBE Participation");

                entity.Property(e => e.EnquiryFabMarketRetention)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab Market Retention");

                entity.Property(e => e.EnquiryFabNdtInsp)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab NDT Insp");

                entity.Property(e => e.EnquiryFabPaintCert)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab Paint Cert");

                entity.Property(e => e.EnquiryFabShopCert)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Fab Shop Cert");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.Property(e => e.EnquiryMaterialBuyAmerican)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Material Buy American");

                entity.Property(e => e.EnquiryMaterialDomesticOnly)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Material Domestic Only");

                entity.Property(e => e.EnquiryMaterialLeed)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Material LEED");

                entity.Property(e => e.EnquiryMaterialUniqueMaterialCriteria)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Material Unique Material Criteria");

                entity.Property(e => e.EnquiryNdaAgreement).HasColumnName("Enquiry NDA Agreement");

                entity.Property(e => e.EnquiryPreQualification).HasColumnName("Enquiry Pre-Qualification");

                entity.Property(e => e.EnquiryReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Enquiry Received");

                entity.Property(e => e.EnquiryScopeBim)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope BIM");

                entity.Property(e => e.EnquiryScopeCustom1)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 1");

                entity.Property(e => e.EnquiryScopeCustom2)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 2");

                entity.Property(e => e.EnquiryScopeCustom3)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 3");

                entity.Property(e => e.EnquiryScopeCustom4)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 4");

                entity.Property(e => e.EnquiryScopeCustom5)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 5");

                entity.Property(e => e.EnquiryScopeCustom6)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 6");

                entity.Property(e => e.EnquiryScopeCustom7)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 7");

                entity.Property(e => e.EnquiryScopeCustom8)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Custom 8");

                entity.Property(e => e.EnquiryScopeDesign)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Design");

                entity.Property(e => e.EnquiryScopeDetail)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Detail");

                entity.Property(e => e.EnquiryScopeErection)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Erection");

                entity.Property(e => e.EnquiryScopeFab)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Fab");

                entity.Property(e => e.EnquiryScopeFreight)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Freight");

                entity.Property(e => e.EnquiryScopePaint)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Paint");

                entity.Property(e => e.EnquiryScopePrep)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Scope Prep");

                entity.Property(e => e.EnquirySize).HasColumnName("Enquiry Size");

                entity.Property(e => e.EnquiryWeight).HasColumnName("Enquiry Weight");

                entity.Property(e => e.EstimateLink)
                    .HasMaxLength(50)
                    .HasColumnName("Estimate Link");

                entity.Property(e => e.Estimator).HasMaxLength(200);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.FinalArea).HasColumnName("Final Area");

                entity.Property(e => e.FinalValue).HasColumnName("Final Value");

                entity.Property(e => e.FinalWeight).HasColumnName("Final Weight");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order Start Date");

                entity.Property(e => e.ParentEnquiry)
                    .HasMaxLength(50)
                    .HasColumnName("Parent Enquiry");

                entity.Property(e => e.PercentReturn).HasColumnName("Percent Return");

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.QuantitySurveyor)
                    .HasMaxLength(200)
                    .HasColumnName("Quantity Surveyor");

                entity.Property(e => e.SalesArea)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Area");

                entity.Property(e => e.Salesman).HasMaxLength(200);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("Status ID");

                entity.Property(e => e.SteelStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Steel Start Date");

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.TenderReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Tender Return Date");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwEstimateExtraGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_extra_getbyid");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.EstimateExtraId).HasColumnName("EstimateExtraID");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.ExtraCalculationTypeId).HasColumnName("ExtraCalculationTypeID");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.RecalcRollType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecalculateSectionRollTypeId).HasColumnName("RecalculateSectionRollTypeID");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.RollType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Roll Type");

                entity.Property(e => e.SectionRollTypeId).HasColumnName("SectionRollTypeID");
            });

            modelBuilder.Entity<VwEstimateFittingGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_fitting_getbyid");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateItemFittingId).HasColumnName("EstimateItemFittingID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FittingTypeId).HasColumnName("FittingTypeID");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.LabourUsage).HasColumnName("Labour Usage");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");
            });

            modelBuilder.Entity<VwEstimateItemListingGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_itemListing_getbyid");

                entity.Property(e => e.AssemblyDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Assembly Description");

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(100)
                    .HasColumnName("Assembly Name");

                entity.Property(e => e.AssemblyQuantity).HasColumnName("Assembly Quantity");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.EstimateItemUsageId).HasColumnName("EstimateItemUsageID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.EstimateUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Estimate Unit");

                entity.Property(e => e.EstimateUnitId).HasColumnName("EstimateUnitID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.ItemListingType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("ItemListing Type");

                entity.Property(e => e.ItemListingTypeId).HasColumnName("ItemListingTypeID");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.PaintFinish).HasMaxLength(255);

                entity.Property(e => e.Phase).HasMaxLength(255);

                entity.Property(e => e.PriceSource)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Price Source");

                entity.Property(e => e.PriceSourceId).HasColumnName("PriceSourceID");

                entity.Property(e => e.QuantityPerAssembly).HasColumnName("Quantity Per Assembly");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.WeightCalc)
                    .HasMaxLength(200)
                    .HasColumnName("Weight Calc");

                entity.Property(e => e.WeightCalcTypeId).HasColumnName("WeightCalcTypeID");

                entity.Property(e => e.WeightPer).HasColumnName("Weight Per");
            });

            modelBuilder.Entity<VwEstimateItemListingLiteGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_itemListing_lite_getbyid");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.EstimateUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Estimate Unit");

                entity.Property(e => e.EstimateUnitId).HasColumnName("EstimateUnitID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.ItemListingType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("ItemListing Type");

                entity.Property(e => e.ItemListingTypeId).HasColumnName("ItemListingTypeID");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.PriceSourceId).HasColumnName("PriceSourceID");
            });

            modelBuilder.Entity<VwEstimateSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultGrade)
                    .HasMaxLength(50)
                    .HasColumnName("Default Grade");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EnquiryLink)
                    .HasMaxLength(4000)
                    .HasColumnName("Enquiry Link");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.FabricationRatePerHour).HasColumnName("Fabrication Rate Per Hour");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FittingsMode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Fittings Mode");

                entity.Property(e => e.FittingsPerWeight).HasColumnName("Fittings Per Weight");

                entity.Property(e => e.HoursPerWeightValue).HasColumnName("Hours Per Weight Value");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.RatePerWeightValue).HasColumnName("Rate Per Weight Value");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.UsageEnabled).HasColumnName("Usage Enabled");
            });

            modelBuilder.Entity<VwEstimateSearchLite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_search_lite");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EstimateId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EstimateID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwEstimateSubsectionGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimate_subsection_getbyid");

                entity.Property(e => e.Boqunit)
                    .HasMaxLength(200)
                    .HasColumnName("BOQUnit");

                entity.Property(e => e.BoqunitId).HasColumnName("BOQUnitID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Notes).HasMaxLength(4000);
            });

            modelBuilder.Entity<VwEstimateassemblySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimateassembly_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EstimateAssemblyId).HasColumnName("EstimateAssemblyID");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwEstimateassemblyitemExtraGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimateassemblyitem_extra_getbyid");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EstimateAssemblyItemExtraId).HasColumnName("EstimateAssemblyItemExtraID");

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.EstimateTypeId).HasColumnName("EstimateTypeID");

                entity.Property(e => e.ExtraCalculationTypeId).HasColumnName("ExtraCalculationTypeID");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.ExtraTypeId).HasColumnName("ExtraTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecalcRollType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecalculateSectionRollTypeId).HasColumnName("RecalculateSectionRollTypeID");

                entity.Property(e => e.Reference).HasMaxLength(200);

                entity.Property(e => e.RollType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Roll Type");

                entity.Property(e => e.SectionRollTypeId).HasColumnName("SectionRollTypeID");
            });

            modelBuilder.Entity<VwEstimateassemblyitemFittingGetbyid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimateassemblyitem_fitting_getbyid");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateAssemblyItemFittingId).HasColumnName("EstimateAssemblyItemFittingID");

                entity.Property(e => e.EstimateAssemblyItemId).HasColumnName("EstimateAssemblyItemID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PriceSource)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Price Source");

                entity.Property(e => e.PriceSourceId).HasColumnName("PriceSourceID");
            });

            modelBuilder.Entity<VwEstimatesubsectionsetSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_estimatesubsectionset_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.EstimateSubsectionSetId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EstimateSubsectionSetID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SetTypeId).HasColumnName("Set Type ID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwExtraSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_extra_search");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemExtraType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Item Extra Type");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecalculateRollType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Roll Type");

                entity.Property(e => e.RollType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwExtragroupSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_extragroup_search");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExtraGroupId).HasColumnName("ExtraGroupID");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwFacilitySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_facility_search");

                entity.Property(e => e.AngleNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Angle Nesting Engine");

                entity.Property(e => e.Calendar).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.DefaultAssemblyLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Default Assembly Location");

                entity.Property(e => e.DefaultCalendarId).HasColumnName("DefaultCalendarID");

                entity.Property(e => e.DefaultLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Default Location");

                entity.Property(e => e.DefaultOffcutLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Default Offcut Location");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DivisionName).HasColumnName("Division Name");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.LinearNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Linear Nesting Engine");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlateNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Plate Nesting Engine");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklyCapacityHours).HasColumnName("Weekly Capacity Hours");

                entity.Property(e => e.WeeklyCapacityWeight).HasColumnName("Weekly Capacity Weight");
            });

            modelBuilder.Entity<VwFittingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fitting_search");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DepthLengthDimension).HasColumnName("Depth Length Dimension");

                entity.Property(e => e.DepthLengthPercent).HasColumnName("Depth Length Percent");

                entity.Property(e => e.DepthThicknessDimension).HasColumnName("Depth Thickness Dimension");

                entity.Property(e => e.DepthThicknessPercent).HasColumnName("Depth Thickness Percent");

                entity.Property(e => e.DepthWidthDimension).HasColumnName("Depth Width Dimension");

                entity.Property(e => e.DepthWidthPercent).HasColumnName("Depth Width Percent");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DimensionalSize).HasColumnName("Dimensional Size");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FixedSizeLength).HasColumnName("Fixed Size Length");

                entity.Property(e => e.FixedSizeThickness).HasColumnName("Fixed Size Thickness");

                entity.Property(e => e.FixedSizeWidth).HasColumnName("Fixed Size Width");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.GradeAsShaft).HasColumnName("Grade As Shaft");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LengthLengthDimension).HasColumnName("Length Length Dimension");

                entity.Property(e => e.LengthLengthPercent).HasColumnName("Length Length Percent");

                entity.Property(e => e.LengthThicknessDimension).HasColumnName("Length Thickness Dimension");

                entity.Property(e => e.LengthThicknessPercent).HasColumnName("Length Thickness Percent");

                entity.Property(e => e.LengthWidthDimension).HasColumnName("Length Width Dimension");

                entity.Property(e => e.LengthWidthPercent).HasColumnName("Length Width Percent");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.SectrionType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ThickFlangeLengthDimension).HasColumnName("Thick Flange Length Dimension");

                entity.Property(e => e.ThickFlangeLengthPercent).HasColumnName("Thick Flange Length Percent");

                entity.Property(e => e.ThickFlangeThickDimension).HasColumnName("Thick Flange Thick Dimension");

                entity.Property(e => e.ThickFlangeThickPercent).HasColumnName("Thick Flange Thick Percent");

                entity.Property(e => e.ThickFlangeWidthDimension).HasColumnName("Thick Flange Width Dimension");

                entity.Property(e => e.ThickFlangeWidthPercent).HasColumnName("Thick Flange Width Percent");

                entity.Property(e => e.ThickWebLengthDimension).HasColumnName("Thick Web Length Dimension");

                entity.Property(e => e.ThickWebLengthPercent).HasColumnName("Thick Web Length Percent");

                entity.Property(e => e.ThickWebThickDimension).HasColumnName("Thick Web Thick Dimension");

                entity.Property(e => e.ThickWebThickPercent).HasColumnName("Thick Web Thick Percent");

                entity.Property(e => e.ThickWebWidthDimension).HasColumnName("Thick Web Width Dimension");

                entity.Property(e => e.ThickWebWidthPercent).HasColumnName("Thick Web Width Percent");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WidthLengthDimension).HasColumnName("Width Length Dimension");

                entity.Property(e => e.WidthLengthPercent).HasColumnName("Width Length Percent");

                entity.Property(e => e.WidthThicknessDimension).HasColumnName("Width Thickness Dimension");

                entity.Property(e => e.WidthThicknessPercent).HasColumnName("Width Thickness Percent");

                entity.Property(e => e.WidthWidthDimension).HasColumnName("Width Width Dimension");

                entity.Property(e => e.WidthWidthPercent).HasColumnName("Width Width Percent");
            });

            modelBuilder.Entity<VwFittinggroupSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fittinggroup_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FittingGroupId).HasColumnName("FittingGroupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwGetProcesses1MarkItemWorkOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetProcesses1_MarkItem_WorkOrders");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");
            });

            modelBuilder.Entity<VwGradeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_grade_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_item");

                entity.Property(e => e.AltName).HasMaxLength(255);

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefaultCostUnitId).HasColumnName("DefaultCostUnitID");

                entity.Property(e => e.DefaultInventoryUnitId).HasColumnName("DefaultInventoryUnitID");

                entity.Property(e => e.DefaultSellUnitId).HasColumnName("DefaultSellUnitID");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.GirderShapeId).HasColumnName("GirderShapeID");

                entity.Property(e => e.GirderTypeId).HasColumnName("GirderTypeID");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.ItemClassId).HasColumnName("ItemClassID");

                entity.Property(e => e.ItemGroupId).HasColumnName("ItemGroupID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemPartNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(3000);

                entity.Property(e => e.ProductionTypeId).HasColumnName("ProductionTypeID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.ScrapCostCodeId).HasColumnName("ScrapCostCodeID");

                entity.Property(e => e.SectionSize).HasMaxLength(100);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.Shape).HasMaxLength(50);

                entity.Property(e => e.Tflange).HasColumnName("TFlange");

                entity.Property(e => e.TrackNumberMask).HasMaxLength(50);

                entity.Property(e => e.TrackingTypeId).HasColumnName("TrackingTypeID");

                entity.Property(e => e.Tweb).HasColumnName("TWeb");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwItemInventoryContractItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemInventory_ContractItem");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.LockItemInventoryTransId).HasColumnName("LockItemInventoryTransID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.YardReference).HasMaxLength(50);
            });

            modelBuilder.Entity<VwItemInventoryTransactionLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemInventoryTransactionLine");

                entity.Property(e => e.CastReference).HasMaxLength(50);

                entity.Property(e => e.Cemark)
                    .HasMaxLength(50)
                    .HasColumnName("CEMark");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryPropertyId).HasColumnName("ItemInventoryPropertyID");

                entity.Property(e => e.ItemInventoryShapeId).HasColumnName("ItemInventoryShapeID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultItemListingId).HasColumnName("NestingResultItemListingID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.PurchaseOrder).HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.Receipt).HasMaxLength(50);

                entity.Property(e => e.ReversalTransActionLineId).HasColumnName("ReversalTransActionLineID");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(50);

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.YardReference).HasMaxLength(50);
            });

            modelBuilder.Entity<VwItemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_item_search");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(255)
                    .HasColumnName("Alternative Name");

                entity.Property(e => e.AlwaysDisplayIndividualInstancesWhenNesting).HasColumnName("Always display individual instances when nesting");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CreateProductionWorkOrder).HasColumnName("Create Production Work Order");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DefaultInventoryUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Default Inventory Unit");

                entity.Property(e => e.DefaultPurchaseUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default Purchase Unit");

                entity.Property(e => e.DefaultPurchasingPrice).HasColumnName("Default Purchasing Price");

                entity.Property(e => e.DefaultSellingPrice).HasColumnName("Default Selling Price");

                entity.Property(e => e.DefaultSellingUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default Selling Unit");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective Date");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiry Date");

                entity.Property(e => e.FlangeThickness).HasColumnName("Flange Thickness");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.ItemClass)
                    .HasMaxLength(200)
                    .HasColumnName("Item Class");

                entity.Property(e => e.ItemClassId).HasColumnName("ItemClassID");

                entity.Property(e => e.ItemGroup)
                    .HasMaxLength(200)
                    .HasColumnName("Item Group");

                entity.Property(e => e.ItemGroupId).HasColumnName("ItemGroupID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(3000);

                entity.Property(e => e.Procurement)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Region).HasMaxLength(100);

                entity.Property(e => e.RollType)
                    .HasMaxLength(50)
                    .HasColumnName("Roll Type");

                entity.Property(e => e.RootRadius).HasColumnName("Root Radius");

                entity.Property(e => e.ScrapCostCodeId).HasColumnName("ScrapCostCodeID");

                entity.Property(e => e.ScrapType)
                    .HasMaxLength(255)
                    .HasColumnName("Scrap Type");

                entity.Property(e => e.ScrapTypeId).HasColumnName("ScrapTypeID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.SurfaceArea).HasColumnName("Surface Area");

                entity.Property(e => e.TrackingType)
                    .HasMaxLength(200)
                    .HasColumnName("Tracking Type");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WasteScrapCostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Waste/Scrap Cost Code");

                entity.Property(e => e.WebThickness).HasColumnName("Web Thickness");

                entity.Property(e => e.WeightCalcTypeId).HasColumnName("WeightCalcTypeID");

                entity.Property(e => e.WeightPer).HasColumnName("Weight Per");
            });

            modelBuilder.Entity<VwItemclassificationSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemclassification_search");

                entity.Property(e => e.AltName).HasMaxLength(100);

                entity.Property(e => e.AvailableToUse).HasColumnName("Available to use");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ItemClassificationId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ItemClassificationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwItemfinishSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemfinish_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ItemFinishId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ItemFinishID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwIteminventoryreceivefromworkorderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_iteminventoryreceivefromworkorder_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Required");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TotalQuantity).HasColumnName("Total Quantity");

                entity.Property(e => e.TotalValue).HasColumnName("Total Value");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwIteminventorytransactionsSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_iteminventorytransactions_search");

                entity.Property(e => e.Allocation).HasMaxLength(4000);

                entity.Property(e => e.CastReference).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.ItemClassificationId).HasColumnName("ItemClassificationID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.PurchaseOrder).HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.Receipt).HasMaxLength(50);

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber).HasMaxLength(50);

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YardReference).HasMaxLength(50);
            });

            modelBuilder.Entity<VwItemlocationSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemlocation_search");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemLocationTypeId).HasColumnName("ItemLocationTypeID");

                entity.Property(e => e.LocationType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Location Type");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VwItempriceunitSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itempriceunit_search");

                entity.Property(e => e.BaseUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Base Unit");

                entity.Property(e => e.BaseUnitMultiple).HasColumnName("Base Unit Multiple");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwItemreservationDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_details");

                entity.Property(e => e.Contract).HasMaxLength(4000);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractPrelimBatchId).HasColumnName("ContractPrelimBatchID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.Phase).HasMaxLength(4000);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwItemreservationStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_status");

                entity.Property(e => e.ContractDescription).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName).HasMaxLength(4000);

                entity.Property(e => e.Customer).HasMaxLength(4000);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.PhaseName).HasMaxLength(4000);

                entity.Property(e => e.Project).HasMaxLength(4000);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            });

            modelBuilder.Entity<VwItemreservationStatusIi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_status_ii");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");
            });

            modelBuilder.Entity<VwItemreservationStatusIitl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_status_iitl");

                entity.Property(e => e.TransactionLineId).HasColumnName("TransactionLineID");
            });

            modelBuilder.Entity<VwItemreservationStatusIsi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_status_isi");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");
            });

            modelBuilder.Entity<VwItemreservationStatusPoi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservation_status_poi");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");
            });

            modelBuilder.Entity<VwItemreservationcontract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemreservationcontract");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ItemReservationId).HasColumnName("ItemReservationID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwItemusageSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemusage_search");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(306);

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwItemusageSearchGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemusage_search_grouped");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.GradeId).HasColumnName("GradeID");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwLanguageSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_language_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Rtllanguage).HasColumnName("RTLLanguage");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");
            });

            modelBuilder.Entity<VwLanguageString>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LanguageString");

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.SystemString)
                    .IsRequired()
                    .HasMaxLength(750);

                entity.Property(e => e.TranslatedString)
                    .IsRequired()
                    .HasMaxLength(750);
            });

            modelBuilder.Entity<VwLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_lookup");

                entity.Property(e => e.LookupId).HasColumnName("LookupID");

                entity.Property(e => e.LookupName)
                    .IsRequired()
                    .HasMaxLength(26)
                    .IsUnicode(false);

                entity.Property(e => e.LookupValue).HasMaxLength(200);
            });

            modelBuilder.Entity<VwNestingresultContractlisting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_nestingresult_contractlisting");

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ListingTypeId).HasColumnName("ListingTypeID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");
            });

            modelBuilder.Entity<VwNestingresultContractlistingArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_nestingresult_contractlisting_archive");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ListingTypeId).HasColumnName("ListingTypeID");

                entity.Property(e => e.NestResultId).HasColumnName("NestResultID");
            });

            modelBuilder.Entity<VwNestingresultallocationContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_nestingresultallocation_contract");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");
            });

            modelBuilder.Entity<VwProcessSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_process_search");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.HourlyRate).HasColumnName("Hourly Rate");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.ProcessType)
                    .HasMaxLength(200)
                    .HasColumnName("Process Type");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductionAssemblySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_assembly_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.LocationFacility)
                    .HasMaxLength(50)
                    .HasColumnName("Location Facility");

                entity.Property(e => e.Marks).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwProductionLottingGetLottedShopmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_lotted_shopmarks");

                entity.Property(e => e.AssemblyMark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.Lot)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase).HasMaxLength(255);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<VwProductionLottingGetLottedSitemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_lotted_sitemarks");

                entity.Property(e => e.AssemblyMark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.Lot)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<VwProductionLottingGetLottedStandalonemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_lotted_standalonemarks");

                entity.Property(e => e.AssemblyMark).HasMaxLength(255);

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.Lot)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<VwProductionLottingGetUnlottedShopmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_Unlotted_shopmarks");

                entity.Property(e => e.AssemblyMark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase).HasMaxLength(255);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwProductionLottingGetUnlottedSitemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_unlotted_sitemarks");

                entity.Property(e => e.AssemblyMark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwProductionLottingGetUnlottedStandalonemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_get_unlotted_standalonemarks");

                entity.Property(e => e.AssemblyMark).HasMaxLength(255);

                entity.Property(e => e.ContractDrawingId).HasColumnName("ContractDrawingID");

                entity.Property(e => e.ContractListingId).HasColumnName("ContractListingID");

                entity.Property(e => e.ContractMarkPhaseId).HasColumnName("ContractMarkPhaseID");

                entity.Property(e => e.CutTypeId).HasColumnName("CutTypeID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExecutionClass)
                    .HasMaxLength(200)
                    .HasColumnName("Execution Class");

                entity.Property(e => e.MainMemberItemId).HasColumnName("MainMemberItemID");

                entity.Property(e => e.MainMemberItemName).HasMaxLength(100);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.OnHoldNotes).HasMaxLength(400);

                entity.Property(e => e.PaintFinish).HasMaxLength(50);

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");
            });

            modelBuilder.Entity<VwProductionLottingMaterialAvailable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_lotting_material_available");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkItemsAvailableFromDate).HasColumnType("datetime");

                entity.Property(e => e.MarkItemsAvailableToDate).HasColumnType("datetime");

                entity.Property(e => e.MarkItemsDueFromDate).HasColumnType("datetime");

                entity.Property(e => e.MarkItemsDueToDate).HasColumnType("datetime");

                entity.Property(e => e.MaterialAvailableFromDate).HasColumnType("datetime");

                entity.Property(e => e.MaterialAvailableToDate).HasColumnType("datetime");

                entity.Property(e => e.MaterialDueFromDate).HasColumnType("datetime");

                entity.Property(e => e.MaterialDueToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwProductionProposedMovementSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_proposed_movement_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItem)
                    .HasMaxLength(100)
                    .HasColumnName("Contract Item");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.FromProcess)
                    .HasMaxLength(100)
                    .HasColumnName("From Process");

                entity.Property(e => e.FromStage)
                    .HasMaxLength(100)
                    .HasColumnName("From Stage");

                entity.Property(e => e.LineNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Line Notes");

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.LocationType)
                    .HasMaxLength(200)
                    .HasColumnName("Location Type");

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationTypeID");

                entity.Property(e => e.Lot).HasMaxLength(100);

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionDeliveryNoteId).HasColumnName("ProductionDeliveryNoteID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Return Date");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.ShippingAgentId).HasColumnName("ShippingAgentID");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.ToProcess)
                    .HasMaxLength(100)
                    .HasColumnName("To Process");

                entity.Property(e => e.ToStage)
                    .HasMaxLength(100)
                    .HasColumnName("To Stage");

                entity.Property(e => e.Trailer).HasMaxLength(200);

                entity.Property(e => e.TrailerId).HasColumnName("TrailerID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.WorkOrderId).HasColumnName("WorkOrderID");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");

                entity.Property(e => e.WorkOrderTypeId).HasColumnName("WorkOrderTypeID");
            });

            modelBuilder.Entity<VwProductionWorkOrderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProductionWorkOrder_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Required");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.QuantityCancelled).HasColumnName("Quantity Cancelled");

                entity.Property(e => e.QuantityComplete).HasColumnName("Quantity Complete");

                entity.Property(e => e.QuantityReceivedInInventory).HasColumnName("Quantity Received In Inventory");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WorkOrderType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");

                entity.Property(e => e.WorkOrderTypeId).HasColumnName("WorkOrderTypeID");
            });

            modelBuilder.Entity<VwProductionWorkorderprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_production_workorderprocess");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");

                entity.Property(e => e.ContractMarkPhaseLotId).HasColumnName("ContractMarkPhaseLotID");

                entity.Property(e => e.ContractMarkPhaseLotItemId).HasColumnName("ContractMarkPhaseLotItemID");

                entity.Property(e => e.DisplayTimeUnitId).HasColumnName("DisplayTimeUnitID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.LotId).HasColumnName("LotID");

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.MarkItemId).HasColumnName("MarkItemID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");
            });

            modelBuilder.Entity<VwProductionprocessSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionprocess_search");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DefaultFixedMinutes).HasColumnName("Default Fixed Minutes");

                entity.Property(e => e.DefaultItemLocationId).HasColumnName("DefaultItemLocationID");

                entity.Property(e => e.DefaultLocationTransferReport)
                    .HasMaxLength(100)
                    .HasColumnName("Default Location Transfer Report");

                entity.Property(e => e.DefaultLocationTransferReportId).HasColumnName("DefaultLocationTransferReportID");

                entity.Property(e => e.DefaultPrinter)
                    .HasMaxLength(50)
                    .HasColumnName("Default Printer");

                entity.Property(e => e.DefaultProcessMinutes).HasColumnName("Default Process Minutes");

                entity.Property(e => e.DefaultWorkStation)
                    .HasMaxLength(100)
                    .HasColumnName("Default WorkStation");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DisplayTimeUnit)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Display Time Unit");

                entity.Property(e => e.DisplayTimeUnitId).HasColumnName("DisplayTimeUnitID");

                entity.Property(e => e.EstimateProcess)
                    .HasMaxLength(50)
                    .HasColumnName("Estimate Process");

                entity.Property(e => e.EstimateProcessId).HasColumnName("EstimateProcessID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemLocationType)
                    .HasMaxLength(200)
                    .HasColumnName("Item Location Type");

                entity.Property(e => e.ItemLocationTypeId).HasColumnName("ItemLocationTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OvertimeHourlyRate).HasColumnName("Overtime Hourly Rate");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionStageId).HasColumnName("ProductionStageID");

                entity.Property(e => e.RequiresProductionDeliveryNote).HasColumnName("Requires Production Delivery Note");

                entity.Property(e => e.RequiresWorkstation).HasColumnName("Requires Workstation");

                entity.Property(e => e.Stage)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StandardHourlyRate).HasColumnName("Standard Hourly Rate");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductionrequiredtaskSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionrequiredtask_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionRequiredTaskId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ProductionRequiredTaskID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductionrequiredtaskextractorSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionrequiredtaskextractor_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductionRequiredTaskExtractorId).HasColumnName("ProductionRequiredTaskExtractorID");

                entity.Property(e => e.RequiredTaskExtractorType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Required Task Extractor Type");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WorkOrderType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");
            });

            modelBuilder.Entity<VwProductionruleSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionrule_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionRuleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ProductionRuleID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductionruleprocessorSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionruleprocessor_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductionRuleProcessorId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ProductionRuleProcessorID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductionstageSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionstage_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionStageId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ProductionStageID");

                entity.Property(e => e.StageNumber).HasColumnName("Stage Number");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwProductiontemplateSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productiontemplate_search");

                entity.Property(e => e.ApprovedBy).HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.AssemblyType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Assembly Type");

                entity.Property(e => e.AssemblyTypeId).HasColumnName("AssemblyTypeID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.MarkItemType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Mark Item Type");

                entity.Property(e => e.MarkItemTypeId).HasColumnName("MarkItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WorkOrderCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Category");

                entity.Property(e => e.WorkOrderCategoryId).HasColumnName("WorkOrderCategoryID");

                entity.Property(e => e.WorkOrderType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");

                entity.Property(e => e.WorkOrderTypeId).HasColumnName("WorkOrderTypeID");
            });

            modelBuilder.Entity<VwProductionworkstationSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_productionworkstation_search");

                entity.Property(e => e.AngleFillerGap).HasColumnName("Angle Filler Gap");

                entity.Property(e => e.AngleNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Angle Nesting Engine");

                entity.Property(e => e.CombineConsecutiveProcesses).HasColumnName("Combine Consecutive Processes");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.DefaultPrinter)
                    .HasMaxLength(100)
                    .HasColumnName("Default Printer");

                entity.Property(e => e.DefaultReport)
                    .HasMaxLength(100)
                    .HasColumnName("Default Report");

                entity.Property(e => e.DefaultReportId).HasColumnName("DefaultReportID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Email Address");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FeedbackPath)
                    .HasMaxLength(255)
                    .HasColumnName("Feedback Path");

                entity.Property(e => e.GripEndZone).HasColumnName("GripEnd Zone");

                entity.Property(e => e.ItemLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.LinearNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Linear Nesting Engine");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NcfilePath)
                    .HasMaxLength(400)
                    .HasColumnName("NCFile Path");

                entity.Property(e => e.OppositeHand).HasColumnName("Opposite Hand");

                entity.Property(e => e.OvertimeHourlyRate).HasColumnName("Overtime Hourly Rate");

                entity.Property(e => e.ParameterFile)
                    .HasMaxLength(100)
                    .HasColumnName("Parameter File");

                entity.Property(e => e.PlateNestingEngine)
                    .HasMaxLength(200)
                    .HasColumnName("Plate Nesting Engine");

                entity.Property(e => e.PostProcessor)
                    .HasMaxLength(100)
                    .HasColumnName("Post Processor");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.RoutingEnabled).HasColumnName("Routing Enabled");

                entity.Property(e => e.SawBladeThickness).HasColumnName("SawBlade Thickness");

                entity.Property(e => e.StandardHourlyRate).HasColumnName("Standard Hourly Rate");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.WorkshopArea)
                    .HasMaxLength(200)
                    .HasColumnName("Workshop Area");

                entity.Property(e => e.WorkshopAreaId).HasColumnName("WorkshopAreaID");

                entity.Property(e => e.WorkstationFeedback).HasColumnName("Workstation Feedback");
            });

            modelBuilder.Entity<VwProjectSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_project_search");

                entity.Property(e => e.Contracts).HasMaxLength(4000);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwPurchaseOrderReceiptSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseOrderReceipt_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderReceiptId).HasColumnName("PurchaseOrderReceiptID");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierDeliveryNote)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Delivery Note");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwPurchaseOrderReturnSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseOrderReturn_search");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderReturnId).HasColumnName("PurchaseOrderReturnID");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");
            });

            modelBuilder.Entity<VwPurchaseinvoiceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_purchaseinvoice_search");

                entity.Property(e => e.Contract).HasMaxLength(4000);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Exported By");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoiceType)
                    .HasMaxLength(200)
                    .HasColumnName("Invoice Type");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.LineValue).HasColumnName("Line Value");

                entity.Property(e => e.LineValueInclTax).HasColumnName("Line Value Incl Tax");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderValue).HasColumnName("Order Value");

                entity.Property(e => e.OrderValueInclTax).HasColumnName("Order Value Incl Tax");

                entity.Property(e => e.PaidBy)
                    .HasMaxLength(100)
                    .HasColumnName("Paid By");

                entity.Property(e => e.PaidOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Paid On");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PurchaseInvoiceId).HasColumnName("PurchaseInvoiceID");

                entity.Property(e => e.PurchaseInvoiceTypeId).HasColumnName("PurchaseInvoiceTypeID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(4000)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Purchase Order Description");

                entity.Property(e => e.Receipt).HasMaxLength(4000);

                entity.Property(e => e.RequisitionName)
                    .HasMaxLength(50)
                    .HasColumnName("Requisition Name");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierDeliveryNote)
                    .HasMaxLength(4000)
                    .HasColumnName("Supplier Delivery Note");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwPurchaseorderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_purchaseorder_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EdiAcknowledgement)
                    .HasMaxLength(50)
                    .HasColumnName("EDI Acknowledgement");

                entity.Property(e => e.EdiAmendment).HasColumnName("EDI Amendment");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Exported By");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.ItemLocationTypeId).HasColumnName("ItemLocationTypeID");

                entity.Property(e => e.LineDeliveryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Line Delivery Address");

                entity.Property(e => e.LineDeliveryAddressId).HasColumnName("LineDeliveryAddressID");

                entity.Property(e => e.LineDeliveryLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Line Delivery Location");

                entity.Property(e => e.LineItemLocationTypeId).HasColumnName("LineItemLocationTypeID");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order Date");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order Quantity");

                entity.Property(e => e.OrderValue).HasColumnName("Order Value");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.PoDeliveryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("PO Delivery Address");

                entity.Property(e => e.PoDeliveryLocation)
                    .HasMaxLength(100)
                    .HasColumnName("PO Delivery Location");

                entity.Property(e => e.PodeliveryAddressId).HasColumnName("PODeliveryAddressID");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity Outstanding");

                entity.Property(e => e.ReceivedQuantity).HasColumnName("Received Quantity");

                entity.Property(e => e.RequisitionNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Requisition Number");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwQsAnalysisSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_qs_analysis_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QsanalysisId).HasColumnName("QSAnalysisID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwQsCategorySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_qs_category_search");

                entity.Property(e => e.CategoryType)
                    .HasMaxLength(200)
                    .HasColumnName("Category Type");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwRegionSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_region_search");

                entity.Property(e => e.Code).HasMaxLength(8);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwRoleSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_role_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RoleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RoleID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwRptIteminventoryInout>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_rpt_iteminventory_inout");

                entity.Property(e => e.CastReference).HasMaxLength(255);

                entity.Property(e => e.Classification).HasMaxLength(4000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.LineItemTransactionTypeId).HasColumnName("LineItemTransactionTypeID");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkId).HasColumnName("MarkID");

                entity.Property(e => e.ProductionWorkOrder).HasMaxLength(100);

                entity.Property(e => e.PurchaseOrder).HasMaxLength(255);

                entity.Property(e => e.Receipt).HasMaxLength(255);

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.YardReference).HasMaxLength(50);
            });

            modelBuilder.Entity<VwSalesinvoiceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salesinvoice_search");

                entity.Property(e => e.ApplicationForPayment)
                    .HasMaxLength(50)
                    .HasColumnName("Application for Payment");

                entity.Property(e => e.ApplicationForPaymentId).HasColumnName("ApplicationForPaymentID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Exported By");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.ItemLocationId).HasColumnName("ItemLocationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderCategory).HasColumnName("Order Category");

                entity.Property(e => e.OrderCategoryName)
                    .HasMaxLength(200)
                    .HasColumnName("Order Category Name");

                entity.Property(e => e.PaymentDueBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Payment Due By");

                entity.Property(e => e.PaymentReceived).HasColumnName("Payment Received");

                entity.Property(e => e.PaymentReceivedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Payment Received By");

                entity.Property(e => e.PaymentReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Payment Received On");

                entity.Property(e => e.SalesInvoiceId).HasColumnName("SalesInvoiceID");

                entity.Property(e => e.SalesInvoiceStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Invoice Status");

                entity.Property(e => e.SalesInvoiceType)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Invoice Type");

                entity.Property(e => e.SalesInvoiceTypeId).HasColumnName("SalesInvoiceTypeID");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SalesOrderName)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order Name");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.StorageLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Storage Location");

                entity.Property(e => e.TotalValueExclTax).HasColumnName("Total Value Excl Tax");

                entity.Property(e => e.TotalValueInclTax).HasColumnName("Total Value Incl Tax");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSalesorderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salesorder_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.DeliveredQuantity).HasColumnName("Delivered Quantity");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EdibatchNo)
                    .HasMaxLength(50)
                    .HasColumnName("EDIBatchNo");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order Date");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order Quantity");

                entity.Property(e => e.OrderValue).HasColumnName("Order Value");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PaymentTermsId).HasColumnName("PaymentTermsID");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SalesOrderStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Status");

                entity.Property(e => e.SalesOrderType)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Type");

                entity.Property(e => e.SalesOrderTypeId).HasColumnName("SalesOrderTypeID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.StorageLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Storage Location");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwSalesorderdeliverySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salesorderdelivery_search");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesInvoiced).HasColumnName("Sales Invoiced");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SalesOrderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order Name");

                entity.Property(e => e.SalesOrderStatus)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Status");

                entity.Property(e => e.SalesOrderType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Type");

                entity.Property(e => e.StorageLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Storage Location");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            });

            modelBuilder.Entity<VwSectiontypeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sectiontype_search");

                entity.Property(e => e.AlwaysDisplayIndividualInstancesWhenNesting).HasColumnName("Always Display Individual Instances When Nesting");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateProductionWorkOrder).HasColumnName("Create Production Work Order");

                entity.Property(e => e.DstvProfile)
                    .HasMaxLength(10)
                    .HasColumnName("DSTV Profile")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.Procurement)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RollType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Roll Type");

                entity.Property(e => e.ScrapType)
                    .HasMaxLength(255)
                    .HasColumnName("Scrap Type");

                entity.Property(e => e.ScrapTypeId).HasColumnName("ScrapTypeID");

                entity.Property(e => e.SectionTypeId).HasColumnName("SectionTypeID");

                entity.Property(e => e.WeightCalculation)
                    .HasMaxLength(200)
                    .HasColumnName("Weight Calculation");
            });

            modelBuilder.Entity<VwSupplierSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_supplier_search");

                entity.Property(e => e.ContactEmail)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Email");

                entity.Property(e => e.ContactFax)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Telephone");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EdiEmail)
                    .HasMaxLength(50)
                    .HasColumnName("EDI EMail");

                entity.Property(e => e.EdiFileFormat)
                    .HasMaxLength(200)
                    .HasColumnName("EDI File Format");

                entity.Property(e => e.EdiReference)
                    .HasMaxLength(4)
                    .HasColumnName("EDI Reference");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("External Reference");

                entity.Property(e => e.IsMill).HasColumnName("Is Mill");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.ShippingAgent).HasColumnName("Shipping Agent");

                entity.Property(e => e.SubjectHeaderSuffix)
                    .HasMaxLength(255)
                    .HasColumnName("Subject Header Suffix");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierType)
                    .HasMaxLength(200)
                    .HasColumnName("Supplier Type");

                entity.Property(e => e.SupplierTypeId).HasColumnName("SupplierTypeID");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwSystemdataportSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_systemdataport_search");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FileExtention).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SystemDataPortId).HasColumnName("SystemDataPortID");

                entity.Property(e => e.SystemObject)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwSystemtaskSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_systemtask_search");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Run Date");

                entity.Property(e => e.LastRunTime)
                    .HasMaxLength(5)
                    .HasColumnName("Last Run Time");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.NextRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Next Run Date");

                entity.Property(e => e.NextRunTime)
                    .HasMaxLength(5)
                    .HasColumnName("Next Run Time");

                entity.Property(e => e.RunFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run From Date");

                entity.Property(e => e.RunToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run To Date");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SystemTaskId).HasColumnName("SystemTaskID");

                entity.Property(e => e.TaskType1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Task Type");
            });

            modelBuilder.Entity<VwTaxcodeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_taxcode_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("External Reference");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TaxCodeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TaxCodeID");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwTransactioninterfaceEmployeetimesheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_employeetimesheet");

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Contract Name");

                entity.Property(e => e.CostCentreName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre Name");

                entity.Property(e => e.CostCodeDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Description");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CostCodeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Name");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DisplayTimeUnit)
                    .HasMaxLength(200)
                    .HasColumnName("Display Time Unit");

                entity.Property(e => e.EmployeeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Employee Code");

                entity.Property(e => e.EmployeeHourlyRate).HasColumnName("Employee Hourly Rate");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Employee Name");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasColumnName("First Name");

                entity.Property(e => e.FixedMinutes).HasColumnName("Fixed Minutes");

                entity.Property(e => e.HourlyRateDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Hourly Rate Description");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(255)
                    .HasColumnName("Item Name");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .HasColumnName("Last Name");

                entity.Property(e => e.MarkItemName)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item Name");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Name");

                entity.Property(e => e.PerUnitMinutes).HasColumnName("Per Unit Minutes");

                entity.Property(e => e.ProcessNumber).HasColumnName("Process Number");

                entity.Property(e => e.ProductionProcess)
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Start Time");

                entity.Property(e => e.StopTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Stop Time");

                entity.Property(e => e.TimesheetEntryId).HasColumnName("TimesheetEntryID");

                entity.Property(e => e.TimesheetId).HasColumnName("TimesheetID");

                entity.Property(e => e.TimesheetNotes).HasColumnName("Timesheet Notes");

                entity.Property(e => e.WorkOrderDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Work Order Description");

                entity.Property(e => e.WorkOrderName)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order Name");

                entity.Property(e => e.WorkOrderNotes).HasColumnName("Work Order Notes");

                entity.Property(e => e.WorkOrderQuantity).HasColumnName("Work Order Quantity");

                entity.Property(e => e.WorkOrderStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Status");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");

                entity.Property(e => e.WorkStationDescription)
                    .HasMaxLength(200)
                    .HasColumnName("WorkStation Description");

                entity.Property(e => e.WorkStationName)
                    .HasMaxLength(100)
                    .HasColumnName("WorkStation Name");

                entity.Property(e => e.WorkstationHourlyRate).HasColumnName("Workstation Hourly Rate");
            });

            modelBuilder.Entity<VwTransactioninterfaceInventorytransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_inventorytransactions");

                entity.Property(e => e.Allocation).HasMaxLength(4000);

                entity.Property(e => e.BaseUnitId).HasColumnName("BaseUnitID");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.Contract).HasMaxLength(4000);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.GradeName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemActualName).HasMaxLength(255);

                entity.Property(e => e.ItemAltName).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryTrackingGuidId)
                    .HasMaxLength(4000)
                    .HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemName).HasMaxLength(255);

                entity.Property(e => e.ItemTransactionTypeId).HasColumnName("ItemTransactionTypeID");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LineId).HasColumnName("Line ID");

                entity.Property(e => e.LineTypeId).HasColumnName("LineTypeID");

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.OutLink).HasColumnName("OUT_Link");

                entity.Property(e => e.Project).HasMaxLength(4000);

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.SalesOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order");

                entity.Property(e => e.Section).HasMaxLength(100);

                entity.Property(e => e.SectionCode).HasMaxLength(50);

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(4000)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.Transaction).HasMaxLength(50);

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Transaction Date");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(100);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YardReference).HasMaxLength(50);
            });

            modelBuilder.Entity<VwTransactioninterfacePurchaseinvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_purchaseinvoice");

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(4000)
                    .HasColumnName("Contract Name");

                entity.Property(e => e.CostCentreName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre Name");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CostCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Name");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer).HasMaxLength(4000);

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueForeign).HasColumnName("Discount Value - Foreign");

                entity.Property(e => e.DiscountValueHome).HasColumnName("Discount Value - Home");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseInvoiceCreditId).HasColumnName("PurchaseInvoiceCreditID");

                entity.Property(e => e.PurchaseInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Invoice Date");

                entity.Property(e => e.PurchaseInvoiceDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice Description");

                entity.Property(e => e.PurchaseInvoiceDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Invoice Due Date");

                entity.Property(e => e.PurchaseInvoiceItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Purchase Invoice Item Description");

                entity.Property(e => e.PurchaseInvoiceItemId).HasColumnName("PurchaseInvoiceItemID");

                entity.Property(e => e.PurchaseInvoiceItemName)
                    .HasMaxLength(1000)
                    .HasColumnName("Purchase Invoice Item Name");

                entity.Property(e => e.PurchaseInvoiceItemNotes).HasColumnName("Purchase Invoice Item Notes");

                entity.Property(e => e.PurchaseInvoiceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice Name");

                entity.Property(e => e.PurchaseInvoiceNotes).HasColumnName("Purchase Invoice Notes");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(4000)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Purchase Order Description");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierBillingAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Billing Address Contact");

                entity.Property(e => e.SupplierBillingAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Country");

                entity.Property(e => e.SupplierBillingAddressEMail)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Billing Address E-Mail");

                entity.Property(e => e.SupplierBillingAddressFax)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Fax");

                entity.Property(e => e.SupplierBillingAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 1");

                entity.Property(e => e.SupplierBillingAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 2");

                entity.Property(e => e.SupplierBillingAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 3");

                entity.Property(e => e.SupplierBillingAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 4");

                entity.Property(e => e.SupplierBillingAddressMobile)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Mobile");

                entity.Property(e => e.SupplierBillingAddressName)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Name");

                entity.Property(e => e.SupplierBillingAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Post Code");

                entity.Property(e => e.SupplierBillingAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Telephone");

                entity.Property(e => e.SupplierExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier External Reference");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Part Number");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.SupplierType)
                    .HasMaxLength(200)
                    .HasColumnName("Supplier Type");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxCodeExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code External Reference");

                entity.Property(e => e.TaxCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code Name");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueForeign).HasColumnName("Tax Value - Foreign");

                entity.Property(e => e.TaxValueHome).HasColumnName("Tax Value - Home");

                entity.Property(e => e.UnitPriceForeign).HasColumnName("Unit Price - Foreign");

                entity.Property(e => e.UnitPriceHome).HasColumnName("Unit Price - Home");

                entity.Property(e => e.ValueAfterDiscountForeign).HasColumnName("Value After Discount - Foreign");

                entity.Property(e => e.ValueAfterDiscountHome).HasColumnName("Value After Discount - Home");

                entity.Property(e => e.ValueBeforeDiscountForeign).HasColumnName("Value Before Discount - Foreign");

                entity.Property(e => e.ValueBeforeDiscountHome).HasColumnName("Value Before Discount - Home");
            });

            modelBuilder.Entity<VwTransactioninterfacePurchaseorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_purchaseorder");

                entity.Property(e => e.BaseUnitId).HasColumnName("BaseUnitID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription).HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName).HasColumnName("Contract Name");

                entity.Property(e => e.CostCentreName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre Name");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CostCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Name");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Delivery Address Contact");

                entity.Property(e => e.DeliveryAddressEMail)
                    .HasMaxLength(100)
                    .HasColumnName("Delivery Address E-Mail");

                entity.Property(e => e.DeliveryAddressFax)
                    .HasMaxLength(50)
                    .HasColumnName("Delivery Address Fax");

                entity.Property(e => e.DeliveryAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Delivery Address Line 1");

                entity.Property(e => e.DeliveryAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Delivery Address Line 2");

                entity.Property(e => e.DeliveryAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Delivery Address Line 3");

                entity.Property(e => e.DeliveryAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Delivery Address Line 4");

                entity.Property(e => e.DeliveryAddressMobile)
                    .HasMaxLength(50)
                    .HasColumnName("Delivery Address Mobile");

                entity.Property(e => e.DeliveryAddressName)
                    .HasMaxLength(255)
                    .HasColumnName("Delivery Address Name");

                entity.Property(e => e.DeliveryAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Delivery Address Post Code");

                entity.Property(e => e.DeliveryAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Delivery Address Telephone");

                entity.Property(e => e.DeliveryLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Delivery Location");

                entity.Property(e => e.DeliveryYardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Delivery Yard Reference");

                entity.Property(e => e.DirectIssue).HasColumnName("Direct Issue");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueForeign).HasColumnName("Discount Value - Foreign");

                entity.Property(e => e.DiscountValueHome).HasColumnName("Discount Value - Home");

                entity.Property(e => e.EdibarNos)
                    .HasMaxLength(4000)
                    .HasColumnName("EDIBarNos");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.Facility)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryTrackingGuidId)
                    .HasMaxLength(4000)
                    .HasColumnName("ItemInventoryTrackingGuidID");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LineNumber).HasColumnName("Line Number");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.OrderedQuantity).HasColumnName("Ordered Quantity");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProjectName).HasColumnName("Project Name");

                entity.Property(e => e.PurchaseOrderCreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase Order Created By");

                entity.Property(e => e.PurchaseOrderCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Created On");

                entity.Property(e => e.PurchaseOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Date");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase Order Description");

                entity.Property(e => e.PurchaseOrderDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Due Date");

                entity.Property(e => e.PurchaseOrderItemAlternateName)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Item Alternate Name");

                entity.Property(e => e.PurchaseOrderItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Purchase Order Item Description");

                entity.Property(e => e.PurchaseOrderItemDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Item Due Date");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.PurchaseOrderItemName)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Item Name");

                entity.Property(e => e.PurchaseOrderItemNotes).HasColumnName("Purchase Order Item Notes");

                entity.Property(e => e.PurchaseOrderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order Name");

                entity.Property(e => e.PurchaseOrderNotes).HasColumnName("Purchase Order Notes");

                entity.Property(e => e.PurchaseOrderUpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase Order Updated By");

                entity.Property(e => e.PurchaseOrderUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Updated On");

                entity.Property(e => e.ReceivedInFull).HasColumnName("Received in Full");

                entity.Property(e => e.ReceivedQuantity).HasColumnName("Received Quantity");

                entity.Property(e => e.RollDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Roll Date");

                entity.Property(e => e.RollReference)
                    .HasMaxLength(50)
                    .HasColumnName("Roll Reference");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierBillingAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Billing Address Contact");

                entity.Property(e => e.SupplierBillingAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Country");

                entity.Property(e => e.SupplierBillingAddressEMail)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Billing Address E-Mail");

                entity.Property(e => e.SupplierBillingAddressFax)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Fax");

                entity.Property(e => e.SupplierBillingAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 1");

                entity.Property(e => e.SupplierBillingAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 2");

                entity.Property(e => e.SupplierBillingAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 3");

                entity.Property(e => e.SupplierBillingAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Line 4");

                entity.Property(e => e.SupplierBillingAddressMobile)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Mobile");

                entity.Property(e => e.SupplierBillingAddressName)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Billing Address Name");

                entity.Property(e => e.SupplierBillingAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Post Code");

                entity.Property(e => e.SupplierBillingAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Billing Address Telephone");

                entity.Property(e => e.SupplierExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier External Reference");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Part Number");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.SupplierType)
                    .HasMaxLength(200)
                    .HasColumnName("Supplier Type");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxCodeExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code External Reference");

                entity.Property(e => e.TaxCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code Name");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueForeign).HasColumnName("Tax Value - Foreign");

                entity.Property(e => e.TaxValueHome).HasColumnName("Tax Value - Home");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UnitPriceForeign).HasColumnName("Unit Price - Foreign");

                entity.Property(e => e.UnitPriceHome).HasColumnName("Unit Price - Home");

                entity.Property(e => e.ValueAfterDiscountForeign).HasColumnName("Value After Discount - Foreign");

                entity.Property(e => e.ValueAfterDiscountHome).HasColumnName("Value After Discount - Home");

                entity.Property(e => e.ValueBeforeDiscountForeign).HasColumnName("Value Before Discount - Foreign");

                entity.Property(e => e.ValueBeforeDiscountHome).HasColumnName("Value Before Discount - Home");
            });

            modelBuilder.Entity<VwTransactioninterfaceSalesinvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_salesinvoice");

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Name");

                entity.Property(e => e.CostCentreName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre Name");

                entity.Property(e => e.CostCodeId).HasColumnName("CostCodeID");

                entity.Property(e => e.CostCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code Name");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerBillingAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing Address Contact");

                entity.Property(e => e.CustomerBillingAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Country");

                entity.Property(e => e.CustomerBillingAddressEMail)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing Address E-Mail");

                entity.Property(e => e.CustomerBillingAddressFax)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Fax");

                entity.Property(e => e.CustomerBillingAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 1");

                entity.Property(e => e.CustomerBillingAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 2");

                entity.Property(e => e.CustomerBillingAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 3");

                entity.Property(e => e.CustomerBillingAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 4");

                entity.Property(e => e.CustomerBillingAddressMobile)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Mobile");

                entity.Property(e => e.CustomerBillingAddressName)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Name");

                entity.Property(e => e.CustomerBillingAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Post Code");

                entity.Property(e => e.CustomerBillingAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Telephone");

                entity.Property(e => e.CustomerDeliveryAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Delivery Address Contact");

                entity.Property(e => e.CustomerDeliveryAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Country");

                entity.Property(e => e.CustomerDeliveryAddressEMail)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Delivery Address E-Mail");

                entity.Property(e => e.CustomerDeliveryAddressFax)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Address Fax");

                entity.Property(e => e.CustomerDeliveryAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 1");

                entity.Property(e => e.CustomerDeliveryAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 2");

                entity.Property(e => e.CustomerDeliveryAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 3");

                entity.Property(e => e.CustomerDeliveryAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 4");

                entity.Property(e => e.CustomerDeliveryAddressMobile)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Address Mobile");

                entity.Property(e => e.CustomerDeliveryAddressName)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Name");

                entity.Property(e => e.CustomerDeliveryAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Address Post Code");

                entity.Property(e => e.CustomerDeliveryAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Address Telephone");

                entity.Property(e => e.CustomerExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("Customer External Reference");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Part Number");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .HasColumnName("Customer Type");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueForeign).HasColumnName("Discount Value - Foreign");

                entity.Property(e => e.DiscountValueHome).HasColumnName("Discount Value - Home");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(255)
                    .HasColumnName("Item Name");

                entity.Property(e => e.LineTaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Line Tax Code Description");

                entity.Property(e => e.LineTaxCodeExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("Line Tax Code External Reference");

                entity.Property(e => e.LineTaxCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Line Tax Code Name");

                entity.Property(e => e.LineTaxPercentage).HasColumnName("Line Tax Percentage");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PaymentDueBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Payment Due By");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SalesInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sales Invoice Date");

                entity.Property(e => e.SalesInvoiceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Invoice Description");

                entity.Property(e => e.SalesInvoiceItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Sales Invoice Item Description");

                entity.Property(e => e.SalesInvoiceItemId).HasColumnName("SalesInvoiceItemID");

                entity.Property(e => e.SalesInvoiceItemName)
                    .HasMaxLength(358)
                    .HasColumnName("Sales Invoice Item Name");

                entity.Property(e => e.SalesInvoiceItemNotes).HasColumnName("Sales Invoice Item Notes");

                entity.Property(e => e.SalesInvoiceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Invoice Name");

                entity.Property(e => e.SalesInvoiceNotes).HasColumnName("Sales Invoice Notes");

                entity.Property(e => e.SalesInvoiceType)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Invoice Type");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxCodeExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code External Reference");

                entity.Property(e => e.TaxCodeName)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code Name");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueForeign).HasColumnName("Tax Value - Foreign");

                entity.Property(e => e.TaxValueHome).HasColumnName("Tax Value - Home");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UnitPriceForeign).HasColumnName("Unit Price - Foreign");

                entity.Property(e => e.UnitPriceHome).HasColumnName("Unit Price - Home");

                entity.Property(e => e.ValueAfterDiscountForeign).HasColumnName("Value After Discount - Foreign");

                entity.Property(e => e.ValueAfterDiscountHome).HasColumnName("Value After Discount - Home");

                entity.Property(e => e.ValueBeforeDiscountForeign).HasColumnName("Value Before Discount - Foreign");

                entity.Property(e => e.ValueBeforeDiscountHome).HasColumnName("Value Before Discount - Home");
            });

            modelBuilder.Entity<VwTransactioninterfaceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterface_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RunAsX86Process).HasColumnName("Run as x86 process");

                entity.Property(e => e.TransactionInterfaceId).HasColumnName("TransactionInterfaceID");

                entity.Property(e => e.TransactionInterfaceType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Transaction Interface Type");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwTransactioninterfacelogSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_transactioninterfacelog_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasMaxLength(30)
                    .HasColumnName("Created On");

                entity.Property(e => e.InterfaceDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Interface Description");

                entity.Property(e => e.InterfaceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Interface Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.TransactionInterfaceLogId).HasColumnName("TransactionInterfaceLogID");

                entity.Property(e => e.TransactionInterfaceType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Transaction Interface Type");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasMaxLength(30)
                    .HasColumnName("Updated On");
            });

            modelBuilder.Entity<VwUserSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_user_search");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Expires).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(50);

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasColumnName("First Name");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Job Title");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .HasColumnName("Last Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(2000);

                entity.Property(e => e.Role).HasMaxLength(4000);

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<VwUserreportAllocatestock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_allocatestock");

                entity.Property(e => e.AllocateStockId).HasColumnName("AllocateStockID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.InventoryAllocation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inventory Allocation");

                entity.Property(e => e.InventoryAllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inventory Allocation Date");

                entity.Property(e => e.InventoryAllocationDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Inventory Allocation Description");

                entity.Property(e => e.InventoryAllocationNotes).HasColumnName("Inventory Allocation Notes");

                entity.Property(e => e.Phase).HasMaxLength(100);
            });

            modelBuilder.Entity<VwUserreportAllocatestockitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_allocatestockitems");

                entity.Property(e => e.AllocateStockId).HasColumnName("AllocateStockID");

                entity.Property(e => e.AllocateStockItemId).HasColumnName("AllocateStockItemID");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Transaction Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportChangeclassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_changeclassification");

                entity.Property(e => e.ChangeClassificationId).HasColumnName("ChangeClassificationID");

                entity.Property(e => e.ClassificationChange)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Classification Change");

                entity.Property(e => e.ClassificationChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Classification Change Date");

                entity.Property(e => e.ClassificationChangeDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Classification Change Description");

                entity.Property(e => e.ClassificationChangeNotes).HasColumnName("Classification Change Notes");

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");
            });

            modelBuilder.Entity<VwUserreportChangeclassificationitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_changeclassificationitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ChangeClassificationId).HasColumnName("ChangeClassificationID");

                entity.Property(e => e.ChangeClassificationItemId).HasColumnName("ChangeClassificationItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contact");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");
            });

            modelBuilder.Entity<VwUserreportContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contract");

                entity.Property(e => e.AddFreeOffcutValueToContract).HasColumnName("Add Free Offcut Value to Contract");

                entity.Property(e => e.AddScrapValueToContract).HasColumnName("Add Scrap Value to Contract");

                entity.Property(e => e.AllocateOffcutToContract).HasColumnName("Allocate Offcut to Contract");

                entity.Property(e => e.CadDataPath)
                    .HasMaxLength(500)
                    .HasColumnName("CAD Data Path");

                entity.Property(e => e.CadUseDocumentManagement).HasColumnName("CAD - Use Document Management");

                entity.Property(e => e.CamDataPath)
                    .HasMaxLength(500)
                    .HasColumnName("CAM Data Path");

                entity.Property(e => e.CamUseDocumentManagement).HasColumnName("CAM - Use Document Management");

                entity.Property(e => e.CompletionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completion Date");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contract Address Country");

                entity.Property(e => e.ContractAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contract Address Line 1");

                entity.Property(e => e.ContractAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contract Address Line 2");

                entity.Property(e => e.ContractAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contract Address Line 3");

                entity.Property(e => e.ContractAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contract Address Line 4");

                entity.Property(e => e.ContractAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Address Post Code");

                entity.Property(e => e.ContractContact)
                    .HasMaxLength(102)
                    .HasColumnName("Contract Contact");

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Contract E-Mail Address");

                entity.Property(e => e.ContractFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Fax Number");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Mobile Phone Number");

                entity.Property(e => e.ContractNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contract Notes");

                entity.Property(e => e.ContractStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Contract Status");

                entity.Property(e => e.ContractTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Telephone");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(200)
                    .HasColumnName("Contract Type");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.DefaultGrade)
                    .HasMaxLength(50)
                    .HasColumnName("Default Grade");

                entity.Property(e => e.Enquiry).HasMaxLength(50);

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.LotLoadSource).HasColumnName("Lot/Load Source");

                entity.Property(e => e.PaintFinish)
                    .HasMaxLength(50)
                    .HasColumnName("Paint Finish");

                entity.Property(e => e.PhaseZoneSource).HasColumnName("Phase/Zone Source");

                entity.Property(e => e.ProductionDispatchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Dispatch Date");

                entity.Property(e => e.ProductionStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProductionTrackingIndividualMarkItemTracking).HasColumnName("Production Tracking-Individual Mark Item Tracking");

                entity.Property(e => e.ProductionTrackingIndividualMarkTracking).HasColumnName("Production Tracking-Individual Mark Tracking");

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.ProjectDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Project Description");

                entity.Property(e => e.ShowInOrdering).HasColumnName("Show In Ordering");

                entity.Property(e => e.SiteAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Site Address Country");

                entity.Property(e => e.SiteAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Site Address Line 1");

                entity.Property(e => e.SiteAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Site Address Line 2");

                entity.Property(e => e.SiteAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Site Address Line 3");

                entity.Property(e => e.SiteAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Site Address Line 4");

                entity.Property(e => e.SiteAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Site Address Post Code");

                entity.Property(e => e.SiteContact)
                    .HasMaxLength(102)
                    .HasColumnName("Site Contact");

                entity.Property(e => e.SiteDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Site Delivery Date");

                entity.Property(e => e.SiteEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Site E-Mail Address");

                entity.Property(e => e.SiteFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Site Fax Number");

                entity.Property(e => e.SiteMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Site Mobile Phone Number");

                entity.Property(e => e.SiteTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Site Telephone");

                entity.Property(e => e.StruCadAttributeMappingDescription)
                    .HasMaxLength(50)
                    .HasColumnName("StruCAD Attribute Mapping - Description");

                entity.Property(e => e.StruCadAttributeMappingLotLoad)
                    .HasMaxLength(50)
                    .HasColumnName("StruCAD Attribute Mapping - Lot-Load");

                entity.Property(e => e.StruCadAttributeMappingPaintFinish)
                    .HasMaxLength(50)
                    .HasColumnName("StruCAD Attribute Mapping - Paint Finish");

                entity.Property(e => e.StruCadAttributeMappingPhaseZone)
                    .HasMaxLength(50)
                    .HasColumnName("StruCAD Attribute Mapping - Phase-Zone");

                entity.Property(e => e.StruCadAttributeMappingPrelimMark)
                    .HasMaxLength(50)
                    .HasColumnName("StruCAD Attribute Mapping - Prelim Mark");

                entity.Property(e => e.StruWalkerFile)
                    .HasMaxLength(500)
                    .HasColumnName("StruWalker File");

                entity.Property(e => e.StruWalkerUseDocumentManagement).HasColumnName("StruWalker Use Document Management");

                entity.Property(e => e.TotalContractArea).HasColumnName("Total Contract Area");

                entity.Property(e => e.TotalContractWeight).HasColumnName("Total Contract Weight");
            });

            modelBuilder.Entity<VwUserreportContractbatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractbatch");

                entity.Property(e => e.Batch)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BatchDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Batch Description");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractBatchId).HasColumnName("ContractBatchID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");
            });

            modelBuilder.Entity<VwUserreportContractmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractmark");

                entity.Property(e => e.AssemblyMark).HasColumnName("Assembly Mark");

                entity.Property(e => e.CadFile)
                    .HasMaxLength(500)
                    .HasColumnName("CAD File");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.Drawing)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MainMemberItemName)
                    .HasMaxLength(100)
                    .HasColumnName("Main Member Item Name");

                entity.Property(e => e.MainMemberLength).HasColumnName("Main Member Length");

                entity.Property(e => e.MainMemberWidth).HasColumnName("Main Member Width");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkArea).HasColumnName("Mark Area");

                entity.Property(e => e.MarkDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Description");

                entity.Property(e => e.MarkNotes).HasColumnName("Mark Notes");

                entity.Property(e => e.MarkQuantity).HasColumnName("Mark Quantity");

                entity.Property(e => e.MarkRevisedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Revised By");

                entity.Property(e => e.MarkUnitArea).HasColumnName("Mark Unit Area");

                entity.Property(e => e.MarkUnitWeight).HasColumnName("Mark Unit Weight");

                entity.Property(e => e.MarkWeight).HasColumnName("Mark Weight");

                entity.Property(e => e.OnHold).HasColumnName("On Hold");

                entity.Property(e => e.OnHoldNotes)
                    .HasMaxLength(400)
                    .HasColumnName("On Hold Notes");

                entity.Property(e => e.PaintFinish)
                    .HasMaxLength(50)
                    .HasColumnName("Paint Finish");

                entity.Property(e => e.ParentMark)
                    .HasMaxLength(100)
                    .HasColumnName("Parent Mark");

                entity.Property(e => e.SiteAssembled).HasColumnName("Site Assembled");
            });

            modelBuilder.Entity<VwUserreportContractmarkitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractmarkitem");

                entity.Property(e => e.BackFlush).HasColumnName("Back Flush");

                entity.Property(e => e.BottomFlangeEndAngle).HasColumnName("Bottom Flange End Angle");

                entity.Property(e => e.BottomFlangeStartAngle).HasColumnName("Bottom Flange Start Angle");

                entity.Property(e => e.CamFile)
                    .HasMaxLength(500)
                    .HasColumnName("Cam File");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CreateProductionWorkOrder).HasColumnName("Create Production Work Order");

                entity.Property(e => e.CutType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Cut Type");

                entity.Property(e => e.DetailItemStatus)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("Detail Item Status");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.ExactDimensions).HasColumnName("Exact Dimensions");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IgnoreForProcurement).HasColumnName("Ignore For Procurement");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Lot)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LottingStatus)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Lotting Status");

                entity.Property(e => e.MainMember).HasColumnName("Main Member");

                entity.Property(e => e.MarkItem)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.MarkItemNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Mark Item Notes");

                entity.Property(e => e.MarkItemQuantity).HasColumnName("Mark Item Quantity");

                entity.Property(e => e.MarkItemRevisedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item Revised By");

                entity.Property(e => e.MarkItemType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Mark Item Type");

                entity.Property(e => e.MarkItemUnitArea).HasColumnName("Mark Item Unit Area");

                entity.Property(e => e.MarkItemUnitWeight).HasColumnName("Mark Item Unit Weight");

                entity.Property(e => e.NotNeededForAssembly).HasColumnName("Not Needed For Assembly");

                entity.Property(e => e.OnHold).HasColumnName("On Hold");

                entity.Property(e => e.OnHoldNotes)
                    .HasMaxLength(400)
                    .HasColumnName("On Hold Notes");

                entity.Property(e => e.PaintFinish)
                    .HasMaxLength(100)
                    .HasColumnName("Paint Finish");

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PrelimMark)
                    .HasMaxLength(100)
                    .HasColumnName("Prelim Mark");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity Allocated");

                entity.Property(e => e.QuantityOrdered).HasColumnName("Quantity Ordered");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity Outstanding");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReleasedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Released By");

                entity.Property(e => e.ReleasedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Released On");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TopFlangeEndAngle).HasColumnName("Top Flange End Angle");

                entity.Property(e => e.TopFlangeStartAngle).HasColumnName("Top Flange Start Angle");

                entity.Property(e => e.WebEndAngle).HasColumnName("Web End Angle");

                entity.Property(e => e.WebStartAngle).HasColumnName("Web Start Angle");
            });

            modelBuilder.Entity<VwUserreportContractmilestone>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractmilestone");

                entity.Property(e => e.ActualInvoiceValue).HasColumnName("Actual Invoice Value");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.ContractMilestone)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Milestone");

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.ExpectedInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expected Invoice Date");

                entity.Property(e => e.ExpectedInvoiceValue).HasColumnName("Expected Invoice Value");
            });

            modelBuilder.Entity<VwUserreportContractprelimmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractprelimmark");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractPrelimMarkSequenceId).HasColumnName("ContractPrelimMarkSequenceID");

                entity.Property(e => e.EdiBatchNumber)
                    .HasMaxLength(50)
                    .HasColumnName("EDI Batch Number");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IgnoreForProcurement).HasColumnName("Ignore For Procurement");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.List)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ListRequiredDate)
                    .HasColumnType("datetime")
                    .HasColumnName("List Required Date");

                entity.Property(e => e.ListingName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Listing Name");

                entity.Property(e => e.MarkQuantity).HasColumnName("Mark Quantity");

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PrelimItemStatus)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Prelim Item Status");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity Allocated");

                entity.Property(e => e.QuantityOrdered).HasColumnName("Quantity Ordered");

                entity.Property(e => e.ReleasedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Released By");

                entity.Property(e => e.ReleasedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Released On");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");
            });

            modelBuilder.Entity<VwUserreportContractrevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_contractrevision");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.ContractRevisionId).HasColumnName("ContractRevisionID");

                entity.Property(e => e.Drawing).HasMaxLength(100);

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.NewValue)
                    .HasMaxLength(100)
                    .HasColumnName("New Value");

                entity.Property(e => e.OldValue)
                    .HasMaxLength(100)
                    .HasColumnName("Old Value");

                entity.Property(e => e.ParentMark)
                    .HasMaxLength(100)
                    .HasColumnName("Parent Mark");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionIndex).HasColumnName("Revision Index");

                entity.Property(e => e.RevisionNotes)
                    .HasMaxLength(255)
                    .HasColumnName("Revision Notes");
            });

            modelBuilder.Entity<VwUserreportCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_customer");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Contact");

                entity.Property(e => e.CustomerEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Customer E-Mail Address");

                entity.Property(e => e.CustomerFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Fax Number");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Mobile Phone Number");

                entity.Property(e => e.CustomerTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Telephone");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .HasColumnName("Customer Type");

                entity.Property(e => e.EdiEMailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EDI E-Mail Address");

                entity.Property(e => e.EdiFileFormat)
                    .HasMaxLength(200)
                    .HasColumnName("EDI File Format");

                entity.Property(e => e.EdiReference)
                    .HasMaxLength(4)
                    .HasColumnName("EDI Reference");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("External Reference");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");
            });

            modelBuilder.Entity<VwUserreportCustomerContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_customer_contact");

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");
            });

            modelBuilder.Entity<VwUserreportCustomeraddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_customeraddress");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.CustomerAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Address Contact");

                entity.Property(e => e.CustomerAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Address Country");

                entity.Property(e => e.CustomerAddressEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Address E-Mail Address");

                entity.Property(e => e.CustomerAddressFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Address Fax Number");

                entity.Property(e => e.CustomerAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Address Line 1");

                entity.Property(e => e.CustomerAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Address Line 2");

                entity.Property(e => e.CustomerAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Address Line 3");

                entity.Property(e => e.CustomerAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Address Line 4");

                entity.Property(e => e.CustomerAddressMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Address Mobile Phone Number");

                entity.Property(e => e.CustomerAddressName)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Address Name");

                entity.Property(e => e.CustomerAddressPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Address Postcode");

                entity.Property(e => e.CustomerAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Address Telephone");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            });

            modelBuilder.Entity<VwUserreportDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(50)
                    .HasColumnName("Alternative Name")
                    .IsFixedLength();

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Completed).HasColumnType("datetime");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DependantFileName)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File Name");

                entity.Property(e => e.Document)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Document Category");

                entity.Property(e => e.DocumentDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Document Description");

                entity.Property(e => e.DocumentDiscipline)
                    .HasMaxLength(200)
                    .HasColumnName("Document Discipline");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentKind)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DocumentRevisionCode)
                    .HasMaxLength(50)
                    .HasColumnName("Document Revision Code");

                entity.Property(e => e.DocumentRevisionNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Document Revision Notes");

                entity.Property(e => e.DocumentSize)
                    .HasMaxLength(200)
                    .HasColumnName("Document Size");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.FileCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Created On");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.FileSize).HasColumnName("File Size");

                entity.Property(e => e.FileUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Updated On");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Required By");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("Revision Details");
            });

            modelBuilder.Entity<VwUserreportDocumentRfi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document_rfi");

                entity.Property(e => e.AcknowledgementReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Acknowledgement Received On");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.RequireResponseBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Require Response By");

                entity.Property(e => e.ResponseInstructionMessage)
                    .HasMaxLength(200)
                    .HasColumnName("Response Instruction Message");

                entity.Property(e => e.ResponseReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Received On");

                entity.Property(e => e.Rfi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("RFI");

                entity.Property(e => e.RfiSent).HasColumnName("RFI Sent");

                entity.Property(e => e.SentVia)
                    .HasMaxLength(200)
                    .HasColumnName("Sent Via");

                entity.Property(e => e.Subject).HasMaxLength(255);
            });

            modelBuilder.Entity<VwUserreportDocumentRfiDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document_rfi_document");

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Completed).HasColumnType("datetime");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DependantFileName)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File Name");

                entity.Property(e => e.Document).HasMaxLength(1000);

                entity.Property(e => e.DocumentCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Document Category");

                entity.Property(e => e.DocumentDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Document Description");

                entity.Property(e => e.DocumentDiscipline)
                    .HasMaxLength(200)
                    .HasColumnName("Document Discipline");

                entity.Property(e => e.DocumentKind)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DocumentRevisionCode)
                    .HasMaxLength(50)
                    .HasColumnName("Document Revision Code");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.DocumentRevisionNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Document Revision Notes");

                entity.Property(e => e.DocumentSize)
                    .HasMaxLength(200)
                    .HasColumnName("Document Size");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.FileCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Created On");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.FileSize).HasColumnName("File Size");

                entity.Property(e => e.FileUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Updated On");

                entity.Property(e => e.OccurenceId).HasColumnName("OccurenceID");

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Required By");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(500)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("Revision Details");
            });

            modelBuilder.Entity<VwUserreportDocumentRfiRecipient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document_rfi_recipient");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentRfi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Document RFI");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalRecipientId).HasColumnName("DocumentTransmittalRecipientID");

                entity.Property(e => e.TeamLeader).HasColumnName("Team Leader");
            });

            modelBuilder.Entity<VwUserreportDocumentRfiResponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document_rfi_responses");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentRfi)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Document RFI");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");

                entity.Property(e => e.DocumentTransmittalResponseId).HasColumnName("DocumentTransmittalResponseID");

                entity.Property(e => e.Response).IsRequired();

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Date");
            });

            modelBuilder.Entity<VwUserreportDocumentTransmittalResponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_document_transmittal_responses");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentTransmittal)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Document Transmittal");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");

                entity.Property(e => e.DocumentTransmittalResponseId).HasColumnName("DocumentTransmittalResponseID");

                entity.Property(e => e.Response).IsRequired();

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Date");
            });

            modelBuilder.Entity<VwUserreportDocumentdistributionlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documentdistributionlist");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DistributionList)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Distribution List");

                entity.Property(e => e.DistributionListDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Distribution List Description");

                entity.Property(e => e.DocumentDistributionListId).HasColumnName("DocumentDistributionListID");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.TeamLeader).HasColumnName("Team Leader");
            });

            modelBuilder.Entity<VwUserreportDocumentpackage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documentpackage");

                entity.Property(e => e.DocumentPackage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Document Package");

                entity.Property(e => e.DocumentPackageDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Document Package Description");

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.Reason).HasMaxLength(50);
            });

            modelBuilder.Entity<VwUserreportDocumentpackagedocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documentpackagedocument");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(50)
                    .HasColumnName("Alternative Name")
                    .IsFixedLength();

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Completed).HasColumnType("datetime");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DependantFileName)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File Name");

                entity.Property(e => e.Document)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Document Category");

                entity.Property(e => e.DocumentDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Document Description");

                entity.Property(e => e.DocumentDiscipline)
                    .HasMaxLength(200)
                    .HasColumnName("Document Discipline");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentKind)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DocumentPackageDocumentId).HasColumnName("DocumentPackageDocumentID");

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.DocumentRevisionCode)
                    .HasMaxLength(50)
                    .HasColumnName("Document Revision Code");

                entity.Property(e => e.DocumentRevisionNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Document Revision Notes");

                entity.Property(e => e.DocumentSize)
                    .HasMaxLength(200)
                    .HasColumnName("Document Size");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.FileCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Created On");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.FileSize).HasColumnName("File Size");

                entity.Property(e => e.FileUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Updated On");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Required By");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("Revision Details");
            });

            modelBuilder.Entity<VwUserreportDocumentpackagerecipient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documentpackagerecipient");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentPackage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Document Package");

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.DocumentPackageRecipientId).HasColumnName("DocumentPackageRecipientID");

                entity.Property(e => e.TeamLeader).HasColumnName("Team Leader");
            });

            modelBuilder.Entity<VwUserreportDocumentrevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documentrevision");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(50)
                    .HasColumnName("Alternative Name")
                    .IsFixedLength();

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Completed).HasColumnType("datetime");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.DependantFileName)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File Name");

                entity.Property(e => e.DocumentCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Document Category");

                entity.Property(e => e.DocumentDiscipline)
                    .HasMaxLength(200)
                    .HasColumnName("Document Discipline");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentRevisionCode)
                    .HasMaxLength(50)
                    .HasColumnName("Document Revision Code");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.DocumentRevisionNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Document Revision Notes");

                entity.Property(e => e.DocumentSize)
                    .HasMaxLength(200)
                    .HasColumnName("Document Size");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.FileCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Created On");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.FileSize).HasColumnName("File Size");

                entity.Property(e => e.FileUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Updated On");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Required By");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("Revision Details");
            });

            modelBuilder.Entity<VwUserreportDocumenttransamittaldocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documenttransamittaldocument");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(500)
                    .HasColumnName("Alternative Name");

                entity.Property(e => e.ApprovalCode)
                    .HasMaxLength(200)
                    .HasColumnName("Approval Code");

                entity.Property(e => e.Approved).HasColumnType("datetime");

                entity.Property(e => e.Completed).HasColumnType("datetime");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.DependantFileName)
                    .HasMaxLength(1000)
                    .HasColumnName("Dependant File Name");

                entity.Property(e => e.Document)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DocumentCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Document Category");

                entity.Property(e => e.DocumentDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Document Description");

                entity.Property(e => e.DocumentDiscipline)
                    .HasMaxLength(200)
                    .HasColumnName("Document Discipline");

                entity.Property(e => e.DocumentKind)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Document Kind");

                entity.Property(e => e.DocumentRevisionCode)
                    .HasMaxLength(50)
                    .HasColumnName("Document Revision Code");

                entity.Property(e => e.DocumentRevisionId).HasColumnName("DocumentRevisionID");

                entity.Property(e => e.DocumentRevisionNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Document Revision Notes");

                entity.Property(e => e.DocumentSize)
                    .HasMaxLength(200)
                    .HasColumnName("Document Size");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Document Status");

                entity.Property(e => e.DocumentTransmittalDocumentId).HasColumnName("DocumentTransmittalDocumentID");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(100)
                    .HasColumnName("Document Type");

                entity.Property(e => e.FileCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Created On");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File Name");

                entity.Property(e => e.FileSize).HasColumnName("File Size");

                entity.Property(e => e.FileUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("File Updated On");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.Received).HasColumnType("datetime");

                entity.Property(e => e.RequiredBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Required By");

                entity.Property(e => e.ResendOnRevision).HasColumnName("Resend On Revision");

                entity.Property(e => e.ResponseReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Received On");

                entity.Property(e => e.Reviewed).HasColumnType("datetime");

                entity.Property(e => e.RevisedBy)
                    .HasMaxLength(500)
                    .HasColumnName("Revised By");

                entity.Property(e => e.RevisedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Revised On");

                entity.Property(e => e.RevisionDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("Revision Details");
            });

            modelBuilder.Entity<VwUserreportDocumenttransmittal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documenttransmittal");

                entity.Property(e => e.AcknowledgementReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Acknowledgement Received On");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.RequestAcknowledgement).HasColumnName("Request Acknowledgement");

                entity.Property(e => e.RequireResponseBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Require Response By");

                entity.Property(e => e.RequiresResponse).HasColumnName("Requires Response");

                entity.Property(e => e.ResponseInstructionMessage)
                    .HasMaxLength(200)
                    .HasColumnName("Response Instruction Message");

                entity.Property(e => e.ResponseReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Response Received On");

                entity.Property(e => e.SentOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Sent On");

                entity.Property(e => e.Transmittal)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TransmittalAcknowledged).HasColumnName("Transmittal Acknowledged");

                entity.Property(e => e.TransmittalCopies).HasColumnName("Transmittal Copies");

                entity.Property(e => e.TransmittalNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Transmittal Notes");

                entity.Property(e => e.TransmittalPending).HasColumnName("Transmittal Pending");

                entity.Property(e => e.TransmittalReceived).HasColumnName("Transmittal Received");

                entity.Property(e => e.TransmittalSent).HasColumnName("Transmittal Sent");
            });

            modelBuilder.Entity<VwUserreportDocumenttransmittalrecipient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_documenttransmittalrecipient");

                entity.Property(e => e.Company).HasMaxLength(200);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(200)
                    .HasColumnName("Company Type");

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Name");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentTransmittal)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Document Transmittal");

                entity.Property(e => e.DocumentTransmittalId).HasColumnName("DocumentTransmittalID");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");

                entity.Property(e => e.DocumentTransmittalRecipientId).HasColumnName("DocumentTransmittalRecipientID");

                entity.Property(e => e.TeamLeader).HasColumnName("Team Leader");
            });

            modelBuilder.Entity<VwUserreportEdiFabricator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_edi_fabricator");

                entity.Property(e => e.CancelledBy)
                    .HasMaxLength(100)
                    .HasColumnName("Cancelled By");

                entity.Property(e => e.DateCancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Cancelled");

                entity.Property(e => e.DateProcessed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Processed");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Received");

                entity.Property(e => e.DateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Sent");

                entity.Property(e => e.EdiBatchNumber)
                    .HasMaxLength(50)
                    .HasColumnName("EDI Batch Number");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.FileNumber).HasColumnName("File Number");

                entity.Property(e => e.ListingType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Listing Type");

                entity.Property(e => e.ProcessedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Processed By");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.SentBy)
                    .HasMaxLength(100)
                    .HasColumnName("Sent By");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierEMailAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Supplier E-Mail Address");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportEdiSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_edi_supplier");

                entity.Property(e => e.CancelledBy)
                    .HasMaxLength(100)
                    .HasColumnName("Cancelled By");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerEMailAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer E-Mail Address");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DateCancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Cancelled");

                entity.Property(e => e.DateProcessed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Processed");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Received");

                entity.Property(e => e.DateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Sent");

                entity.Property(e => e.EdiBatchNumber)
                    .HasMaxLength(50)
                    .HasColumnName("EDI Batch Number");

                entity.Property(e => e.EdifileId).HasColumnName("EDIFileID");

                entity.Property(e => e.FileNumber).HasColumnName("File Number");

                entity.Property(e => e.ListingType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Listing Type");

                entity.Property(e => e.ProcessedBy)
                    .HasMaxLength(100)
                    .HasColumnName("Processed By");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.SalesOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order");

                entity.Property(e => e.SentBy)
                    .HasMaxLength(100)
                    .HasColumnName("Sent By");
            });

            modelBuilder.Entity<VwUserreportEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_employee");

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EmployeeAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Address Country");

                entity.Property(e => e.EmployeeAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Address Line 1");

                entity.Property(e => e.EmployeeAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Address Line 2");

                entity.Property(e => e.EmployeeAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Address Line 3");

                entity.Property(e => e.EmployeeAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Address Line 4");

                entity.Property(e => e.EmployeeAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Employee Address PostCode");

                entity.Property(e => e.EmployeeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Employee Code");

                entity.Property(e => e.EmployeeContact)
                    .HasMaxLength(102)
                    .HasColumnName("Employee Contact");

                entity.Property(e => e.EmployeeEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Employee E-Mail Address");

                entity.Property(e => e.EmployeeFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Employee Fax Number");

                entity.Property(e => e.EmployeeFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Employee First Name");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Employee Job Title");

                entity.Property(e => e.EmployeeLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Employee Last Name");

                entity.Property(e => e.EmployeeMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Employee Mobile Phone Number");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Employee Name");

                entity.Property(e => e.EmployeePosition).HasColumnName("Employee Position");

                entity.Property(e => e.EmployeeTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Employee Telephone");
            });

            modelBuilder.Entity<VwUserreportEmployeeproductionworkorderhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_employeeproductionworkorderhistory");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Employee Name");

                entity.Property(e => e.ItemLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.MovedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionWorkOrder)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Work Order");

                entity.Property(e => e.UnitArea).HasColumnName("Unit Area");

                entity.Property(e => e.UnitWeight).HasColumnName("Unit Weight");

                entity.Property(e => e.WorkStation)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VwUserreportEmployeetimesheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_employeetimesheet");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Employee)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EmployeeHourlyRate).HasColumnName("Employee Hourly Rate");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.Process).HasMaxLength(100);

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Process Description");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.StartTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Start Time");

                entity.Property(e => e.StopTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Stop Time");

                entity.Property(e => e.TimesheetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Timesheet Date");

                entity.Property(e => e.TimesheetEntryId).HasColumnName("TimesheetEntryID");

                entity.Property(e => e.TimesheetId).HasColumnName("TimesheetID");

                entity.Property(e => e.TimesheetNotes).HasColumnName("Timesheet Notes");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.WorkOrderDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Work Order Description");

                entity.Property(e => e.WorkStation).HasMaxLength(100);

                entity.Property(e => e.WorkStationDescription)
                    .HasMaxLength(200)
                    .HasColumnName("WorkStation Description");

                entity.Property(e => e.WorkStationHourlyRate).HasColumnName("WorkStation Hourly Rate");
            });

            modelBuilder.Entity<VwUserreportEnquiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_enquiry");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.AdjustedValue).HasColumnName("Adjusted Value");

                entity.Property(e => e.AdjustedWeight).HasColumnName("Adjusted Weight");

                entity.Property(e => e.Architect).HasMaxLength(200);

                entity.Property(e => e.AsEnquiry)
                    .HasMaxLength(50)
                    .HasColumnName("As Enquiry");

                entity.Property(e => e.BidDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Bid Date");

                entity.Property(e => e.BidStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Bid Status");

                entity.Property(e => e.BuildingType)
                    .HasMaxLength(200)
                    .HasColumnName("Building Type");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DateWon)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Won");

                entity.Property(e => e.DeclinedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Declined Date");

                entity.Property(e => e.DesignFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Design Finish Date");

                entity.Property(e => e.DesignStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Design Start Date");

                entity.Property(e => e.DesignType)
                    .HasMaxLength(200)
                    .HasColumnName("Design Type");

                entity.Property(e => e.Designer).HasMaxLength(200);

                entity.Property(e => e.Engineer).HasMaxLength(200);

                entity.Property(e => e.Enquiry)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EnquiryAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Enquiry Address Line 1");

                entity.Property(e => e.EnquiryAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Enquiry Address Line 2");

                entity.Property(e => e.EnquiryAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Enquiry Address Line 3");

                entity.Property(e => e.EnquiryAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Enquiry Address Line 4");

                entity.Property(e => e.EnquiryCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Category");

                entity.Property(e => e.EnquiryContact)
                    .HasMaxLength(102)
                    .HasColumnName("Enquiry Contact");

                entity.Property(e => e.EnquiryCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Enquiry Country");

                entity.Property(e => e.EnquiryEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Enquiry E-Mail Address");

                entity.Property(e => e.EnquiryFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Enquiry Fax Number");

                entity.Property(e => e.EnquiryId).HasColumnName("EnquiryID");

                entity.Property(e => e.EnquiryMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Enquiry Mobile Phone Number");

                entity.Property(e => e.EnquiryNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Enquiry Notes");

                entity.Property(e => e.EnquiryPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Enquiry Post Code");

                entity.Property(e => e.EnquiryReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Enquiry Received");

                entity.Property(e => e.EnquirySize).HasColumnName("Enquiry Size");

                entity.Property(e => e.EnquiryStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Enquiry Status");

                entity.Property(e => e.EnquiryTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Enquiry Telephone");

                entity.Property(e => e.EnquiryWeight).HasColumnName("Enquiry Weight");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.FinalArea).HasColumnName("Final Area");

                entity.Property(e => e.FinalValue).HasColumnName("Final Value");

                entity.Property(e => e.FinalWeight).HasColumnName("Final Weight");

                entity.Property(e => e.IncludesExcludes).HasColumnName("Includes Excludes");

                entity.Property(e => e.IncludesIncludes).HasColumnName("Includes Includes");

                entity.Property(e => e.IncludesScopeOfWork).HasColumnName("Includes Scope Of Work");

                entity.Property(e => e.IncludesTermsAndConditions).HasColumnName("Includes Terms and Conditions");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.OrderStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order Start Date");

                entity.Property(e => e.PercentReturn).HasColumnName("Percent Return");

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.QuantitySurveyor)
                    .HasMaxLength(200)
                    .HasColumnName("Quantity Surveyor");

                entity.Property(e => e.SalesArea)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Area");

                entity.Property(e => e.ScopeOfWork).HasColumnName("Scope Of Work");

                entity.Property(e => e.SteelStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Steel Start Date");

                entity.Property(e => e.TenderReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Tender Return Date");

                entity.Property(e => e.TermsAndConditions).HasColumnName("Terms and Conditions");

                entity.Property(e => e.UseFinalValue).HasColumnName("Use Final Value");

                entity.Property(e => e.UseFinalWeight).HasColumnName("Use Final Weight");
            });

            modelBuilder.Entity<VwUserreportEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimate");

                entity.Property(e => e.ApplyFittings)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Apply Fittings");

                entity.Property(e => e.ApplyLabourUsages).HasColumnName("Apply Labour Usages");

                entity.Property(e => e.DefaultGrade)
                    .HasMaxLength(50)
                    .HasColumnName("Default Grade");

                entity.Property(e => e.DefaultPriceSource)
                    .HasMaxLength(200)
                    .HasColumnName("Default Price Source");

                entity.Property(e => e.Estimate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EstimateDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Description");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateStatus)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Status");

                entity.Property(e => e.EstimateType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.FabricationRatePerHour).HasColumnName("Fabrication Rate Per Hour");

                entity.Property(e => e.FittingsWeight).HasColumnName("Fittings Weight %");

                entity.Property(e => e.HoursPerWeight).HasColumnName("Hours Per Weight");

                entity.Property(e => e.LinkedToEnquiry)
                    .HasMaxLength(50)
                    .HasColumnName("Linked to Enquiry");

                entity.Property(e => e.Project).HasMaxLength(50);

                entity.Property(e => e.RatePerWeight).HasColumnName("Rate Per Weight");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalValue).HasColumnName("Total Value");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");
            });

            modelBuilder.Entity<VwUserreportEstimateextra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimateextra");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateExtraId).HasColumnName("EstimateExtraID");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateType)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.Extra)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExtraDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Description");

                entity.Property(e => e.ExtraType)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.FinalExtra).HasColumnName("Final Extra");

                entity.Property(e => e.RecalculateSectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Section Roll Type");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReportDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Report Description");

                entity.Property(e => e.SectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Section Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportEstimateitemfittingprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimateitemfittingprocess");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateItemFittingId).HasColumnName("EstimateItemFittingID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.PriceSource)
                    .HasMaxLength(200)
                    .HasColumnName("Price Source");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.Process).HasMaxLength(50);

                entity.Property(e => e.ProcessQuantity).HasColumnName("Process Quantity");

                entity.Property(e => e.ProcessUnitType)
                    .HasMaxLength(200)
                    .HasColumnName("Process Unit Type");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SetupTime).HasColumnName("Setup Time");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.UnitTimeMins).HasColumnName("Unit Time(Mins)");
            });

            modelBuilder.Entity<VwUserreportEstimateitemlisting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimateitemlisting");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.FittingsPerWeight).HasColumnName("Fittings Per Weight");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.HoursPerWeightValue).HasColumnName("Hours Per Weight Value");

                entity.Property(e => e.Item).HasMaxLength(1000);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.ItemListingType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Item Listing Type");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.PriceSource)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Price Source");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.RatePerWeightValue).HasColumnName("Rate Per Weight Value");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.ShaftValue).HasColumnName("Shaft Value");

                entity.Property(e => e.ShaftWeight).HasColumnName("Shaft Weight");

                entity.Property(e => e.Subsection)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportEstimateitemlistingextra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimateitemlistingextra");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateExtraId).HasColumnName("EstimateExtraID");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateType)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.Extra)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExtraDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Description");

                entity.Property(e => e.ExtraType)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.FinalExtra).HasColumnName("Final Extra");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.RecalculateSectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Section Roll Type");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReportDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Report Description");

                entity.Property(e => e.SectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Section Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportEstimateitemusageprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimateitemusageprocess");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateItemUsageProcessId).HasColumnName("EstimateItemUsageProcessID");

                entity.Property(e => e.HourlyRate).HasColumnName("Hourly Rate");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListingID");

                entity.Property(e => e.Process)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Process Description");

                entity.Property(e => e.ProcessHourlyRate).HasColumnName("Process Hourly Rate");

                entity.Property(e => e.ProcessQuantity).HasColumnName("Process Quantity");

                entity.Property(e => e.ProcessType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Process Type");

                entity.Property(e => e.SetupTime).HasColumnName("Setup Time");

                entity.Property(e => e.UnitTimeMins).HasColumnName("Unit Time(Mins)");
            });

            modelBuilder.Entity<VwUserreportEstimatesubsection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimatesubsection");

                entity.Property(e => e.BoqPriceUnit)
                    .HasMaxLength(200)
                    .HasColumnName("BOQ Price Unit");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.Subsection)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SubsectionDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Subsection Description");
            });

            modelBuilder.Entity<VwUserreportEstimatesubsectionextra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimatesubsectionextra");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Estimate).HasMaxLength(50);

                entity.Property(e => e.EstimateExtraId).HasColumnName("EstimateExtraID");

                entity.Property(e => e.EstimateId).HasColumnName("EstimateID");

                entity.Property(e => e.EstimateSubSectionId).HasColumnName("EstimateSubSectionID");

                entity.Property(e => e.EstimateType)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.Extra)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ExtraDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Description");

                entity.Property(e => e.ExtraType)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.FinalExtra).HasColumnName("Final Extra");

                entity.Property(e => e.RecalculateSectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Section Roll Type");

                entity.Property(e => e.Reference).HasMaxLength(100);

                entity.Property(e => e.ReportDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Report Description");

                entity.Property(e => e.SectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Section Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportEstimatesubsectionset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_estimatesubsectionset");

                entity.Property(e => e.BoqPriceUnit)
                    .HasMaxLength(200)
                    .HasColumnName("BOQ Price Unit");

                entity.Property(e => e.EstimateSubsectionSetId).HasColumnName("EstimateSubsectionSetID");

                entity.Property(e => e.SetType)
                    .HasMaxLength(200)
                    .HasColumnName("Set Type");

                entity.Property(e => e.Subsection).HasMaxLength(100);

                entity.Property(e => e.SubsectionDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Subsection Description");

                entity.Property(e => e.SubsectionSet)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Subsection Set");
            });

            modelBuilder.Entity<VwUserreportExtra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_extra");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateType)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.Extra)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExtraDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Description");

                entity.Property(e => e.ExtraId).HasColumnName("ExtraID");

                entity.Property(e => e.ExtraType)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.RecalculateSectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Section Roll Type");

                entity.Property(e => e.SectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Section Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportExtragroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_extragroup");

                entity.Property(e => e.CalculationType)
                    .HasMaxLength(100)
                    .HasColumnName("Calculation Type");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.EstimateType)
                    .HasMaxLength(200)
                    .HasColumnName("Estimate Type");

                entity.Property(e => e.Extra).HasMaxLength(50);

                entity.Property(e => e.ExtraDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Description");

                entity.Property(e => e.ExtraGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Extra Group");

                entity.Property(e => e.ExtraGroupDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Group Description");

                entity.Property(e => e.ExtraGroupId).HasColumnName("ExtraGroupID");

                entity.Property(e => e.ExtraType)
                    .HasMaxLength(200)
                    .HasColumnName("Extra Type");

                entity.Property(e => e.RecalculateSectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Recalculate Section Roll Type");

                entity.Property(e => e.SectionRollType)
                    .HasMaxLength(50)
                    .HasColumnName("Section Roll Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportFitting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_fitting");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.AsShaft).HasColumnName("As Shaft");

                entity.Property(e => e.Fitting)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FittingDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Fitting Description");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FixedSizeLength).HasColumnName("Fixed Size - Length");

                entity.Property(e => e.FixedSizeThick).HasColumnName("Fixed Size - Thick");

                entity.Property(e => e.FixedSizeWidth).HasColumnName("Fixed Size - Width");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MemberDepthFittingLengthAddition).HasColumnName("Member Depth - Fitting Length Addition");

                entity.Property(e => e.MemberDepthFittingLengthPercentage).HasColumnName("Member Depth - Fitting Length Percentage");

                entity.Property(e => e.MemberDepthFittingThicknessAddition).HasColumnName("Member Depth - Fitting Thickness Addition");

                entity.Property(e => e.MemberDepthFittingThicknessPercentage).HasColumnName("Member Depth - Fitting Thickness Percentage");

                entity.Property(e => e.MemberDepthFittingWidthAddition).HasColumnName("Member Depth - Fitting Width Addition");

                entity.Property(e => e.MemberDepthFittingWidthPercentage).HasColumnName("Member Depth - Fitting Width Percentage");

                entity.Property(e => e.MemberLengthFittingLengthAddition).HasColumnName("Member Length - Fitting Length Addition");

                entity.Property(e => e.MemberLengthFittingLengthPercentage).HasColumnName("Member Length - Fitting Length Percentage");

                entity.Property(e => e.MemberLengthFittingThicknessAddition).HasColumnName("Member Length - Fitting Thickness Addition");

                entity.Property(e => e.MemberLengthFittingThicknessPercentage).HasColumnName("Member Length - Fitting Thickness Percentage");

                entity.Property(e => e.MemberLengthFittingWidthAddition).HasColumnName("Member Length - Fitting Width Addition");

                entity.Property(e => e.MemberLengthFittingWidthPercentage).HasColumnName("Member Length - Fitting Width Percentage");

                entity.Property(e => e.MemberThickFFittingLengthAddition).HasColumnName("Member Thick(F) - Fitting Length Addition");

                entity.Property(e => e.MemberThickFFittingLengthPercentage).HasColumnName("Member Thick(F) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickFFittingThicknessAddition).HasColumnName("Member Thick(F) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickFFittingThicknessPercentage).HasColumnName("Member Thick(F) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickFFittingWidthAddition).HasColumnName("Member Thick(F) - Fitting Width Addition");

                entity.Property(e => e.MemberThickFFittingWidthPercentage).HasColumnName("Member Thick(F) - Fitting Width Percentage");

                entity.Property(e => e.MemberThickWFittingLengthAddition).HasColumnName("Member Thick(W) - Fitting Length Addition");

                entity.Property(e => e.MemberThickWFittingLengthPercentage).HasColumnName("Member Thick(W) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickWFittingThicknessAddition).HasColumnName("Member Thick(W) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickWFittingThicknessPercentage).HasColumnName("Member Thick(W) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickWFittingWidthAddition).HasColumnName("Member Thick(W) - Fitting Width Addition");

                entity.Property(e => e.MemberThickWFittingWidthPercentage).HasColumnName("Member Thick(W) - Fitting Width Percentage");

                entity.Property(e => e.MemberWidthFittingLengthAddition).HasColumnName("Member Width - Fitting Length Addition");

                entity.Property(e => e.MemberWidthFittingLengthPercentage).HasColumnName("Member Width - Fitting Length Percentage");

                entity.Property(e => e.MemberWidthFittingThicknessAddition).HasColumnName("Member Width - Fitting Thickness Addition");

                entity.Property(e => e.MemberWidthFittingThicknessPercentage).HasColumnName("Member Width - Fitting Thickness Percentage");

                entity.Property(e => e.MemberWidthFittingWidthAddition).HasColumnName("Member Width - Fitting Width Addition");

                entity.Property(e => e.MemberWidthFittingWidthPercentage).HasColumnName("Member Width - Fitting Width Percentage");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");
            });

            modelBuilder.Entity<VwUserreportFittinggroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_fittinggroup");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.AsShaft).HasColumnName("As Shaft");

                entity.Property(e => e.Fitting).HasMaxLength(100);

                entity.Property(e => e.FittingDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Fitting Description");

                entity.Property(e => e.FittingGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Fitting Group");

                entity.Property(e => e.FittingGroupDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Fitting Group Description");

                entity.Property(e => e.FittingGroupId).HasColumnName("FittingGroupID");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FittingItemType)
                    .HasMaxLength(200)
                    .HasColumnName("Fitting Item Type");

                entity.Property(e => e.FixedSizeLength).HasColumnName("Fixed Size - Length");

                entity.Property(e => e.FixedSizeThick).HasColumnName("Fixed Size - Thick");

                entity.Property(e => e.FixedSizeWidth).HasColumnName("Fixed Size - Width");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MemberDepthFittingLengthAddition).HasColumnName("Member Depth - Fitting Length Addition");

                entity.Property(e => e.MemberDepthFittingLengthPercentage).HasColumnName("Member Depth - Fitting Length Percentage");

                entity.Property(e => e.MemberDepthFittingThicknessAddition).HasColumnName("Member Depth - Fitting Thickness Addition");

                entity.Property(e => e.MemberDepthFittingThicknessPercentage).HasColumnName("Member Depth - Fitting Thickness Percentage");

                entity.Property(e => e.MemberDepthFittingWidthAddition).HasColumnName("Member Depth - Fitting Width Addition");

                entity.Property(e => e.MemberDepthFittingWidthPercentage).HasColumnName("Member Depth - Fitting Width Percentage");

                entity.Property(e => e.MemberLengthFittingLengthAddition).HasColumnName("Member Length - Fitting Length Addition");

                entity.Property(e => e.MemberLengthFittingLengthPercentage).HasColumnName("Member Length - Fitting Length Percentage");

                entity.Property(e => e.MemberLengthFittingThicknessAddition).HasColumnName("Member Length - Fitting Thickness Addition");

                entity.Property(e => e.MemberLengthFittingThicknessPercentage).HasColumnName("Member Length - Fitting Thickness Percentage");

                entity.Property(e => e.MemberLengthFittingWidthAddition).HasColumnName("Member Length - Fitting Width Addition");

                entity.Property(e => e.MemberLengthFittingWidthPercentage).HasColumnName("Member Length - Fitting Width Percentage");

                entity.Property(e => e.MemberThickFFittingLengthAddition).HasColumnName("Member Thick(F) - Fitting Length Addition");

                entity.Property(e => e.MemberThickFFittingLengthPercentage).HasColumnName("Member Thick(F) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickFFittingThicknessAddition).HasColumnName("Member Thick(F) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickFFittingThicknessPercentage).HasColumnName("Member Thick(F) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickFFittingWidthAddition).HasColumnName("Member Thick(F) - Fitting Width Addition");

                entity.Property(e => e.MemberThickFFittingWidthPercentage).HasColumnName("Member Thick(F) - Fitting Width Percentage");

                entity.Property(e => e.MemberThickWFittingLengthAddition).HasColumnName("Member Thick(W) - Fitting Length Addition");

                entity.Property(e => e.MemberThickWFittingLengthPercentage).HasColumnName("Member Thick(W) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickWFittingThicknessAddition).HasColumnName("Member Thick(W) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickWFittingThicknessPercentage).HasColumnName("Member Thick(W) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickWFittingWidthAddition).HasColumnName("Member Thick(W) - Fitting Width Addition");

                entity.Property(e => e.MemberThickWFittingWidthPercentage).HasColumnName("Member Thick(W) - Fitting Width Percentage");

                entity.Property(e => e.MemberWidthFittingLengthAddition).HasColumnName("Member Width - Fitting Length Addition");

                entity.Property(e => e.MemberWidthFittingLengthPercentage).HasColumnName("Member Width - Fitting Length Percentage");

                entity.Property(e => e.MemberWidthFittingThicknessAddition).HasColumnName("Member Width - Fitting Thickness Addition");

                entity.Property(e => e.MemberWidthFittingThicknessPercentage).HasColumnName("Member Width - Fitting Thickness Percentage");

                entity.Property(e => e.MemberWidthFittingWidthAddition).HasColumnName("Member Width - Fitting Width Addition");

                entity.Property(e => e.MemberWidthFittingWidthPercentage).HasColumnName("Member Width - Fitting Width Percentage");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");
            });

            modelBuilder.Entity<VwUserreportFittingprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_fittingprocess");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.AsShaft).HasColumnName("As Shaft");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Fitting)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FittingDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Fitting Description");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FittingProcessNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Fitting Process Notes");

                entity.Property(e => e.FixedSizeLength).HasColumnName("Fixed Size - Length");

                entity.Property(e => e.FixedSizeThick).HasColumnName("Fixed Size - Thick");

                entity.Property(e => e.FixedSizeWidth).HasColumnName("Fixed Size - Width");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.HourlyRate).HasColumnName("Hourly Rate");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MemberDepthFittingLengthAddition).HasColumnName("Member Depth - Fitting Length Addition");

                entity.Property(e => e.MemberDepthFittingLengthPercentage).HasColumnName("Member Depth - Fitting Length Percentage");

                entity.Property(e => e.MemberDepthFittingThicknessAddition).HasColumnName("Member Depth - Fitting Thickness Addition");

                entity.Property(e => e.MemberDepthFittingThicknessPercentage).HasColumnName("Member Depth - Fitting Thickness Percentage");

                entity.Property(e => e.MemberDepthFittingWidthAddition).HasColumnName("Member Depth - Fitting Width Addition");

                entity.Property(e => e.MemberDepthFittingWidthPercentage).HasColumnName("Member Depth - Fitting Width Percentage");

                entity.Property(e => e.MemberLengthFittingLengthAddition).HasColumnName("Member Length - Fitting Length Addition");

                entity.Property(e => e.MemberLengthFittingLengthPercentage).HasColumnName("Member Length - Fitting Length Percentage");

                entity.Property(e => e.MemberLengthFittingThicknessAddition).HasColumnName("Member Length - Fitting Thickness Addition");

                entity.Property(e => e.MemberLengthFittingThicknessPercentage).HasColumnName("Member Length - Fitting Thickness Percentage");

                entity.Property(e => e.MemberLengthFittingWidthAddition).HasColumnName("Member Length - Fitting Width Addition");

                entity.Property(e => e.MemberLengthFittingWidthPercentage).HasColumnName("Member Length - Fitting Width Percentage");

                entity.Property(e => e.MemberThickFFittingLengthAddition).HasColumnName("Member Thick(F) - Fitting Length Addition");

                entity.Property(e => e.MemberThickFFittingLengthPercentage).HasColumnName("Member Thick(F) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickFFittingThicknessAddition).HasColumnName("Member Thick(F) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickFFittingThicknessPercentage).HasColumnName("Member Thick(F) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickFFittingWidthAddition).HasColumnName("Member Thick(F) - Fitting Width Addition");

                entity.Property(e => e.MemberThickFFittingWidthPercentage).HasColumnName("Member Thick(F) - Fitting Width Percentage");

                entity.Property(e => e.MemberThickWFittingLengthAddition).HasColumnName("Member Thick(W) - Fitting Length Addition");

                entity.Property(e => e.MemberThickWFittingLengthPercentage).HasColumnName("Member Thick(W) - Fitting Length Percentage");

                entity.Property(e => e.MemberThickWFittingThicknessAddition).HasColumnName("Member Thick(W) - Fitting Thickness Addition");

                entity.Property(e => e.MemberThickWFittingThicknessPercentage).HasColumnName("Member Thick(W) - Fitting Thickness Percentage");

                entity.Property(e => e.MemberThickWFittingWidthAddition).HasColumnName("Member Thick(W) - Fitting Width Addition");

                entity.Property(e => e.MemberThickWFittingWidthPercentage).HasColumnName("Member Thick(W) - Fitting Width Percentage");

                entity.Property(e => e.MemberWidthFittingLengthAddition).HasColumnName("Member Width - Fitting Length Addition");

                entity.Property(e => e.MemberWidthFittingLengthPercentage).HasColumnName("Member Width - Fitting Length Percentage");

                entity.Property(e => e.MemberWidthFittingThicknessAddition).HasColumnName("Member Width - Fitting Thickness Addition");

                entity.Property(e => e.MemberWidthFittingThicknessPercentage).HasColumnName("Member Width - Fitting Thickness Percentage");

                entity.Property(e => e.MemberWidthFittingWidthAddition).HasColumnName("Member Width - Fitting Width Addition");

                entity.Property(e => e.MemberWidthFittingWidthPercentage).HasColumnName("Member Width - Fitting Width Percentage");

                entity.Property(e => e.PerUnitQuantity).HasColumnName("Per Unit Quantity");

                entity.Property(e => e.Process).HasMaxLength(50);

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Process Description");

                entity.Property(e => e.ProcessUnitType)
                    .HasMaxLength(200)
                    .HasColumnName("Process Unit Type");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SetupTime).HasColumnName("Setup Time");

                entity.Property(e => e.UnitTimeMins).HasColumnName("Unit Time(Mins)");

                entity.Property(e => e.UpToSize).HasColumnName("Up To Size");
            });

            modelBuilder.Entity<VwUserreportInventoryadjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_inventoryadjustment");

                entity.Property(e => e.InventoryAdjustment)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inventory Adjustment");

                entity.Property(e => e.InventoryAdjustmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inventory Adjustment Date");

                entity.Property(e => e.InventoryAdjustmentDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Inventory Adjustment Description");

                entity.Property(e => e.InventoryAdjustmentId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("InventoryAdjustmentID");

                entity.Property(e => e.InventoryAdjustmentNotes).HasColumnName("Inventory Adjustment Notes");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportInventoryadjustmentitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_inventoryadjustmentitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.InventoryAdjustmentId).HasColumnName("InventoryAdjustmentID");

                entity.Property(e => e.InventoryAdjustmentItemId).HasColumnName("InventoryAdjustmentItemID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportIssuetosubcontractor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_issuetosubcontractor");

                entity.Property(e => e.IssueToSubContractor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Issue to SubContractor");

                entity.Property(e => e.IssueToSubContractorDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Issue to SubContractor Date");

                entity.Property(e => e.IssueToSubContractorDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Issue to SubContractor Description");

                entity.Property(e => e.IssueToSubContractorId).HasColumnName("IssueToSubContractorID");

                entity.Property(e => e.IssueToSubContractorNotes).HasColumnName("Issue to SubContractor Notes");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");
            });

            modelBuilder.Entity<VwUserreportIssuetosubcontractoritem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_issuetosubcontractoritems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IssueToSubContractorId).HasColumnName("IssueToSubContractorID");

                entity.Property(e => e.IssueToSubContractorItemId).HasColumnName("IssueToSubContractorItemID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportIssuetoworkorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_issuetoworkorder");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.IssueToWorkOrder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Issue to Work Order");

                entity.Property(e => e.IssueToWorkOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Issue to Work Order Date");

                entity.Property(e => e.IssueToWorkOrderDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Issue to Work Order Description");

                entity.Property(e => e.IssueToWorkOrderId).HasColumnName("IssueToWorkOrderID");

                entity.Property(e => e.IssueToWorkOrderNotes).HasColumnName("Issue to Work Order Notes");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");
            });

            modelBuilder.Entity<VwUserreportIssuetoworkorderitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_issuetoworkorderitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IssueToWorkOrderId).HasColumnName("IssueToWorkOrderID");

                entity.Property(e => e.IssueToWorkOrderItemId).HasColumnName("IssueToWorkOrderItemID");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_item");

                entity.Property(e => e.AlternativeName)
                    .HasMaxLength(255)
                    .HasColumnName("Alternative Name");

                entity.Property(e => e.BackFlush).HasColumnName("Back Flush");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CreateProductionWorkOrder).HasColumnName("Create Production Work Order");

                entity.Property(e => e.CrossSectionalArea).HasColumnName("Cross Sectional Area");

                entity.Property(e => e.DefaultPurchasingPrice).HasColumnName("Default Purchasing Price");

                entity.Property(e => e.DefaultPurchasingPriceUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default Purchasing Price Unit");

                entity.Property(e => e.DefaultSellingPrice).HasColumnName("Default Selling Price");

                entity.Property(e => e.DefaultSellingPriceUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default Selling Price Unit");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective Date");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiry Date");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.HasGrades).HasColumnName("Has Grades");

                entity.Property(e => e.InventoryTracking)
                    .HasMaxLength(200)
                    .HasColumnName("Inventory Tracking");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemClass)
                    .HasMaxLength(200)
                    .HasColumnName("Item Class");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemGroup)
                    .HasMaxLength(200)
                    .HasColumnName("Item Group");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemNotes)
                    .HasMaxLength(3000)
                    .HasColumnName("Item Notes");

                entity.Property(e => e.ItemPartNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Part Number");

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Type");

                entity.Property(e => e.MinimumQuantity).HasColumnName("Minimum Quantity");

                entity.Property(e => e.Procurement)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Region).HasMaxLength(100);

                entity.Property(e => e.ScrapLengthArea).HasColumnName("Scrap Length/Area");

                entity.Property(e => e.SectionSize)
                    .HasMaxLength(100)
                    .HasColumnName("Section Size");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SurfaceArea).HasColumnName("Surface Area");

                entity.Property(e => e.Tflange).HasColumnName("TFlange");

                entity.Property(e => e.TrackingLevel)
                    .HasMaxLength(200)
                    .HasColumnName("Tracking Level");

                entity.Property(e => e.TrackingNumberMask)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking Number - Mask");

                entity.Property(e => e.Tweb).HasColumnName("TWeb");
            });

            modelBuilder.Entity<VwUserreportItemcustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemcustomer");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Code");

                entity.Property(e => e.CustomerGrade)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Grade");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Part Number");

                entity.Property(e => e.CustomerSize)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Size");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemCustomerId).HasColumnName("ItemCustomerID");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportIteminventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_iteminventory");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CustomGirder).HasColumnName("Custom Girder");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemInventoryId).HasColumnName("ItemInventoryID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemSiteInventoryId).HasColumnName("ItemSiteInventoryID");

                entity.Property(e => e.LockingTransaction)
                    .HasMaxLength(4000)
                    .HasColumnName("Locking Transaction");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.ReceivedFromMark)
                    .HasMaxLength(255)
                    .HasColumnName("Received From Mark");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(4000)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.WorkOrder).HasColumnName("Work Order");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportIteminventorytransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_iteminventorytransaction");

                entity.Property(e => e.AdjustmentType)
                    .HasMaxLength(200)
                    .HasColumnName("Adjustment Type");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(50)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Employee).HasMaxLength(100);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("External Reference");

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.SalesInvoiced).HasColumnName("Sales Invoiced");

                entity.Property(e => e.SalesOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order");

                entity.Property(e => e.SalesOrderDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Order Description");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.Transaction)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Transaction Date");

                entity.Property(e => e.TransactionDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Transaction Description");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionNotes).HasColumnName("Transaction Notes");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(100)
                    .HasColumnName("Transaction Type");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportIteminventorytransactionline>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_iteminventorytransactionline");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CuttingPlanId).HasColumnName("CuttingPlanID");

                entity.Property(e => e.FreightCharge).HasColumnName("Freight Charge");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IntoInventory).HasColumnName("Into Inventory");

                entity.Property(e => e.IsNonStock).HasColumnName("Is Non Stock");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.ReceivedInFull).HasColumnName("Received In Full");

                entity.Property(e => e.RetainOrderedValue).HasColumnName("Retain Ordered Value");

                entity.Property(e => e.ReversalStatus).HasColumnName("Reversal Status");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Transaction Type");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportItemsupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemsupplier");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultSupplier).HasColumnName("Default Supplier");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemSupplierId).HasColumnName("ItemSupplierID");

                entity.Property(e => e.LeadTime).HasColumnName("Lead Time");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnName("Minimum Order Quantity");

                entity.Property(e => e.OrderInMultiplesOf).HasColumnName("Order In Multiples Of");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Code");

                entity.Property(e => e.SupplierGrade)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Grade");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Part Number");

                entity.Property(e => e.SupplierSize)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Size");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");
            });

            modelBuilder.Entity<VwUserreportItemusage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemusage");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.LabourUsage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Labour Usage");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");
            });

            modelBuilder.Entity<VwUserreportItemusagefitting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemusagefitting");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.FittingId).HasColumnName("FittingID");

                entity.Property(e => e.FittingItemType)
                    .HasMaxLength(200)
                    .HasColumnName("Fitting Item Type");

                entity.Property(e => e.FittingNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Fitting Notes");

                entity.Property(e => e.FittingQuantity).HasColumnName("Fitting Quantity");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.LabourUsage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Labour Usage");

                entity.Property(e => e.PerUnitQuantity).HasColumnName("Per Unit Quantity");

                entity.Property(e => e.UnitType)
                    .HasMaxLength(200)
                    .HasColumnName("Unit Type");

                entity.Property(e => e.UpToSize).HasColumnName("Up to Size");
            });

            modelBuilder.Entity<VwUserreportItemusagefittingpercentage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemusagefittingpercentage");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.FittingsPercentage).HasColumnName("Fittings Percentage");

                entity.Property(e => e.HoursPer).HasColumnName("Hours Per");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.LabourUsage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Labour Usage");

                entity.Property(e => e.RatePer).HasColumnName("Rate Per");

                entity.Property(e => e.ToLength).HasColumnName("To Length");
            });

            modelBuilder.Entity<VwUserreportItemusageprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_itemusageprocess");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.HourlyRate).HasColumnName("Hourly Rate");

                entity.Property(e => e.ItemUsageId).HasColumnName("ItemUsageID");

                entity.Property(e => e.LabourUsage)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Labour Usage");

                entity.Property(e => e.PerUnitQuantity).HasColumnName("Per Unit Quantity");

                entity.Property(e => e.Process).HasMaxLength(50);

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Process Description");

                entity.Property(e => e.ProcessNotes)
                    .HasMaxLength(1000)
                    .HasColumnName("Process Notes");

                entity.Property(e => e.ProcessUnitType)
                    .HasMaxLength(200)
                    .HasColumnName("Process Unit Type");

                entity.Property(e => e.SetupTime).HasColumnName("Setup Time");

                entity.Property(e => e.UnitTimeMins).HasColumnName("Unit Time(Mins)");

                entity.Property(e => e.UpToSize).HasColumnName("Up To Size");
            });

            modelBuilder.Entity<VwUserreportLocationtransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_locationtransfer");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LocationTransfer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Location Transfer");

                entity.Property(e => e.LocationTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Location Transfer Date");

                entity.Property(e => e.LocationTransferDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Location Transfer Description");

                entity.Property(e => e.LocationTransferId).HasColumnName("LocationTransferID");

                entity.Property(e => e.LocationTransferNotes).HasColumnName("Location Transfer Notes");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportLocationtransferitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_locationtransferitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.LocationTransferId).HasColumnName("LocationTransferID");

                entity.Property(e => e.LocationTransferItemId).HasColumnName("LocationTransferItemID");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportNestingallocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_nestingallocation");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.NestingResult)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Nesting Result");

                entity.Property(e => e.NestingResultDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Nesting Result Date");

                entity.Property(e => e.NestingResultDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Nesting Result Description");

                entity.Property(e => e.NestingResultId).HasColumnName("NestingResultID");
            });

            modelBuilder.Entity<VwUserreportNestingallocationitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_nestingallocationitems");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CuttingPlanId).HasColumnName("CuttingPlanID");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Lot).HasMaxLength(100);

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.NestingResultAllocationId).HasColumnName("NestingResultAllocationID");

                entity.Property(e => e.NestingResultId).HasColumnName("NestingResultID");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");
            });

            modelBuilder.Entity<VwUserreportProductionassembly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionassembly");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Employee).HasMaxLength(100);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ProductionAssembly)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Production Assembly");

                entity.Property(e => e.ProductionAssemblyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Assembly Date");

                entity.Property(e => e.ProductionAssemblyDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Production Assembly Description");

                entity.Property(e => e.ProductionAssemblyId).HasColumnName("ProductionAssemblyID");

                entity.Property(e => e.ProductionAssemblyNotes).HasColumnName("Production Assembly Notes");
            });

            modelBuilder.Entity<VwUserreportProductionassemblyitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionassemblyitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(50)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IntoInventory).HasColumnName("Into Inventory");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionAssemblyId).HasColumnName("ProductionAssemblyID");

                entity.Property(e => e.ProductionAssemblyItemId).HasColumnName("ProductionAssemblyItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportProductioncutting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productioncutting");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Employee).HasMaxLength(100);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ProductionCutting)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Production Cutting");

                entity.Property(e => e.ProductionCuttingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Cutting Date");

                entity.Property(e => e.ProductionCuttingDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Production Cutting Description");

                entity.Property(e => e.ProductionCuttingId).HasColumnName("ProductionCuttingID");

                entity.Property(e => e.ProductionCuttingNotes).HasColumnName("Production Cutting Notes");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportProductioncuttingitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productioncuttingitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.IntoInventory).HasColumnName("Into Inventory");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionCuttingId).HasColumnName("ProductionCuttingID");

                entity.Property(e => e.ProductionCuttingItemId).HasColumnName("ProductionCuttingItemID");

                entity.Property(e => e.ProductionCuttingType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Cutting Type");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportProductionprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionprocess");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.DefaultFixedTime).HasColumnName("Default Fixed Time");

                entity.Property(e => e.DefaultItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Default Item Location");

                entity.Property(e => e.DefaultLocationTransferReport)
                    .HasMaxLength(100)
                    .HasColumnName("Default Location Transfer Report");

                entity.Property(e => e.DefaultPrinter)
                    .HasMaxLength(50)
                    .HasColumnName("Default Printer");

                entity.Property(e => e.DefaultProcessTime).HasColumnName("Default Process Time");

                entity.Property(e => e.DisplayTimeUnit)
                    .HasMaxLength(200)
                    .HasColumnName("Display Time Unit");

                entity.Property(e => e.EstimateProcess)
                    .HasMaxLength(50)
                    .HasColumnName("Estimate Process");

                entity.Property(e => e.FittingProcess)
                    .HasMaxLength(50)
                    .HasColumnName("Fitting Process");

                entity.Property(e => e.LocationType)
                    .HasMaxLength(200)
                    .HasColumnName("Location Type");

                entity.Property(e => e.OvertimeHourlyRate).HasColumnName("Overtime Hourly Rate");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionProcessDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Production Process Description");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionProcessNotes).HasColumnName("Production Process Notes");

                entity.Property(e => e.ProductionStage)
                    .HasMaxLength(100)
                    .HasColumnName("Production Stage");

                entity.Property(e => e.ProductionWorkStation)
                    .HasMaxLength(100)
                    .HasColumnName("Production Work Station");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.RequiresWorkStation).HasColumnName("Requires WorkStation");

                entity.Property(e => e.StandardHourlyRate).HasColumnName("Standard Hourly Rate");
            });

            modelBuilder.Entity<VwUserreportProductionprocesscamcrossreference>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionprocesscamcrossreference");

                entity.Property(e => e.CamProcess)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("CAM Process");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionProcessCamreferenceId).HasColumnName("ProductionProcessCAMReferenceID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");
            });

            modelBuilder.Entity<VwUserreportProductionprocessrole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionprocessrole");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionProcessRoleId).HasColumnName("ProductionProcessRoleID");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");
            });

            modelBuilder.Entity<VwUserreportProductionproposedmovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionproposedmovement");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.Employee).HasMaxLength(100);

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ItemLocationType)
                    .HasMaxLength(200)
                    .HasColumnName("Item Location Type");

                entity.Property(e => e.ProductionDeliveryNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Production Delivery Note");

                entity.Property(e => e.ProductionDeliveryNoteDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Production Delivery Note Description");

                entity.Property(e => e.ProductionDeliveryNoteId).HasColumnName("ProductionDeliveryNoteID");

                entity.Property(e => e.ProductionDeliveryNoteNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Production Delivery Note Notes");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Return Date");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.Trailer).HasMaxLength(200);
            });

            modelBuilder.Entity<VwUserreportProductionproposedmovementitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionproposedmovementitem");

                entity.Property(e => e.FromProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("From Production Process");

                entity.Property(e => e.ProductionDeliveryNoteId).HasColumnName("ProductionDeliveryNoteID");

                entity.Property(e => e.ProductionDeliveryNoteItemId).HasColumnName("ProductionDeliveryNoteItemID");

                entity.Property(e => e.ProductionDeliveryNoteItemNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Production Delivery Note Item Notes");

                entity.Property(e => e.ProductionWorkOrderContractId).HasColumnName("ProductionWorkOrderContractID");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ToProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("To Production Process");
            });

            modelBuilder.Entity<VwUserreportProductiontemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productiontemplate");

                entity.Property(e => e.ApprovedBy).HasColumnName("Approved By");

                entity.Property(e => e.ApprovedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Approved On");

                entity.Property(e => e.AssemblyType)
                    .HasMaxLength(200)
                    .HasColumnName("Assembly Type");

                entity.Property(e => e.MarkItemType)
                    .HasMaxLength(200)
                    .HasColumnName("Mark Item Type");

                entity.Property(e => e.ProductionTemplate)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Template");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.ProductionTemplateNotes).HasColumnName("Production Template Notes");

                entity.Property(e => e.WorkOrderCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Category");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");
            });

            modelBuilder.Entity<VwUserreportProductiontemplaterule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productiontemplaterule");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MaxValue).HasColumnName("Max Value");

                entity.Property(e => e.MinValue).HasColumnName("Min Value");

                entity.Property(e => e.NotAllowed).HasColumnName("Not Allowed");

                entity.Property(e => e.ProductionTemplateId).HasColumnName("ProductionTemplateID");

                entity.Property(e => e.ProductionTemplateRule)
                    .HasMaxLength(200)
                    .HasColumnName("Production Template Rule");

                entity.Property(e => e.ProductionTemplateRuleId).HasColumnName("ProductionTemplateRuleID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<VwUserreportProductionworkorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionworkorder");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Required");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.ProductionWorkOrder)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Work Order");

                entity.Property(e => e.ProductionWorkOrderDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Production Work Order Description");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderNotes).HasColumnName("Production Work Order Notes");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(200)
                    .HasColumnName("Work Order Type");
            });

            modelBuilder.Entity<VwUserreportProductionworkorderhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionworkorderhistory");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(100)
                    .HasColumnName("Employee Name");

                entity.Property(e => e.ItemLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.MovedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionWorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Production Work Order");

                entity.Property(e => e.UnitArea).HasColumnName("Unit Area");

                entity.Property(e => e.UnitWeight).HasColumnName("Unit Weight");

                entity.Property(e => e.WorkStation)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VwUserreportProductionworkorderprocess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionworkorderprocess");

                entity.Property(e => e.DisplayTimeUnit)
                    .HasMaxLength(200)
                    .HasColumnName("Display Time Unit");

                entity.Property(e => e.FixedMinutes).HasColumnName("Fixed Minutes");

                entity.Property(e => e.ItemLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.PerUnitMinutes).HasColumnName("Per Unit Minutes");

                entity.Property(e => e.ProcessNumber).HasColumnName("Process Number");

                entity.Property(e => e.ProductionProcess)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionStage)
                    .HasMaxLength(100)
                    .HasColumnName("Production Stage");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ProductionWorkOrderProcessId).HasColumnName("ProductionWorkOrderProcessID");

                entity.Property(e => e.ProductionWorkOrderProcessNotes).HasColumnName("Production Work Order Process Notes");

                entity.Property(e => e.ProductionWorkstation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Production Workstation");

                entity.Property(e => e.QuantityAtWorkstation).HasColumnName("Quantity At Workstation");

                entity.Property(e => e.QuantityCompleteAtWorkstation).HasColumnName("Quantity Complete At Workstation");

                entity.Property(e => e.QuantityLockedAtWorkstation).HasColumnName("Quantity Locked At Workstation");

                entity.Property(e => e.QuantityScrappedAtWorkstation).HasColumnName("Quantity Scrapped At Workstation");
            });

            modelBuilder.Entity<VwUserreportProductionworkstation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionworkstation");

                entity.Property(e => e.CombineConsecutiveProcesses).HasColumnName("Combine Consecutive Processes");

                entity.Property(e => e.DefaultPrinter)
                    .HasMaxLength(100)
                    .HasColumnName("Default Printer");

                entity.Property(e => e.DefaultReport)
                    .HasMaxLength(100)
                    .HasColumnName("Default Report");

                entity.Property(e => e.GripEndZone).HasColumnName("GripEnd Zone");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.OppositeHand).HasColumnName("Opposite Hand");

                entity.Property(e => e.OutputPath)
                    .HasMaxLength(400)
                    .HasColumnName("Output Path");

                entity.Property(e => e.OvertimeHourlyRate).HasColumnName("Overtime Hourly Rate");

                entity.Property(e => e.ParameterFile)
                    .HasMaxLength(100)
                    .HasColumnName("Parameter File");

                entity.Property(e => e.PostProcessor)
                    .HasMaxLength(100)
                    .HasColumnName("Post Processor");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.RoutingEnabled).HasColumnName("Routing Enabled");

                entity.Property(e => e.SawBladeThickness).HasColumnName("Saw Blade Thickness");

                entity.Property(e => e.StampText)
                    .HasMaxLength(100)
                    .HasColumnName("Stamp Text");

                entity.Property(e => e.StandardHourlyRate).HasColumnName("Standard Hourly Rate");

                entity.Property(e => e.WorkStation)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.WorkStationDescription)
                    .HasMaxLength(200)
                    .HasColumnName("WorkStation Description");

                entity.Property(e => e.WorkStationNotes).HasColumnName("WorkStation Notes");

                entity.Property(e => e.WorkshopArea)
                    .HasMaxLength(200)
                    .HasColumnName("Workshop Area");
            });

            modelBuilder.Entity<VwUserreportProductionworkstationrule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_productionworkstationrule");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MaxValue).HasColumnName("Max Value");

                entity.Property(e => e.MinValue).HasColumnName("Min Value");

                entity.Property(e => e.NotAllowed).HasColumnName("Not Allowed");

                entity.Property(e => e.ProductionProcess)
                    .HasMaxLength(100)
                    .HasColumnName("Production Process");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkStationId).HasColumnName("ProductionWorkStationID");

                entity.Property(e => e.ProductionWorkStationRuleId).HasColumnName("ProductionWorkStationRuleID");

                entity.Property(e => e.RelatedProductionWorkStation)
                    .HasMaxLength(100)
                    .HasColumnName("Related Production WorkStation");

                entity.Property(e => e.Rule).HasMaxLength(200);

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<VwUserreportPurchaseinvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseinvoice");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.PaidOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Paid On");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PurchaseInvoice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice");

                entity.Property(e => e.PurchaseInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Invoice Date");

                entity.Property(e => e.PurchaseInvoiceDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice Description");

                entity.Property(e => e.PurchaseInvoiceId).HasColumnName("PurchaseInvoiceID");

                entity.Property(e => e.PurchaseInvoiceNotes).HasColumnName("Purchase Invoice Notes");

                entity.Property(e => e.PurchaseInvoiceStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase Invoice Status");

                entity.Property(e => e.RequisitionName)
                    .HasMaxLength(50)
                    .HasColumnName("Requisition Name");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Country");

                entity.Property(e => e.SupplierAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 1");

                entity.Property(e => e.SupplierAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 2");

                entity.Property(e => e.SupplierAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 3");

                entity.Property(e => e.SupplierAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 4");

                entity.Property(e => e.SupplierAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Post Code");

                entity.Property(e => e.SupplierContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Contact");

                entity.Property(e => e.SupplierEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier E-Mail Address");

                entity.Property(e => e.SupplierFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Fax Number");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Mobile Phone Number");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.SupplierTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Telephone");

                entity.Property(e => e.SupplierType)
                    .HasMaxLength(200)
                    .HasColumnName("Supplier Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalLength).HasColumnName("Total Length");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Total Value After Discount and Tax - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Total Value After Discount and Tax - System Currency");

                entity.Property(e => e.TotalValueAfterDiscountDocumentCurrency).HasColumnName("Total Value After Discount - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountSystemCurrency).HasColumnName("Total Value After Discount - System Currency");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");

                entity.Property(e => e.TotalWidth).HasColumnName("Total Width");
            });

            modelBuilder.Entity<VwUserreportPurchaseinvoiceitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseinvoiceitem");

                entity.Property(e => e.Contract).HasMaxLength(4000);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueDocumentCurrency).HasColumnName("Discount Value - Document Currency");

                entity.Property(e => e.DiscountValueSystemCurrency).HasColumnName("Discount Value - System Currency");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseInvoiceDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice Description");

                entity.Property(e => e.PurchaseInvoiceId).HasColumnName("PurchaseInvoiceID");

                entity.Property(e => e.PurchaseInvoiceItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Purchase Invoice Item Description");

                entity.Property(e => e.PurchaseInvoiceItemId).HasColumnName("PurchaseInvoiceItemID");

                entity.Property(e => e.PurchaseInvoiceItemNotes).HasColumnName("Purchase Invoice Item Notes");

                entity.Property(e => e.PurchaseInvoiceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Invoice Name");

                entity.Property(e => e.SectionType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Part Number");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueDocumentCurrency).HasColumnName("Tax Value - Document Currency");

                entity.Property(e => e.TaxValueSystemCurrency).HasColumnName("Tax Value - System Currency");

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.UnitPriceDocumentCurrency).HasColumnName("Unit Price - Document Currency");

                entity.Property(e => e.UnitPriceSystemCurrency).HasColumnName("Unit Price - System Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Value After Discount and Tax - Document Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Value After Discount and Tax - System Currency");

                entity.Property(e => e.ValueAfterDiscountDocumentCurrency).HasColumnName("Value After Discount - Document Currency");

                entity.Property(e => e.ValueAfterDiscountSystemCurrency).HasColumnName("Value After Discount - System Currency");

                entity.Property(e => e.ValueBeforeDiscountDocumentCurrency).HasColumnName("Value Before Discount - Document Currency");

                entity.Property(e => e.ValueBeforeDiscountSystemCurrency).HasColumnName("Value Before Discount - System Currency");
            });

            modelBuilder.Entity<VwUserreportPurchaseorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorder");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.PurchaseOrder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Date");

                entity.Property(e => e.PurchaseOrderDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Delivery Date");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase Order Description");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.PurchaseOrderNotes).HasColumnName("Purchase Order Notes");

                entity.Property(e => e.PurchaseOrderStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase Order Status");

                entity.Property(e => e.RequisitionName)
                    .HasMaxLength(50)
                    .HasColumnName("Requisition Name");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Country");

                entity.Property(e => e.SupplierAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 1");

                entity.Property(e => e.SupplierAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 2");

                entity.Property(e => e.SupplierAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 3");

                entity.Property(e => e.SupplierAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 4");

                entity.Property(e => e.SupplierAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Post Code");

                entity.Property(e => e.SupplierContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Contact");

                entity.Property(e => e.SupplierEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier E-Mail Address");

                entity.Property(e => e.SupplierFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Fax Number");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Mobile Phone Number");

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Reference");

                entity.Property(e => e.SupplierTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Telephone");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalLength).HasColumnName("Total Length");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Total Value After Discount and Tax - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Total Value After Discount and Tax - System Currency");

                entity.Property(e => e.TotalValueAfterDiscountDocumentCurrency).HasColumnName("Total Value After Discount - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountSystemCurrency).HasColumnName("Total Value After Discount - System Currency");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");

                entity.Property(e => e.TotalWidth).HasColumnName("Total Width");
            });

            modelBuilder.Entity<VwUserreportPurchaseorderitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorderitem");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueDocumentCurrency).HasColumnName("Discount Value - Document Currency");

                entity.Property(e => e.DiscountValueSystemCurrency).HasColumnName("Discount Value - System Currency");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.IsDirectIssue).HasColumnName("Is Direct Issue");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order Quantity");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase Order Description");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.PurchaseOrderItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Purchase Order Item Description");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.PurchaseOrderItemNotes).HasColumnName("Purchase Order Item Notes");

                entity.Property(e => e.PurchaseOrderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order Name");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity Outstanding");

                entity.Property(e => e.ReceivedInFull).HasColumnName("Received In Full");

                entity.Property(e => e.ReceivedQuantity).HasColumnName("Received Quantity");

                entity.Property(e => e.RollDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Roll Date");

                entity.Property(e => e.RollReference)
                    .HasMaxLength(50)
                    .HasColumnName("Roll Reference");

                entity.Property(e => e.RollReferenceLineId).HasColumnName("RollReferenceLineID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SupplierPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Part Number");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueDocumentCurrency).HasColumnName("Tax Value - Document Currency");

                entity.Property(e => e.TaxValueSystemCurrency).HasColumnName("Tax Value - System Currency");

                entity.Property(e => e.UnitPriceDocumentCurrency).HasColumnName("Unit Price - Document Currency");

                entity.Property(e => e.UnitPriceSystemCurrency).HasColumnName("Unit Price - System Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Value After Discount and Tax - Document Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Value After Discount and Tax - System Currency");

                entity.Property(e => e.ValueAfterDiscountDocumentCurrency).HasColumnName("Value After Discount - Document Currency");

                entity.Property(e => e.ValueAfterDiscountSystemCurrency).HasColumnName("Value After Discount - System Currency");

                entity.Property(e => e.ValueBeforeDiscountDocumentCurrency).HasColumnName("Value Before Discount - Document Currency");

                entity.Property(e => e.ValueBeforeDiscountSystemCurrency).HasColumnName("Value Before Discount - System Currency");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportPurchaseorderreceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorderreceipt");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.PurchaseOrderReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Receipt Date");

                entity.Property(e => e.PurchaseOrderReceiptDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Purchase Order Receipt Description");

                entity.Property(e => e.PurchaseOrderReceiptId).HasColumnName("PurchaseOrderReceiptID");

                entity.Property(e => e.PurchaseOrderReceiptNotes).HasColumnName("Purchase Order Receipt Notes");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierDeliveryNote)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Delivery Note");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportPurchaseorderreceiptitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorderreceiptitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.PurchaseOrderItemId).HasColumnName("PurchaseOrderItemID");

                entity.Property(e => e.PurchaseOrderReceipt)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase Order Receipt");

                entity.Property(e => e.PurchaseOrderReceiptId).HasColumnName("PurchaseOrderReceiptID");

                entity.Property(e => e.PurchaseOrderReceiptItemId).HasColumnName("PurchaseOrderReceiptItemID");

                entity.Property(e => e.ReceivedInFull).HasColumnName("Received In Full");

                entity.Property(e => e.RetainOrderedValue).HasColumnName("Retain Ordered Value");

                entity.Property(e => e.ReversalStatus).HasColumnName("Reversal Status");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportPurchaseorderreturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorderreturn");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(50)
                    .HasColumnName("External Reference");

                entity.Property(e => e.PurchaseOrderReturn)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Purchase Order Return");

                entity.Property(e => e.PurchaseOrderReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase Order Return Date");

                entity.Property(e => e.PurchaseOrderReturnId).HasColumnName("PurchaseOrderReturnID");

                entity.Property(e => e.PurchaseOrderReturnNotes).HasColumnName("Purchase Order Return Notes");

                entity.Property(e => e.Reason).HasMaxLength(400);

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportPurchaseorderreturnitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_purchaseorderreturnitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.PurchaseOrderReturnId).HasColumnName("PurchaseOrderReturnID");

                entity.Property(e => e.PurchaseOrderReturnItemId).HasColumnName("PurchaseOrderReturnItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportQsanalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qsanalysis");

                entity.Property(e => e.Contract)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CostValue).HasColumnName("Cost Value");

                entity.Property(e => e.QsAnalysis)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Analysis");

                entity.Property(e => e.QsAnalysisNotes).HasColumnName("QS Analysis Notes");

                entity.Property(e => e.QsanalysisId).HasColumnName("QSAnalysisID");

                entity.Property(e => e.SellValue).HasColumnName("Sell Value");
            });

            modelBuilder.Entity<VwUserreportQsanalysislisting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qsanalysislisting");

                entity.Property(e => e.CostValue).HasColumnName("Cost Value");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ManuallyCategorised).HasColumnName("Manually Categorised");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.MarkItemCutType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item Cut Type");

                entity.Property(e => e.MarkItemLength).HasColumnName("Mark Item Length");

                entity.Property(e => e.MarkItemPaintFinish)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item Paint Finish");

                entity.Property(e => e.MarkItemPreliminaryMark)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item Preliminary Mark");

                entity.Property(e => e.MarkItemQuantity).HasColumnName("Mark Item Quantity");

                entity.Property(e => e.MarkItemWidth).HasColumnName("Mark Item Width");

                entity.Property(e => e.QsCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Category");

                entity.Property(e => e.QsCategoryDescription)
                    .HasMaxLength(255)
                    .HasColumnName("QS Category Description");

                entity.Property(e => e.QsCategoryNotes).HasColumnName("QS Category Notes");

                entity.Property(e => e.QsCategoryType)
                    .HasMaxLength(200)
                    .HasColumnName("QS Category Type");

                entity.Property(e => e.QsCategoryUnit).HasColumnName("QS Category Unit");

                entity.Property(e => e.QsanalysisId).HasColumnName("QSAnalysisID");

                entity.Property(e => e.QsanalysisListingId).HasColumnName("QSAnalysisListingID");

                entity.Property(e => e.RemovedItem).HasColumnName("Removed Item");

                entity.Property(e => e.RevisedItem).HasColumnName("Revised Item");

                entity.Property(e => e.Rule).HasMaxLength(200);

                entity.Property(e => e.RuleItems)
                    .HasMaxLength(4000)
                    .HasColumnName("Rule Items");

                entity.Property(e => e.RuleMaxValue).HasColumnName("Rule Max Value");

                entity.Property(e => e.RuleMinValue).HasColumnName("Rule Min Value");

                entity.Property(e => e.RuleNotAllowed).HasColumnName("Rule Not Allowed");

                entity.Property(e => e.RuleSectionTypes)
                    .HasMaxLength(4000)
                    .HasColumnName("Rule Section Types");

                entity.Property(e => e.RuleValue)
                    .HasMaxLength(100)
                    .HasColumnName("Rule Value");

                entity.Property(e => e.SellValue).HasColumnName("Sell Value");

                entity.Property(e => e.SortOrder).HasColumnName("Sort Order");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalCostUnitValue).HasColumnName("Total Cost Unit Value");

                entity.Property(e => e.TotalCostValue).HasColumnName("Total Cost Value");

                entity.Property(e => e.TotalSellUnitValue).HasColumnName("Total Sell Unit Value");

                entity.Property(e => e.TotalSellValue).HasColumnName("Total Sell Value");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");
            });

            modelBuilder.Entity<VwUserreportQscategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qscategory");

                entity.Property(e => e.QsCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Category");

                entity.Property(e => e.QsCategoryDescription)
                    .HasMaxLength(100)
                    .HasColumnName("QS Category Description");

                entity.Property(e => e.QsCategoryNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("QS Category Notes");

                entity.Property(e => e.QsCategoryType)
                    .HasMaxLength(200)
                    .HasColumnName("QS Category Type");

                entity.Property(e => e.QsCategoryUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Category Unit");

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");
            });

            modelBuilder.Entity<VwUserreportQscategoryrule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qscategoryrule");

                entity.Property(e => e.QsCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Category");

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.QscategoryRuleId).HasColumnName("QSCategoryRuleID");

                entity.Property(e => e.Rule).HasMaxLength(200);

                entity.Property(e => e.RuleItems)
                    .HasMaxLength(4000)
                    .HasColumnName("Rule Items");

                entity.Property(e => e.RuleMaxValue).HasColumnName("Rule Max Value");

                entity.Property(e => e.RuleMinValue).HasColumnName("Rule Min Value");

                entity.Property(e => e.RuleNotAllowed).HasColumnName("Rule Not Allowed");

                entity.Property(e => e.RuleSectionTypes)
                    .HasMaxLength(4000)
                    .HasColumnName("Rule Section Types");

                entity.Property(e => e.RuleValue)
                    .HasMaxLength(100)
                    .HasColumnName("Rule Value");
            });

            modelBuilder.Entity<VwUserreportQscategorysetcategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qscategorysetcategories");

                entity.Property(e => e.QsCategory)
                    .HasMaxLength(50)
                    .HasColumnName("QS Category");

                entity.Property(e => e.QsCategoryDescription)
                    .HasMaxLength(100)
                    .HasColumnName("QS Category Description");

                entity.Property(e => e.QsCategoryNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("QS Category Notes");

                entity.Property(e => e.QsCategorySet)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("QS Category Set");

                entity.Property(e => e.QsCategoryType)
                    .HasMaxLength(200)
                    .HasColumnName("QS Category Type");

                entity.Property(e => e.QsCategoryUnit)
                    .HasMaxLength(50)
                    .HasColumnName("QS Category Unit");

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.QscategorySetId).HasColumnName("QSCategorySetID");
            });

            modelBuilder.Entity<VwUserreportQscategoryunit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_qscategoryunit");

                entity.Property(e => e.CategoryUnitPrice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Category Unit Price");

                entity.Property(e => e.CostPriceUnit).HasColumnName("Cost Price Unit");

                entity.Property(e => e.CostUnitPrice).HasColumnName("Cost Unit Price");

                entity.Property(e => e.CostUnitQuantity).HasColumnName("Cost Unit Quantity");

                entity.Property(e => e.QscategoryId).HasColumnName("QSCategoryID");

                entity.Property(e => e.QscategoryUnitId).HasColumnName("QSCategoryUnitID");

                entity.Property(e => e.SellPriceUnit).HasColumnName("Sell Price Unit");

                entity.Property(e => e.SellUnitPrice).HasColumnName("Sell Unit Price");

                entity.Property(e => e.SellUnitQuantity).HasColumnName("Sell Unit Quantity");
            });

            modelBuilder.Entity<VwUserreportReceivefromworkorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_receivefromworkorder");

                entity.Property(e => e.ReceiveFromWorkOrder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Receive From Work Order");

                entity.Property(e => e.ReceiveFromWorkOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Receive From Work Order Date");

                entity.Property(e => e.ReceiveFromWorkOrderDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Receive From Work Order Description");

                entity.Property(e => e.ReceiveFromWorkOrderId).HasColumnName("ReceiveFromWorkOrderID");

                entity.Property(e => e.ReceiveFromWorkOrderNotes).HasColumnName("Receive From Work Order Notes");
            });

            modelBuilder.Entity<VwUserreportReceivefromworkorderitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_receivefromworkorderitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.ProductionWorkOrderId).HasColumnName("ProductionWorkOrderID");

                entity.Property(e => e.ReceiveFromWorkOrderId).HasColumnName("ReceiveFromWorkOrderID");

                entity.Property(e => e.ReceiveFromWorkOrderItemId).HasColumnName("ReceiveFromWorkOrderItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Work Order");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_role");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SystemObject)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("System Object");
            });

            modelBuilder.Entity<VwUserreportRollreference>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_rollreference");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.RollDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Roll Date");

                entity.Property(e => e.RollReference)
                    .HasMaxLength(50)
                    .HasColumnName("Roll Reference");

                entity.Property(e => e.RollReferenceDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Roll Reference Description");

                entity.Property(e => e.RollReferenceId).HasColumnName("RollReferenceID");

                entity.Property(e => e.RollReferenceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Roll Reference Name");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportSalesinvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesinvoice");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerBillingAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Country");

                entity.Property(e => e.CustomerBillingAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 1");

                entity.Property(e => e.CustomerBillingAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 2");

                entity.Property(e => e.CustomerBillingAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 3");

                entity.Property(e => e.CustomerBillingAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 4");

                entity.Property(e => e.CustomerBillingAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Post Code");

                entity.Property(e => e.CustomerBillingContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing Contact");

                entity.Property(e => e.CustomerBillingEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing E-Mail Address");

                entity.Property(e => e.CustomerBillingFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Fax Number");

                entity.Property(e => e.CustomerBillingMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Mobile Phone Number");

                entity.Property(e => e.CustomerBillingTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Telephone");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.ExportedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Exported On");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.OrderCategory)
                    .HasMaxLength(200)
                    .HasColumnName("Order Category");

                entity.Property(e => e.PaymentDueBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Payment Due By");

                entity.Property(e => e.PaymentReceived).HasColumnName("Payment Received");

                entity.Property(e => e.PaymentReceivedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Payment Received On");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.SalesInvoice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Invoice");

                entity.Property(e => e.SalesInvoiceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Invoice Description");

                entity.Property(e => e.SalesInvoiceId).HasColumnName("SalesInvoiceID");

                entity.Property(e => e.SalesInvoiceNotes).HasColumnName("Sales Invoice Notes");

                entity.Property(e => e.SalesInvoiceStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Invoice Status");

                entity.Property(e => e.SalesInvoiceType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Sales Invoice Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalLength).HasColumnName("Total Length");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Total Value After Discount and Tax - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Total Value After Discount and Tax - System Currency");

                entity.Property(e => e.TotalValueAfterDiscountDocumentCurrency).HasColumnName("Total Value After Discount - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountSystemCurrency).HasColumnName("Total Value After Discount - System Currency");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");

                entity.Property(e => e.TotalWidth).HasColumnName("Total Width");
            });

            modelBuilder.Entity<VwUserreportSalesinvoiceitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesinvoiceitem");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.ContractMilestone)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Milestone");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Part Number");

                entity.Property(e => e.DeliveredInFull).HasColumnName("Delivered In Full");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueDocumentCurrency).HasColumnName("Discount Value - Document Currency");

                entity.Property(e => e.DiscountValueSystemCurrency).HasColumnName("Discount Value - System Currency");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SalesInvoiceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Invoice Description");

                entity.Property(e => e.SalesInvoiceId).HasColumnName("SalesInvoiceID");

                entity.Property(e => e.SalesInvoiceItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Sales Invoice Item Description");

                entity.Property(e => e.SalesInvoiceItemId).HasColumnName("SalesInvoiceItemID");

                entity.Property(e => e.SalesInvoiceItemNotes).HasColumnName("Sales Invoice Item Notes");

                entity.Property(e => e.SalesInvoiceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Invoice Name");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueDocumentCurrency).HasColumnName("Tax Value - Document Currency");

                entity.Property(e => e.TaxValueSystemCurrency).HasColumnName("Tax Value - System Currency");

                entity.Property(e => e.TransActionLineId).HasColumnName("TransActionLineID");

                entity.Property(e => e.UnitPriceDocumentCurrency).HasColumnName("Unit Price - Document Currency");

                entity.Property(e => e.UnitPriceSystemCurrency).HasColumnName("Unit Price - System Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Value After Discount and Tax - Document Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Value After Discount and Tax - System Currency");

                entity.Property(e => e.ValueAfterDiscountDocumentCurrency).HasColumnName("Value After Discount - Document Currency");

                entity.Property(e => e.ValueAfterDiscountSystemCurrency).HasColumnName("Value After Discount - System Currency");

                entity.Property(e => e.ValueBeforeDiscountDocumentCurrency).HasColumnName("Value Before Discount - Document Currency");

                entity.Property(e => e.ValueBeforeDiscountSystemCurrency).HasColumnName("Value Before Discount - System Currency");
            });

            modelBuilder.Entity<VwUserreportSalesorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesorder");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerBillingAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Country");

                entity.Property(e => e.CustomerBillingAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 1");

                entity.Property(e => e.CustomerBillingAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 2");

                entity.Property(e => e.CustomerBillingAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 3");

                entity.Property(e => e.CustomerBillingAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Billing Address Line 4");

                entity.Property(e => e.CustomerBillingAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Address Post Code");

                entity.Property(e => e.CustomerBillingContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing Contact");

                entity.Property(e => e.CustomerBillingEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Billing E-Mail Address");

                entity.Property(e => e.CustomerBillingFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Fax Number");

                entity.Property(e => e.CustomerBillingMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Mobile Phone Number");

                entity.Property(e => e.CustomerBillingTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Billing Telephone");

                entity.Property(e => e.CustomerDeliveryAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Country");

                entity.Property(e => e.CustomerDeliveryAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 1");

                entity.Property(e => e.CustomerDeliveryAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 2");

                entity.Property(e => e.CustomerDeliveryAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 3");

                entity.Property(e => e.CustomerDeliveryAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Delivery Address Line 4");

                entity.Property(e => e.CustomerDeliveryAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Address Post Code");

                entity.Property(e => e.CustomerDeliveryContact)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Delivery Contact");

                entity.Property(e => e.CustomerDeliveryEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Delivery E-Mail Address");

                entity.Property(e => e.CustomerDeliveryFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Fax Number");

                entity.Property(e => e.CustomerDeliveryMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Mobile Phone Number");

                entity.Property(e => e.CustomerDeliveryTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Delivery Telephone");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(50)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .HasColumnName("Customer Type");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.EdiEMailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EDI E-Mail Address");

                entity.Property(e => e.EdiFileFormat)
                    .HasMaxLength(200)
                    .HasColumnName("EDI File Format");

                entity.Property(e => e.EdiReference)
                    .HasMaxLength(4)
                    .HasColumnName("EDI Reference");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange Rate");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exchange Rate Date");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order Date");

                entity.Property(e => e.OrderTakenBy)
                    .HasMaxLength(50)
                    .HasColumnName("Order Taken By");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.SalesOrder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order");

                entity.Property(e => e.SalesOrderDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Order Description");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SalesOrderNotes).HasColumnName("Sales Order Notes");

                entity.Property(e => e.SalesOrderStatus)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Status");

                entity.Property(e => e.SalesOrderType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Type");

                entity.Property(e => e.StorageLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Storage Location");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TotalArea).HasColumnName("Total Area");

                entity.Property(e => e.TotalLength).HasColumnName("Total Length");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Total Value After Discount and Tax - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Total Value After Discount and Tax - System Currency");

                entity.Property(e => e.TotalValueAfterDiscountDocumentCurrency).HasColumnName("Total Value After Discount - Document Currency");

                entity.Property(e => e.TotalValueAfterDiscountSystemCurrency).HasColumnName("Total Value After Discount - System Currency");

                entity.Property(e => e.TotalWeight).HasColumnName("Total Weight");

                entity.Property(e => e.TotalWidth).HasColumnName("Total Width");
            });

            modelBuilder.Entity<VwUserreportSalesorderdelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesorderdelivery");

                entity.Property(e => e.Customer).HasMaxLength(200);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.SalesInvoiced).HasColumnName("Sales Invoiced");

                entity.Property(e => e.SalesOrder)
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order");

                entity.Property(e => e.SalesOrderDelivery)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order Delivery");

                entity.Property(e => e.SalesOrderDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sales Order Delivery Date");

                entity.Property(e => e.SalesOrderDeliveryDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Sales Order Delivery Description");

                entity.Property(e => e.SalesOrderDeliveryId).HasColumnName("SalesOrderDeliveryID");

                entity.Property(e => e.SalesOrderDeliveryNotes).HasColumnName("Sales Order Delivery Notes");

                entity.Property(e => e.SalesOrderDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Order Description");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");
            });

            modelBuilder.Entity<VwUserreportSalesorderdeliveryitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesorderdeliveryitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(50)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SalesOrderDeliveryId).HasColumnName("SalesOrderDeliveryID");

                entity.Property(e => e.SalesOrderDeliveryItemId).HasColumnName("SalesOrderDeliveryItemID");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportSalesorderitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_salesorderitem");

                entity.Property(e => e.Contract).HasMaxLength(50);

                entity.Property(e => e.ContractDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Description");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractInvoiceScheduleId).HasColumnName("ContractInvoiceScheduleID");

                entity.Property(e => e.ContractMilestone)
                    .HasMaxLength(50)
                    .HasColumnName("Contract Milestone");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.CustomerPartNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Customer Part Number");

                entity.Property(e => e.DeliveredInFull).HasColumnName("Delivered in Full");

                entity.Property(e => e.DeliveredQuantity).HasColumnName("Delivered Quantity");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delivery Date");

                entity.Property(e => e.DiscountPercentage).HasColumnName("Discount Percentage");

                entity.Property(e => e.DiscountValueDocumentCurrency).HasColumnName("Discount Value - Document Currency");

                entity.Property(e => e.DiscountValueSystemCurrency).HasColumnName("Discount Value - System Currency");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.InvoicedQuantity).HasColumnName("Invoiced Quantity");

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order Quantity");

                entity.Property(e => e.Phase).HasMaxLength(100);

                entity.Property(e => e.PhaseDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Phase Description");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity Outstanding");

                entity.Property(e => e.SalesOrderDescription)
                    .HasMaxLength(100)
                    .HasColumnName("Sales Order Description");

                entity.Property(e => e.SalesOrderId).HasColumnName("SalesOrderID");

                entity.Property(e => e.SalesOrderItemDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Sales Order Item Description");

                entity.Property(e => e.SalesOrderItemId).HasColumnName("SalesOrderItemID");

                entity.Property(e => e.SalesOrderItemNotes).HasColumnName("Sales Order Item Notes");

                entity.Property(e => e.SalesOrderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Sales Order Name");

                entity.Property(e => e.SalesOrderSource)
                    .HasMaxLength(200)
                    .HasColumnName("Sales Order Source");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.TaxCodeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("Tax Code Description");

                entity.Property(e => e.TaxPercentage).HasColumnName("Tax Percentage");

                entity.Property(e => e.TaxValueDocumentCurrency).HasColumnName("Tax Value - Document Currency");

                entity.Property(e => e.TaxValueSystemCurrency).HasColumnName("Tax Value - System Currency");

                entity.Property(e => e.UnitPriceDocumentCurrency).HasColumnName("Unit Price - Document Currency");

                entity.Property(e => e.UnitPriceSystemCurrency).HasColumnName("Unit Price - System Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxDocumentCurrency).HasColumnName("Value After Discount and Tax - Document Currency");

                entity.Property(e => e.ValueAfterDiscountAndTaxSystemCurrency).HasColumnName("Value After Discount and Tax - System Currency");

                entity.Property(e => e.ValueAfterDiscountDocumentCurrency).HasColumnName("Value After Discount - Document Currency");

                entity.Property(e => e.ValueAfterDiscountSystemCurrency).HasColumnName("Value After Discount - System Currency");

                entity.Property(e => e.ValueBeforeDiscountDocumentCurrency).HasColumnName("Value Before Discount - Document Currency");

                entity.Property(e => e.ValueBeforeDiscountSystemCurrency).HasColumnName("Value Before Discount - System Currency");
            });

            modelBuilder.Entity<VwUserreportSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_search");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Created By");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Created On");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SystemModuleId).HasColumnName("SystemModuleID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Updated By");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Updated On");

                entity.Property(e => e.UserReportId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UserReportID");
            });

            modelBuilder.Entity<VwUserreportSitetransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_sitetransfer");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.SiteReference)
                    .HasMaxLength(50)
                    .HasColumnName("Site Reference");

                entity.Property(e => e.SiteTransfer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Site Transfer");

                entity.Property(e => e.SiteTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Site Transfer Date");

                entity.Property(e => e.SiteTransferDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Site Transfer Description");

                entity.Property(e => e.SiteTransferId).HasColumnName("SiteTransferID");

                entity.Property(e => e.SiteTransferNotes).HasColumnName("Site Transfer Notes");
            });

            modelBuilder.Entity<VwUserreportSitetransferitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_sitetransferitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(50)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.SiteTransferId).HasColumnName("SiteTransferID");

                entity.Property(e => e.SiteTransferItemId).HasColumnName("SiteTransferItemID");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwUserreportSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_supplier");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EdiEMailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EDI E-Mail Address");

                entity.Property(e => e.EdiFileFormat)
                    .HasMaxLength(200)
                    .HasColumnName("EDI File Format");

                entity.Property(e => e.EdiReference)
                    .HasMaxLength(4)
                    .HasColumnName("EDI Reference");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(100)
                    .HasColumnName("External Reference");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment Terms");

                entity.Property(e => e.ShippingAgent).HasColumnName("Shipping Agent");

                entity.Property(e => e.SteelMillSupplier).HasColumnName("Steel Mill Supplier");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Contact");

                entity.Property(e => e.SupplierEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier E-Mail Address");

                entity.Property(e => e.SupplierFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Fax Number");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Mobile Phone Number");

                entity.Property(e => e.SupplierTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Telephone");

                entity.Property(e => e.SupplierType)
                    .HasMaxLength(200)
                    .HasColumnName("Supplier Type");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .HasColumnName("Tax Code");
            });

            modelBuilder.Entity<VwUserreportSupplierContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_supplier_contact");

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Company Number");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.ContactAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Country");

                entity.Property(e => e.ContactAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 1");

                entity.Property(e => e.ContactAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 2");

                entity.Property(e => e.ContactAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 3");

                entity.Property(e => e.ContactAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Contact Address Line 4");

                entity.Property(e => e.ContactAddressPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Address Post Code");

                entity.Property(e => e.ContactEMailAddress1)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 1");

                entity.Property(e => e.ContactEMailAddress2)
                    .HasMaxLength(100)
                    .HasColumnName("Contact E-Mail Address 2");

                entity.Property(e => e.ContactFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Fax Number");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact First Name");

                entity.Property(e => e.ContactHomePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Home Phone Number");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContactJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("Contact Job Title");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Last Name");

                entity.Property(e => e.ContactMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Mobile Phone Number");

                entity.Property(e => e.ContactNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("Contact Notes");

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Contact Title");

                entity.Property(e => e.DefaultAcknowledgement).HasColumnName("Default Acknowledgement");

                entity.Property(e => e.DefaultCopies).HasColumnName("Default Copies");

                entity.Property(e => e.DefaultEMailPriority)
                    .HasMaxLength(200)
                    .HasColumnName("Default E-Mail Priority");

                entity.Property(e => e.DefaultMaxEMailSizeKb).HasColumnName("Default Max E-Mail Size(kb)");

                entity.Property(e => e.DefaultReason)
                    .HasMaxLength(50)
                    .HasColumnName("Default Reason");

                entity.Property(e => e.DefaultResponseDays).HasColumnName("Default Response Days");

                entity.Property(e => e.DocumentManagementContact).HasColumnName("Document Management Contact");

                entity.Property(e => e.DocumentTransmittalReasonId).HasColumnName("DocumentTransmittalReasonID");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportSupplieraddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_supplieraddress");

                entity.Property(e => e.AddressId).HasColumnName("AddressID");

                entity.Property(e => e.SupplierAddressContact)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Address Contact");

                entity.Property(e => e.SupplierAddressCountry)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Country");

                entity.Property(e => e.SupplierAddressEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Supplier Address E-Mail Address");

                entity.Property(e => e.SupplierAddressFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Fax Number");

                entity.Property(e => e.SupplierAddressLine1)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 1");

                entity.Property(e => e.SupplierAddressLine2)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 2");

                entity.Property(e => e.SupplierAddressLine3)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 3");

                entity.Property(e => e.SupplierAddressLine4)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Address Line 4");

                entity.Property(e => e.SupplierAddressMobilePhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Mobile Phone Number");

                entity.Property(e => e.SupplierAddressName)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Name");

                entity.Property(e => e.SupplierAddressPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Postcode");

                entity.Property(e => e.SupplierAddressTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Address Telephone");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<VwUserreportSystemtaskexecution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_systemtaskexecutions");

                entity.Property(e => e.EndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("End Time");

                entity.Property(e => e.Message).HasMaxLength(4000);

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Start Time");

                entity.Property(e => e.SystemTask)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("System Task");

                entity.Property(e => e.SystemTaskDescription)
                    .HasMaxLength(4000)
                    .HasColumnName("System Task Description");

                entity.Property(e => e.SystemTaskExecutionId).HasColumnName("SystemTaskExecutionID");

                entity.Property(e => e.TaskType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Task Type");
            });

            modelBuilder.Entity<VwUserreportTransactioninterfacelog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_transactioninterfacelog");

                entity.Property(e => e.LogDetails).HasColumnName("Log Details");

                entity.Property(e => e.LogType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Log Type");

                entity.Property(e => e.TransactionInterface)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Transaction Interface");

                entity.Property(e => e.TransactionInterfaceDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("Transaction Interface Description");

                entity.Property(e => e.TransactionInterfaceLog)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Transaction Interface Log");

                entity.Property(e => e.TransactionInterfaceLogId).HasColumnName("TransactionInterfaceLogID");
            });

            modelBuilder.Entity<VwUserreportUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_user");

                entity.Property(e => e.Expires).HasColumnType("datetime");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Role).HasMaxLength(4000);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserEMailAddress)
                    .HasMaxLength(100)
                    .HasColumnName("User E-Mail Address");

                entity.Property(e => e.UserFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("User First Name");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserJobTitle)
                    .HasMaxLength(100)
                    .HasColumnName("User Job Title");

                entity.Property(e => e.UserLastName)
                    .HasMaxLength(50)
                    .HasColumnName("User Last Name");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("User Name");

                entity.Property(e => e.UserNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("User Notes");

                entity.Property(e => e.UserTelephone)
                    .HasMaxLength(50)
                    .HasColumnName("User Telephone");
            });

            modelBuilder.Entity<VwUserreportWorkshoptransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_workshoptransfer");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.ShippingAgent)
                    .HasMaxLength(200)
                    .HasColumnName("Shipping Agent");

                entity.Property(e => e.ShopReference)
                    .HasMaxLength(50)
                    .HasColumnName("Shop Reference");

                entity.Property(e => e.WorkshopTransfer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Workshop Transfer");

                entity.Property(e => e.WorkshopTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Workshop Transfer Date");

                entity.Property(e => e.WorkshopTransferDescription)
                    .HasMaxLength(400)
                    .HasColumnName("Workshop Transfer Description");

                entity.Property(e => e.WorkshopTransferId).HasColumnName("WorkshopTransferID");

                entity.Property(e => e.WorkshopTransferNotes).HasColumnName("Workshop Transfer Notes");
            });

            modelBuilder.Entity<VwUserreportWorkshoptransferitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userreport_workshoptransferitems");

                entity.Property(e => e.CastReference)
                    .HasMaxLength(255)
                    .HasColumnName("Cast Reference");

                entity.Property(e => e.ContractMarkId).HasColumnName("ContractMarkID");

                entity.Property(e => e.ContractMarkItemId).HasColumnName("ContractMarkItemID");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CostCode)
                    .HasMaxLength(50)
                    .HasColumnName("Cost Code");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.Item).HasMaxLength(255);

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(100)
                    .HasColumnName("Item Classification");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemLocation)
                    .HasMaxLength(100)
                    .HasColumnName("Item Location");

                entity.Property(e => e.LineType)
                    .HasMaxLength(200)
                    .HasColumnName("Line Type");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.MarkItem)
                    .HasMaxLength(100)
                    .HasColumnName("Mark Item");

                entity.Property(e => e.PriceUnit)
                    .HasMaxLength(50)
                    .HasColumnName("Price Unit");

                entity.Property(e => e.SectionType)
                    .HasMaxLength(100)
                    .HasColumnName("Section Type");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Tracking Number");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit Price");

                entity.Property(e => e.WorkshopTransferId).HasColumnName("WorkshopTransferID");

                entity.Property(e => e.WorkshopTransferItemId).HasColumnName("WorkshopTransferItemID");

                entity.Property(e => e.YardReference)
                    .HasMaxLength(50)
                    .HasColumnName("Yard Reference");
            });

            modelBuilder.Entity<VwVmproductionworkstationCando>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vmproductionworkstation_cando");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.ProductionWorkstationId).HasColumnName("ProductionWorkstationID");
            });

            modelBuilder.Entity<WebSession>(entity =>
            {
                entity.Property(e => e.WebSessionId).HasColumnName("WebSessionID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("FacilityID");

                entity.Property(e => e.LastPulseDate).HasColumnType("datetime");

                entity.Property(e => e.SessionId).HasColumnName("SessionID");

                entity.Property(e => e.SessionLogId).HasColumnName("SessionLogID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<WorkstationProcess>(entity =>
            {
                entity.ToTable("WorkstationProcess");

                entity.HasIndex(e => e.ProductionProcessId, "IX_WorkstationProcess_FK_WorkstationProcess_ProductionProcess");

                entity.HasIndex(e => e.WorkstationId, "IX_WorkstationProcess_FK_WorkstationProcess_Workstation");

                entity.Property(e => e.WorkstationProcessId).HasColumnName("WorkstationProcessID");

                entity.Property(e => e.ProductionProcessId).HasColumnName("ProductionProcessID");

                entity.Property(e => e.WorkstationId).HasColumnName("WorkstationID");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.WorkstationProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkstationProcess_ProductionProcess");

                entity.HasOne(d => d.Workstation)
                    .WithMany(p => p.WorkstationProcesses)
                    .HasForeignKey(d => d.WorkstationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkstationProcess_Workstation");
            });
            
            modelBuilder.Entity<AdvanceBudgetTotal>(entity =>
            {
                entity.HasNoKey();
            });
            
            modelBuilder.Entity<ProgramMounting>(entity =>
            {
                entity.HasNoKey();
            });
            
            modelBuilder.Entity<AssemblyReleasedOnSite>(entity =>
            {
                entity.HasNoKey();
            });
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        
        public List<T> ExecSQL<T>(string query)
        {
            using (var command = Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Database.OpenConnection();

                List<T> list = new List<T>();
                using (var result = command.ExecuteReader())
                {
                    T obj = default(T);
                    while (result.Read())
                    {
                        obj = Activator.CreateInstance<T>();
                        foreach (PropertyInfo prop in obj.GetType().GetProperties())
                        {
                            if (!object.Equals(result[prop.Name], DBNull.Value))
                            {
                                prop.SetValue(obj, result[prop.Name], null);
                            }
                        }
                        list.Add(obj);
                    }
                }
                Database.CloseConnection();
                return list;
            }
        }
    }
}
